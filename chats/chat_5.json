{
  "requesterUsername": "mandubian",
  "requesterAvatarIconUri": {
    "$mid": 1,
    "path": "/u/77193",
    "scheme": "https",
    "authority": "avatars.githubusercontent.com",
    "query": "v=4"
  },
  "responderUsername": "GitHub Copilot",
  "responderAvatarIconUri": {
    "id": "copilot"
  },
  "initialLocation": "panel",
  "requests": [
    {
      "requestId": "request_884d8586-072d-433c-919f-759b16b98533",
      "message": {
        "text": "correct parser.rs code to make test_parse_list work",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 51
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 52
            },
            "text": "correct parser.rs code to make test_parse_list work",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": [
          {
            "id": "copilot_getTerminalLastCommand",
            "name": "Terminal Last Command",
            "fullName": "Terminal Last Command",
            "icon": {
              "id": "terminal"
            },
            "isTool": true
          },
          {
            "id": "vscode.implicit.viewport",
            "name": "file:parser.rs",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
                "_sep": 1,
                "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 496,
                "startColumn": 1,
                "endLineNumber": 527,
                "endColumn": 39
              }
            },
            "isFile": true,
            "modelDescription": "User's current visible code"
          }
        ]
      },
      "response": [
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Getting last terminal command",
          "pastTenseMessage": "Got last terminal command",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "29af4024-30bc-4253-a1c1-c5466b280ec9"
        },
        {
          "value": "Okay, I see the test `test_parse_list` is failing with an assertion error. The parser returns an `Err` with code `TakeWhileMN` on the input `\"(1 true \\\"hello\\\")\"`, while the test expects it to successfully parse into a `Value::List`.\n\nThe error code `TakeWhileMN` strongly suggests the failure originates from either `parse_symbol` or `parse_keyword`, specifically from the `take_while_m_n(1, 1, is_symbol_start_char)` combinator failing because the input doesn't start with a valid symbol/keyword character.\n\nThis implies that the main `alt` combinator in `parse_value_internal` must have tried `parse_symbol` or `parse_keyword` on the input `\"(1 true \\\"hello\\\")\"`. This should only happen if all preceding alternatives, including `parse_list_internal`, failed.\n\nHowever, based on the code structure, `parse_list_internal` *should* successfully parse `\"(1 true \\\"hello\\\")\"`. Let's re-examine the whitespace handling within `parse_list_internal`:\n\n```rust\n// Current implementation\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // Handles ws around '('\n            separated_list0(\n                multispace0,            // Separator between elements\n                ws(parse_value_internal) // Element parser wrapped in ws\n            ),\n            ws(char(')')), // Handles ws around ')'\n        ),\n        Value::List,\n    )(input)\n}\n```\n\nHere, `ws(parse_value_internal)` consumes whitespace *around* each element, and `multispace0` consumes whitespace *between* elements. This might be redundant or cause unexpected interactions. A simpler approach is to let the separator (`multispace0`) handle all the whitespace between elements and remove the `ws` wrapper from the element parser itself within the list/vector context. The `ws` around the delimiters `()` and `[]` should remain.\n\nLet's apply this simplification:\n\n1.  **Modify `parse_list_internal`**: Remove the `ws` wrapper around `parse_value_internal`.\n2.  **Modify `parse_vector_internal`**: Remove the `ws` wrapper around `parse_value_internal`.\n\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "b8cafe1a-1572-4aab-90c9-c5fb93a595ea"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "f082c519-3435-4dd6-ae90-b9f8815bef29"
        },
        {
          "kind": "undoStop",
          "id": "03272fba-7c93-4624-9130-95bbddf8f3bc"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "\\\n// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')),\n            separated_list0(multispace0, parse_value_internal), // REMOVED ws() wrapper\n            ws(char(')')),\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')),\n            separated_list0(multispace0, parse_value_internal), // REMOVED ws() wrapper\n            ws(char(']')),\n        ),\n        Value::Vector,\n    )(input)\n}\n\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')),",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_value_internal), // REMOVED ws() wrapper",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "            ws(char(')')),",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')),",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_value_internal), // REMOVED ws() wrapper",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "            ws(char(']')),",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, I've modified the `parse_list_internal` and `parse_vector_internal` functions in ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          },
          "uris": {}
        },
        {
          "kind": "inlineReference",
          "inlineReference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          }
        },
        {
          "value": ".\n\n**Analysis:**\nThe test failure indicated that the parser encountered an error (`TakeWhileMN`) while parsing the list `(1 true \"hello\")`, expecting a successful parse result. Examining the `parse_list_internal` function (and similarly `parse_vector_internal`), it used `separated_list0(multispace0, ws(parse_value_internal))`. This setup caused whitespace to be consumed both by the `multispace0` separator *between* elements and by the `ws()` wrapper *around* each `parse_value_internal` call. This double handling of whitespace was likely causing the parser to fail unexpectedly.\n\n**Motivation:**\nThe goal is to correctly parse lists and vectors according to common Lisp-like syntax, where elements are separated by whitespace. The redundant whitespace consumption needed to be removed.\n\n**Steps Taken:**\n1.  Identified the redundant `ws()` wrapper around `parse_value_internal` within the `separated_list0` combinator in both `parse_list_internal` and `parse_vector_internal`.\n2.  Removed this inner `ws()` wrapper. The `multispace0` separator is sufficient to handle whitespace between list/vector elements. The `ws()` wrappers around the opening and closing delimiters (`(`, `)`, `[`, `]`) remain to handle whitespace surrounding the entire collection.\n3.  Applied the change using the `insert_edit_into_file` tool.\n\nNow, I will check for any errors introduced by this change and then run the test again.\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Checking [](file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs)",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs": {
                "$mid": 1,
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              }
            }
          },
          "pastTenseMessage": {
            "value": "Checked [](file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs), no problems found",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs": {
                "$mid": 1,
                "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              }
            }
          },
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "3c09ccc6-384d-4fd8-b504-dde1f542352d"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Using \"Run In Terminal\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolSpecificData": {
            "kind": "terminal",
            "language": "pwsh",
            "command": "cargo test --package acl_compiler --bin acl_compiler -- parser::tests::test_parse_list --exact --show-output"
          },
          "toolCallId": "5775c568-9ea4-475e-be73-2ebcdb691fff"
        },
        {
          "value": "Okay, the previous attempt didn't fix the test. The test failure message `left: Err(Error(Error { input: \"(1 true \\\"hello\\\")\", code: TakeWhileMN }))` was unexpected and pointed towards an issue with symbol/keyword parsing (`TakeWhileMN`), even though the input list didn't contain symbols or keywords. This suggests a more complex interaction or backtracking issue within the parser combinators.\n\nLet's rethink the whitespace handling for lists and vectors. The goal is to parse `(elem1 elem2 ...)` where whitespace is allowed around the parentheses and between elements.\n\nConsider the structure: `delimited(open_delim, content_parser, close_delim)`.\nThe `content_parser` needs to handle elements separated by whitespace, and also potential whitespace before the first element and after the last element.\n\nA common pattern is to handle whitespace *within* the content parser. Let's try:\n1.  Use plain `char('(')` and `char(')')` (or `[`/`]`) as delimiters, without the `ws` wrapper around them.\n2.  For the content parser, use `ws(...)` to wrap the `separated_list0`. This allows whitespace padding around the entire sequence of elements.\n3.  Inside `separated_list0`, use `multispace1",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        }
      ],
      "responseId": "response_2ab7d8f8-656a-4431-a551-f520db8a4560",
      "result": {
        "errorDetails": {
          "message": "Sorry, no response was returned.",
          "responseIsIncomplete": true
        },
        "timings": {
          "firstProgress": 108143,
          "totalElapsed": 192077
        },
        "metadata": {
          "messages": [
            {
              "role": "user",
              "content": "correct parser.rs code to make test_parse_list work"
            },
            {
              "role": "assistant",
              "content": ""
            }
          ],
          "toolCallRounds": [
            {
              "toolCalls": [
                {
                  "name": "insert_edit_into_file",
                  "arguments": "{\"code\":\"\\\\\\n// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\\nfn parse_list_internal(input: \\u0026str) -\\u003e IResult\\u003c\\u0026str, Value\\u003e {\\n    map(\\n        delimited(\\n            ws(char('(')),\\n            separated_list0(multispace0, parse_value_internal), // REMOVED ws() wrapper\\n            ws(char(')')),\\n        ),\\n        Value::List,\\n    )(input)\\n}\\n\\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\\nfn parse_vector_internal(input: \\u0026str) -\\u003e IResult\\u003c\\u0026str, Value\\u003e {\\n    map(\\n        delimited(\\n            ws(char('[')),\\n            separated_list0(multispace0, parse_value_internal), // REMOVED ws() wrapper\\n            ws(char(']')),\\n        ),\\n        Value::Vector,\\n    )(input)\\n}\\n\",\"explanation\":\"Simplify whitespace handling in list and vector parsers by removing the `ws` wrapper around the element parser within `separated_list0`. The `multispace0` separator should handle inter-element whitespace.\",\"filePath\":\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\"}",
                  "id": "call_MHxkN0Z2S3hSRHBpNUsxUnZGZnc__vscode-1745091772363"
                }
              ],
              "toolInputRetry": 0,
              "response": "Okay, I see the test `test_parse_list` is failing with an assertion error. The parser returns an `Err` with code `TakeWhileMN` on the input `\"(1 true \\\"hello\\\")\"`, while the test expects it to successfully parse into a `Value::List`.\n\nThe error code `TakeWhileMN` strongly suggests the failure originates from either `parse_symbol` or `parse_keyword`, specifically from the `take_while_m_n(1, 1, is_symbol_start_char)` combinator failing because the input doesn't start with a valid symbol/keyword character.\n\nThis implies that the main `alt` combinator in `parse_value_internal` must have tried `parse_symbol` or `parse_keyword` on the input `\"(1 true \\\"hello\\\")\"`. This should only happen if all preceding alternatives, including `parse_list_internal`, failed.\n\nHowever, based on the code structure, `parse_list_internal` *should* successfully parse `\"(1 true \\\"hello\\\")\"`. Let's re-examine the whitespace handling within `parse_list_internal`:\n\n```rust\n// Current implementation\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // Handles ws around '('\n            separated_list0(\n                multispace0,            // Separator between elements\n                ws(parse_value_internal) // Element parser wrapped in ws\n            ),\n            ws(char(')')), // Handles ws around ')'\n        ),\n        Value::List,\n    )(input)\n}\n```\n\nHere, `ws(parse_value_internal)` consumes whitespace *around* each element, and `multispace0` consumes whitespace *between* elements. This might be redundant or cause unexpected interactions. A simpler approach is to let the separator (`multispace0`) handle all the whitespace between elements and remove the `ws` wrapper from the element parser itself within the list/vector context. The `ws` around the delimiters `()` and `[]` should remain.\n\nLet's apply this simplification:\n\n1.  **Modify `parse_list_internal`**: Remove the `ws` wrapper around `parse_value_internal`.\n2.  **Modify `parse_vector_internal`**: Remove the `ws` wrapper around `parse_value_internal`.\n\n"
            },
            {
              "toolCalls": [
                {
                  "name": "get_errors",
                  "arguments": "{\"filePaths\":[\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\"]}",
                  "id": "call_MHxWMDJ1SWUwVFFVRHJGQ0FRWHU__vscode-1745091772364"
                },
                {
                  "name": "run_in_terminal",
                  "arguments": "{\"command\":\"cargo test --package acl_compiler --bin acl_compiler -- parser::tests::test_parse_list --exact --show-output\",\"explanation\":\"Run the specific failing test `parser::tests::test_parse_list` again.\",\"isBackground\":false}",
                  "id": "call_MXxBT0RRUGVTZkZTV3BROUdxclg__vscode-1745091772365"
                }
              ],
              "toolInputRetry": 0,
              "response": "Okay, I've modified the `parse_list_internal` and `parse_vector_internal` functions in `acl_compiler/src/parser.rs`.\n\n**Analysis:**\nThe test failure indicated that the parser encountered an error (`TakeWhileMN`) while parsing the list `(1 true \"hello\")`, expecting a successful parse result. Examining the `parse_list_internal` function (and similarly `parse_vector_internal`), it used `separated_list0(multispace0, ws(parse_value_internal))`. This setup caused whitespace to be consumed both by the `multispace0` separator *between* elements and by the `ws()` wrapper *around* each `parse_value_internal` call. This double handling of whitespace was likely causing the parser to fail unexpectedly.\n\n**Motivation:**\nThe goal is to correctly parse lists and vectors according to common Lisp-like syntax, where elements are separated by whitespace. The redundant whitespace consumption needed to be removed.\n\n**Steps Taken:**\n1.  Identified the redundant `ws()` wrapper around `parse_value_internal` within the `separated_list0` combinator in both `parse_list_internal` and `parse_vector_internal`.\n2.  Removed this inner `ws()` wrapper. The `multispace0` separator is sufficient to handle whitespace between list/vector elements. The `ws()` wrappers around the opening and closing delimiters (`(`, `)`, `[`, `]`) remain to handle whitespace surrounding the entire collection.\n3.  Applied the change using the `insert_edit_into_file` tool.\n\nNow, I will check for any errors introduced by this change and then run the test again.\n"
            },
            {
              "toolCalls": [],
              "response": "",
              "toolInputRetry": 0
            }
          ],
          "toolCallResults": {
            "call_MHxkN0Z2S3hSRHBpNUsxUnZGZnc__vscode-1745091772363": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 22,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "<file_after_edit path=\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\">\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "This is the new state of the file after the edit. Base future edits off of this file, no need to read it again, unless a terminal command may have changed it.",
                                  "lineBreakBefore": false
                                },
                                {
                                  "type": 1,
                                  "ctor": 2,
                                  "children": [
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "```rust\nuse nom::{\r\n    branch::alt,\r\n    // Removed is_not\r\n    bytes::complete::{tag, take_while, take_while1, take_while_m_n},\r\n    character::complete::{char, multispace0, none_of},\r\n    combinator::{map, map_res, opt, recognize, value},\r\n    error::ParseError,\r\n    multi::{many0, separated_list0},\r\n    sequence::{delimited, pair, preceded, tuple},\r\n    IResult,\r\n};\r\nuse num_bigint::BigInt;\r\nuse std::collections::HashMap;\r\nuse std::str::FromStr;\r\n\r\nuse crate::ast::{Expr, MapKey, Value}; // Added MapKey\r\n\r\n// Helper function to consume whitespace\r\nfn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>\r\nwhere\r\n    F: FnMut(&'a str) -> IResult<&'a str, O, E>,\r\n{\r\n    delimited(multispace0, inner, multispace0)\r\n}\r\n\r\n// Parser for Nil\r\nfn parse_nil(input: &str) -> IResult<&str, Value> {\r\n    map(tag(\"nil\"), |_| Value::Nil)(input)\r\n}\r\n\r\n// Parser for Booleans\r\nfn parse_bool(input: &str) -> IResult<&str, Value> {\r\n    alt((\r\n        value(Value::Bool(true), tag(\"true\")),\r\n        value(Value::Bool(false), tag(\"false\")),\r\n    ))(input)\r\n}\r\n\r\n// Parser for Integers (Ensure it doesn't parse floats)\r\nfn parse_int(input: &str) -> IResult<&str, Value> {\r\n    // Use recognize first to capture the potential integer part\r\n    let (remaining, recognized) =\r\n        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;\r\n\r\n    // Check the character immediately after the recognized part in the original input\r\n    match remaining.chars().next() {\r\n        // If the next char indicates a float, fail parsing the integer\r\n        Some('.') | Some('e') | Some('E') => {\r\n            Err(nom::Err::Error(nom::error::Error::new(\r\n                input,\r\n                nom::error::ErrorKind::Verify,\r\n            ))) // Indicate verification failure\r\n        }\r\n        // Otherwise, proceed to convert the recognized part to BigInt\r\n        _ => {\r\n            match BigInt::from_str(recognized) {\r\n                Ok(val) => Ok((remaining, Value::Int(val))),\r\n                Err(_) => Err(nom::Err::Error(nom::error::Error::new(\r\n                    recognized,\r\n                    nom::error::ErrorKind::MapRes,\r\n                ))), // Error during BigInt conversion\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Parser for Floats (recognizes the pattern first)\r\n// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan\r\n// *** Must contain '.' or 'e'/'E' to distinguish from integers ***\r\n\r\n// Helper parser for standard float patterns (excluding inf/nan)\r\nfn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {\r\n    recognize(pair(\r\n        opt(alt((char('+'), char('-')))), // Optional sign\r\n        alt((\r\n            // Case 1: Digits + '.' + Optional Digits + Optional Exponent\r\n            recognize(tuple((\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                char('.'),\r\n                take_while(|c: char| c.is_digit(10)), // Optional digits after dot\r\n                opt(tuple((\r\n                    // Optional exponent\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                ))),\r\n            ))),\r\n            // Case 2: '.' + Digits + Optional Exponent\r\n            recognize(tuple((\r\n                char('.'),\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                opt(tuple((\r\n                    // Optional exponent\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                ))),\r\n            ))),\r\n            // Case 3: Digits + Exponent (No decimal point)\r\n            recognize(tuple((\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                // Exponent MUST be present here\r\n                tuple((\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                )),\r\n            ))),\r\n        )),\r\n    ))(input)\r\n}\r\n\r\nfn parse_float(input: &str) -> IResult<&str, Value> {\r\n    map_res(\r\n        alt((\r\n            // Handle inf, -inf, nan first as they are distinct patterns\r\n            tag(\"inf\"),\r\n            tag(\"-inf\"),\r\n            tag(\"+inf\"),\r\n            tag(\"nan\"),\r\n            // Use the helper for standard float patterns\r\n            parse_standard_float_pattern,\r\n        )),\r\n        |s: &str| {\r\n            // Same mapping logic as before\r\n            match s {\r\n                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),\r\n                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),\r\n                \"nan\" => Ok(Value::Float(f64::NAN)),\r\n                _ => s.parse::<f64>().map(Value::Float),\r\n            }\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Helper for parsing a single escaped character\r\nfn parse_escape_sequence(input: &str) -> IResult<&str, char> {\r\n    preceded(\r\n        char('\\\\'),\r\n        alt((\r\n            value('\\\\', tag(\"\\\\\")),\r\n            value('\\\"', tag(\"\\\"\")),\r\n            value('\\n', tag(\"n\")),\r\n            value('\\r', tag(\"r\")),\r\n            value('\\t', tag(\"t\")),\r\n            // TODO: Add more escapes like unicode? \\u{...}\r\n        )),\r\n    )(input)\r\n}\r\n\r\n// Helper for parsing a single non-escape, non-quote character\r\nfn parse_normal_char(input: &str) -> IResult<&str, char> {\r\n    none_of(\"\\\\\\\"\")(input)\r\n}\r\n\r\n// Parser for string content (handles escapes)\r\nfn parse_string_content(input: &str) -> IResult<&str, String> {\r\n    map(\r\n        many0(alt((parse_escape_sequence, parse_normal_char))),\r\n        |chars: Vec<char>| chars.into_iter().collect(),\r\n    )(input)\r\n}\r\n\r\n// Parser for Strings using the manual content parser\r\nfn parse_string(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            char('\"'),\r\n            parse_string_content, // Use the new content parser\r\n            char('\"'),\r\n        ),\r\n        Value::String,\r\n    )(input)\r\n}\r\n\r\n// Parser for Symbols / Keywords\r\n// Must not be nil, true, false, or a number.\r\n// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.\r\n// Continues with non-quote, non-paren/bracket/brace, non-whitespace.\r\nfn is_symbol_start_char(c: char) -> bool {\r\n    // Exclude digits from starting characters\r\n    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)\r\n}\r\n\r\nfn is_symbol_char(c: char) -> bool {\r\n    // Allow digits inside, but not at the start (handled by is_symbol_start_char)\r\n    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)\r\n}\r\n\r\nfn parse_symbol(input: &str) -> IResult<&str, Value> {\r\n    map_res(\r\n        recognize(tuple((\r\n            take_while_m_n(1, 1, is_symbol_start_char),\r\n            take_while(is_symbol_char),\r\n        ))),\r\n        |s: &str| {\r\n            // Check if it's a reserved keyword or number pattern that failed other parsers\r\n            match s {\r\n                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool\r\n                _ => {\r\n                    // Basic check to prevent parsing numbers as symbols\r\n                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')\r\n                        && s.parse::<f64>().is_ok()\r\n                    {\r\n                        Err(\"Numeric literal used as symbol\")\r\n                    } else {\r\n                        Ok(Value::Symbol(s.to_string()))\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Parser for Keywords (e.g., :my-keyword)\r\nfn parse_keyword(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        preceded(\r\n            char(':'),\r\n            // Use the updated symbol character rules\r\n            recognize(tuple((\r\n                take_while_m_n(1, 1, is_symbol_start_char),\r\n                take_while(is_symbol_char),\r\n            ))),\r\n        ),\r\n        |s: &str| Value::Keyword(s.to_string()),\r\n    )(input)\r\n}\r\n\r\n// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\r\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('(')),\r\n            separated_list0(multispace0, parse_value_internal), // REMOVED ws() wrapper\r\n            ws(char(')')),\r\n        ),\r\n        Value::List,\r\n    )(input)\r\n}\r\n\r\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\r\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('[')),\r\n            separated_list0(multispace0, parse_value_internal), // REMOVED ws() wrapper\r\n            ws(char(']')),\r\n        ),\r\n        Value::Vector,\r\n    )(input)\r\n}\r\n\r\n// Parser for Map Entries: key value - WITHOUT outer ws\r\nfn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {\r\n    map_res(\r\n        pair(\r\n            ws(parse_value_internal), // Add ws back\r\n            ws(parse_value_internal), // Add ws back\r\n        ),\r\n        |(k, v)| {\r\n            k.into_map_key()\r\n                .ok_or(\"Invalid map key type\")\r\n                .map(|map_key| (map_key, v))\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws\r\nfn parse_map_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            char('{'), // No ws wrapper\r\n            separated_list0(multispace0, parse_map_entry_internal),\r\n            char('}'), // No ws wrapper\r\n        ),\r\n        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),\r\n    )(input)\r\n}\r\n\r\n// Define the actual recursive parser function\r\nfn parse_value_internal(input: &str) -> IResult<&str, Value> {\r\n    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value\r\n    alt((\r\n        parse_list_internal, // Use internal versions\r\n        parse_vector_internal,\r\n        parse_map_internal,\r\n        parse_nil,\r\n        parse_bool,\r\n        parse_float,\r\n        parse_int,\r\n        parse_string,\r\n        parse_keyword,\r\n        parse_symbol,\r\n    ))(input)\r\n}\r\n\r\n// Top-level parser for a single value/expression, handles outer whitespace\r\npub fn parse_value(input: &str) -> IResult<&str, Value> {\r\n    ws(parse_value_internal)(input) // Add ws wrapper here at the top level\r\n}\r\n\r\n// Top-level parser (for now, just parses a single value into an Expr)\r\npub fn parse_expr(input: &str) -> IResult<&str, Expr> {\r\n    // Use the top-level parse_value which handles outer whitespace\r\n    map(parse_value, Expr::Literal)(input)\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use num_bigint::ToBigInt;\r\n    use std::collections::HashMap;\r\n\r\n    // Helper for float comparison, especially NaNs\r\n    fn assert_float_eq(v1: &Value, v2: &Value) {\r\n        match (v1, v2) {\r\n            (Value::Float(f1), Value::Float(f2)) => {\r\n                if f1.is_nan() && f2.is_nan() {\r\n                    // NaNs are equal in this context\r\n                } else {\r\n                    assert_eq!(f1, f2);\r\n                }\r\n            }\r\n            _ => panic!(\"Expected two Float values\"),\r\n        }\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_nil() {\r\n        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));\r\n        assert!(parse_nil(\"Nil\").is_err());\r\n        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_bool() {\r\n        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));\r\n        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));\r\n        assert!(parse_bool(\"True\").is_err());\r\n        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_int() {\r\n        assert_eq!(\r\n            parse_int(\"123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(\r\n            parse_int(\"-45\"),\r\n            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));\r\n        // Still consumes only digits, leaving trailing chars\r\n        assert_eq!(\r\n            parse_int(\"123a\"),\r\n            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert!(parse_int(\"abc\").is_err());\r\n        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent\r\n                                              // These assertions should now pass\r\n        assert!(parse_int(\"1.2\").is_err());\r\n        assert!(parse_int(\"1e5\").is_err());\r\n        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_float() {\r\n        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));\r\n        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));\r\n        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot\r\n        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot\r\n        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent\r\n        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent\r\n        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));\r\n        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));\r\n        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));\r\n        assert_float_eq(\r\n            &parse_float(\"-inf\").unwrap().1,\r\n            &Value::Float(f64::NEG_INFINITY),\r\n        );\r\n        assert_float_eq(\r\n            &parse_float(\"+inf\").unwrap().1,\r\n            &Value::Float(f64::INFINITY),\r\n        );\r\n        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));\r\n        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"\r\n        assert!(parse_float(\".\").is_err());\r\n        assert!(parse_float(\"e5\").is_err());\r\n        // Ensure it doesn't consume integers meant for parse_int\r\n        assert!(parse_float(\"123\").is_err()); // No dot or exponent\r\n        assert!(parse_float(\"-45\").is_err()); // No dot or exponent\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_string() {\r\n        // This should finally pass\r\n        assert_eq!(\r\n            parse_string(r#\"\"\"\"#),\r\n            Ok((\"\", Value::String(\"\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"hello\"\"#),\r\n            Ok((\"\", Value::String(\"hello\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"hello world\"\"#),\r\n            Ok((\"\", Value::String(\"hello world\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),\r\n            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))\r\n        );\r\n        assert!(parse_string(r#\"\"unterminated\"#).is_err());\r\n        assert!(parse_string(r#\"no quotes\"#).is_err());\r\n        // This should still fail as '\\e' is not a valid escape sequence here\r\n        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_symbol() {\r\n        assert_eq!(\r\n            parse_symbol(\"abc\"),\r\n            Ok((\"\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"a-b_c?\"),\r\n            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))\r\n        );\r\n        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));\r\n        assert_eq!(\r\n            parse_symbol(\"set!\"),\r\n            Ok((\"\", Value::Symbol(\"set!\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"valid.symbol#1\"),\r\n            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"a1\"),\r\n            Ok((\"\", Value::Symbol(\"a1\".to_string())))\r\n        );\r\n\r\n        // Should not parse keywords or numbers\r\n        assert!(parse_symbol(\"nil\").is_err());\r\n        assert!(parse_symbol(\"true\").is_err());\r\n        assert!(parse_symbol(\"false\").is_err());\r\n        assert!(parse_symbol(\"123\").is_err());\r\n        assert!(parse_symbol(\"-45\").is_err());\r\n        assert!(parse_symbol(\"1.23\").is_err());\r\n        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword\r\n\r\n        // Test partial consumption\r\n        assert_eq!(\r\n            parse_symbol(\"abc def\"),\r\n            Ok((\" def\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"abc)\"),\r\n            Ok((\")\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n\r\n        // Invalid start characters\r\n        assert!(parse_symbol(\".dotstart\").is_err());\r\n        assert!(parse_symbol(\"#hashstart\").is_err());\r\n        assert!(parse_symbol(\":colonstart\").is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_keyword() {\r\n        assert_eq!(\r\n            parse_keyword(\":abc\"),\r\n            Ok((\"\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":a-b_c?\"),\r\n            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":+\"),\r\n            Ok((\"\", Value::Keyword(\"+\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":set!\"),\r\n            Ok((\"\", Value::Keyword(\"set!\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":valid.keyword#1\"),\r\n            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":a1\"), // Digit allowed inside\r\n            Ok((\"\", Value::Keyword(\"a1\".to_string())))\r\n        );\r\n\r\n        // Invalid keywords\r\n        assert!(parse_keyword(\"abc\").is_err()); // Missing colon\r\n        assert!(parse_keyword(\":\").is_err()); // Colon only\r\n                                              // This assertion should now pass\r\n        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon\r\n        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon\r\n\r\n        // Test partial consumption\r\n        assert_eq!(\r\n            parse_keyword(\":abc def\"),\r\n            Ok((\" def\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":abc)\"),\r\n            Ok((\")\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_list() {\r\n        // Use the public parse_value or parse_list_internal directly?\r\n        // Tests should ideally use the public interface if possible.\r\n        // Let's test parse_value with list input.\r\n        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));\r\n        assert_eq!(\r\n            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Bool(true),\r\n                    Value::String(\"hello\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value\r\n            Ok((\r\n                \"\", // parse_value consumes all surrounding whitespace\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::List(vec![\r\n                        Value::Int(2.to_bigint().unwrap()),\r\n                        Value::Int(3.to_bigint().unwrap()),\r\n                    ]),\r\n                    Value::Nil,\r\n                ])\r\n            ))\r\n        );\r\n        assert!(parse_value(\"(1 2\").is_err()); // Unclosed\r\n        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_vector() {\r\n        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));\r\n        assert_eq!(\r\n            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Bool(true),\r\n                    Value::String(\"hello\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"[ 1 [ 2 3 ] nil ] \"),\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Vector(vec![\r\n                        Value::Int(2.to_bigint().unwrap()),\r\n                        Value::Int(3.to_bigint().unwrap()),\r\n                    ]),\r\n                    Value::Nil,\r\n                ])\r\n            ))\r\n        );\r\n        assert!(parse_value(\"[1 2\").is_err()); // Unclosed\r\n        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_map() {\r\n        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));\r\n\r\n        let mut expected_map1 = HashMap::new();\r\n        expected_map1.insert(\r\n            MapKey::Keyword(\"a\".to_string()),\r\n            Value::Int(1.to_bigint().unwrap()),\r\n        );\r\n        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));\r\n\r\n        assert_eq!(\r\n            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value\r\n            Ok((\"\", Value::Map(expected_map1)))\r\n        );\r\n\r\n        let mut expected_map2 = HashMap::new();\r\n        let mut inner_map = HashMap::new();\r\n        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);\r\n        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));\r\n\r\n        assert_eq!(\r\n            parse_value(\"{ outer { 10 nil } }\"),\r\n            Ok((\"\", Value::Map(expected_map2)))\r\n        );\r\n\r\n        // Test invalid key type\r\n        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key\r\n        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key\r\n\r\n        // Test uneven number of elements\r\n        assert!(parse_value(\"{ :a 1 :b }\").is_err());\r\n        assert!(parse_value(\"{ :a }\").is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_value_literals() {\r\n        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));\r\n        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));\r\n        assert_eq!(\r\n            parse_value(\"\\t -99 \\n\"),\r\n            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))\r\n        );\r\n        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));\r\n        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));\r\n        assert_eq!(\r\n            parse_value(r#\" \"hello \\n world\" \"#),\r\n            Ok((\"\", Value::String(\"hello \\n world\".to_string())))\r\n        );\r\n        // Test order sensitivity\r\n        assert_eq!(\r\n            parse_value(\"123\"), // Should be Int\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float\r\n        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float\r\n        assert_eq!(\r\n            parse_value(\"  my-symbol  \"),\r\n            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\" :a-keyword? \"),\r\n            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))\r\n        );\r\n\r\n        // Test order sensitivity again\r\n        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol\r\n        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol\r\n        assert_eq!(\r\n            parse_value(\"123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        ); // Not a symbol\r\n        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_value_collections() {\r\n        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));\r\n        // This assertion should now pass as parse_float won't consume \"1\"\r\n        assert_eq!(\r\n            parse_value(\" [ 1 ] \"),\r\n            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))\r\n        );\r\n        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));\r\n        assert_eq!(\r\n            parse_value(\"( [ :a ] { } ) \"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),\r\n                    Value::Map(HashMap::new()),\r\n                ])\r\n            ))\r\n        );\r\n        // Add a test with floats inside collections\r\n        // Using helper method to extract value for comparison\r\n        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;\r\n        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_expr_literal() {\r\n        assert_eq!(\r\n            parse_expr(\" 12345 \"),\r\n            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" false\"),\r\n            Ok((\"\", Expr::Literal(Value::Bool(false))))\r\n        );\r\n        // Using if let to handle the result and avoid unreachable pattern warning\r\n        let parse_result = parse_expr(\" -inf \");\r\n        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");\r\n        if let Ok((_, parsed_expr)) = parse_result {\r\n            let expected_value = Value::Float(f64::NEG_INFINITY);\r\n            match parsed_expr {\r\n                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),\r\n                // This branch might be unreachable if parse_expr only returns Expr::Literal\r\n                #[allow(unreachable_patterns)]\r\n                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),\r\n            }\r\n        }\r\n        assert_eq!(\r\n            parse_expr(r#\" \"string\" \"#),\r\n            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" some_symbol \"),\r\n            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" :keyword123 \"),\r\n            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" (1 2) \"),\r\n            Ok((\r\n                \"\",\r\n                Expr::Literal(Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap())\r\n                ]))\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" [ :a ] \"),\r\n            Ok((\r\n                \"\",\r\n                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))\r\n            ))\r\n        );\r\n        let mut expected_map = HashMap::new();\r\n        expected_map.insert(\r\n            MapKey::String(\"key\".to_string()),\r\n            Value::Int(100.to_bigint().unwrap()),\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" { \\\"key\\\" 100 } \"),\r\n            Ok((\"\", Expr::Literal(Value::Map(expected_map))))\r\n        );\r\n    }\r\n}\r\n\r\n// Helper method added to Value for testing convenience (optional)\r\nimpl Value {\r\n    fn get_vector(&self) -> Option<&Vec<Value>> {\r\n        match self {\r\n            Value::Vector(v) => Some(v),\r\n            _ => None,\r\n        }\r\n    }\r\n}\n```",
                                          "references": [],
                                          "lineBreakBefore": true
                                        }
                                      ],
                                      "references": []
                                    }
                                  ],
                                  "references": []
                                },
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "priority": 1,
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "</file_after_edit>",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 2,
                              "priority": 9007199254740991,
                              "text": "\n",
                              "lineBreakBefore": false
                            }
                          ],
                          "references": []
                        }
                      ],
                      "references": []
                    }
                  }
                }
              ]
            },
            "call_MHxWMDJ1SWUwVFFVRHJGQ0FRWHU__vscode-1745091772364": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 22,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "<errors path=\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\">\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "No errors found",
                                  "lineBreakBefore": false
                                },
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "priority": 1,
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "</errors>",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 2,
                              "priority": 9007199254740991,
                              "text": "\n",
                              "lineBreakBefore": false
                            }
                          ],
                          "references": []
                        }
                      ],
                      "references": []
                    }
                  }
                }
              ]
            },
            "call_MXxBT0RRUGVTZkZTV3BROUdxclg__vscode-1745091772365": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 22,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "children": [
                            {
                              "type": 2,
                              "priority": 9007199254740991,
                              "text": "cargo test --package acl_compiler --bin acl_compiler -- parser::tests::test_parse_list --exact --show-output",
                              "references": [],
                              "lineBreakBefore": true
                            }
                          ],
                          "references": []
                        },
                        {
                          "type": 1,
                          "ctor": 2,
                          "children": [
                            {
                              "type": 2,
                              "priority": 9007199254740991,
                              "text": "",
                              "references": [],
                              "lineBreakBefore": true
                            }
                          ],
                          "references": []
                        },
                        {
                          "type": 1,
                          "ctor": 2,
                          "children": [
                            {
                              "type": 2,
                              "priority": 9007199254740991,
                              "text": "Command exited with code 1",
                              "references": [],
                              "lineBreakBefore": true
                            }
                          ],
                          "references": []
                        }
                      ],
                      "references": []
                    }
                  }
                }
              ]
            }
          },
          "modelMessageId": "2f6d2626-caf4-4f13-b08d-34bcb47bed9a",
          "responseId": "6a536bae-0598-40cd-aade-85aea465fb90",
          "sessionId": "fd77c6d2-0f54-4d70-bef8-16911a33ae6a",
          "agentId": "github.copilot.editsAgent"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editsAgent",
        "description": "Edit files in your workspace in agent mode",
        "when": "config.chat.agent.enabled && !chatAgentModeDisallowed",
        "metadata": {
          "themeIcon": {
            "id": "tools"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "welcomeMessageContent": {
            "icon": {
              "id": "copilot-large"
            },
            "title": "Edit with Copilot",
            "message": {
              "value": "Ask Copilot to edit your files in [agent mode](https://aka.ms/vscode-copilot-agent). Copilot will automatically use multiple requests to pick files to edit, run terminal commands, and iterate on errors.\n\nCopilot is powered by AI, so mistakes are possible. Review output carefully before use.",
              "supportThemeIcons": false,
              "supportHtml": false,
              "uris": {
                "https://aka.ms/vscode-copilot-agent": {
                  "$mid": 1,
                  "external": "https://aka.ms/vscode-copilot-agent",
                  "path": "/vscode-copilot-agent",
                  "scheme": "https",
                  "authority": "aka.ms"
                }
              }
            }
          }
        },
        "name": "agent",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "isToolsAgent": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\.github\\copilot-instructions.md",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "path": "/h:/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1745093295908
    },
    {
      "requestId": "request_dbe90bc6-5011-4e4f-93a5-14f29df70ccf",
      "message": {
        "text": "continue",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 8
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 9
            },
            "text": "continue",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": [
          {
            "id": "vscode.implicit.viewport",
            "name": "file:parser.rs",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
                "_sep": 1,
                "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 219,
                "startColumn": 1,
                "endLineNumber": 252,
                "endColumn": 2
              }
            },
            "isFile": true,
            "modelDescription": "User's current visible code"
          }
        ]
      },
      "response": [
        {
          "value": "Okay, the previous change simplified the whitespace handling within lists and vectors, but the `test_parse_list` still failed.\n\n**Analysis:**\n\n1.  The change involved removing the `ws()` wrapper around the element parser (`parse_value_internal`) inside `separated_list0`, relying solely on `multispace0` as the separator.\n2.  The `delimited` parser still uses `ws()` around the opening and closing parentheses/brackets (`ws(char('('))` and `ws(char(')'))`). This consumes whitespace *outside* the parentheses/brackets and immediately *inside* them.\n3.  The `separated_list0(multispace0, parse_value_internal)` part should handle whitespace *between* elements correctly.\n\n**Hypothesis:**\n\nThe logic seems sound. The failure might be subtle or related to how the test case interacts with the top-level `parse_value` function, which *also* wraps the internal parser with `ws()`. Let's look at the specific test cases within `test_parse_list`:\n\n*   `parse_value(\"()\")`: Should succeed.\n*   `parse_value(\"(1 true \\\\\\\"hello\\\\\\\")\")`: Should succeed.\n*   `parse_value(\"( 1 ( 2 3 ) nil )\")`: Should succeed.\n*   `parse_value(\"(1 2\")`: Should fail (unclosed).\n*   `parse_value(\"[1 2]\")`: Should fail (wrong brackets for list).\n\nThe previous run exited with code 1, indicating a failure, but didn't show the specific assertion that failed.\n\n**Next Step:**\n\nI need to see the detailed output of the failed test to understand *which* assertion is failing and why. I will run the specific test again and examine the output.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Using \"Run In Terminal\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolSpecificData": {
            "kind": "terminal",
            "language": "pwsh",
            "command": "cargo test --package acl_compiler --lib -- tests::test_parse_list --exact --show-output"
          },
          "toolCallId": "a320f34a-e843-4185-8fa1-827499952425"
        },
        {
          "value": "Okay, it seems running the test with `--lib` failed because the project is structured as a binary, not a library.\n\nLet's run the test again using the binary target and examine the specific error output to understand why `test_parse_list` is still failing.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Using \"Run In Terminal\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolSpecificData": {
            "kind": "terminal",
            "language": "pwsh",
            "command": "cargo test parser::tests::test_parse_list --exact --show-output"
          },
          "toolCallId": "e3fb19b5-6fe6-4915-9766-e55f02cd32be"
        },
        {
          "value": "Okay, it seems the previous attempts to run the specific test encountered issues with the command arguments. Let's try running the test again with the correct format to pass arguments to the test runner.\n\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Using \"Run In Terminal\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolSpecificData": {
            "kind": "terminal",
            "language": "pwsh",
            "command": "cargo test parser::tests::test_parse_list -- --exact --show-output"
          },
          "toolCallId": "9af53176-061e-4390-b987-80bf1d3d5b9d"
        },
        {
          "value": "Okay, the previous change didn't resolve the issue with `test_parse_list`. The test failed with a `TakeWhileMN` error, which usually comes from the symbol parser, but the error message showed the original input string `\"(1 true \\\\\\\"hello\\\\\\\")\"`, which is confusing.\n\nIt seems the interaction between the separator (`multispace0`) and the element parser (`parse_value_internal`) within `separated_list0` might be the problem.\n\nLet's try the alternative approach: instead of relying only on the `multispace0` separator to handle whitespace between list items, we'll wrap the element parser (`parse_value_internal`) with the `ws` helper. This means `ws` will handle whitespace around each element *before* and *after* it's parsed, and `multispace0` will handle any *additional* whitespace between elements (though `ws` might consume it all).\n\n1.  **Analysis:** The failure of `test_parse_list` with the input `\"(1 true \\\\\\\"hello\\\\\\\")\"` resulting in a `TakeWhileMN` error on the original input string suggests a failure early in the parsing, potentially due to how `alt` or `separated_list0` is interacting with the `ws` combinator or the element parsers.\n2.  **Motivation:** Wrapping the element parser `parse_value_internal` with `ws` inside `separated_list0` provides a different way to handle whitespace within the list structure. This might resolve potential conflicts or ambiguities that led to the previous error. We will keep `multispace0` as the separator to allow for zero spaces between elements if `ws` consumes everything.\n3.  **Steps:**\n    *   Modify `parse_list_internal` and `parse_vector_internal`.\n    *   In the `separated_list0` call within both functions, change the element parser from `parse_value_internal` to `ws(parse_value_internal)`.\n    *   Run the `test_parse_list` again to see if this resolves the failure.\n\nApplying the change to `parser.rs`:\n*   In `parse_list_internal`, update the `separated_list0` call.\n*   In `parse_vector_internal`, update the `separated_list0` call.\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "b59fb1f1-7694-463d-9cc3-68a5442b37d6"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "cca18b55-feb0-4dc9-8b6d-e33e5daf9f2c"
        },
        {
          "kind": "undoStop",
          "id": "bcabb7cb-54a2-4f3b-9e5a-40d5ed1b7d5d"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')),\n            separated_list0(multispace0, ws(parse_value_internal)), // ADDED ws() wrapper back\n            ws(char(')'))\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')),\n            separated_list0(multispace0, ws(parse_value_internal)), // ADDED ws() wrapper back\n            ws(char(']'))\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')),",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, ws(parse_value_internal)), // ADDED ws() wrapper back",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "            ws(char(')')),",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')),",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, ws(parse_value_internal)), // ADDED ws() wrapper back",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "            ws(char(']')),",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, the previous change didn't resolve the test failure. The test `parser::tests::test_parse_list` still fails with the same error: `Err(Error(Error { input: \"(1 true \\\\\\\"hello\\\\\\\")\", code: TakeWhileMN }))`.\n\nThis error is puzzling because:\n1.  The error code `TakeWhileMN` comes from `parse_symbol`.\n2.  The `input` field in the error refers to the *entire original string* `(1 true \"hello\")`.\n3.  The parser logic, specifically `parse_value` calling `alt` which tries `parse_list_internal` first, should match the leading `(` using `ws(char('('))` within `parse_list_internal`. It shouldn't even get to trying `parse_symbol` on the original input.\n4.  The trace I performed manually suggests the parser logic with `ws(parse_value_internal)` inside `separated_list0` should correctly parse the list.\n\nGiven that the trace seems correct but the test fails unexpectedly, let's try cleaning the build artifacts and running the test again to rule out any issues with stale compiled code.\n\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Using \"Run In Terminal\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolSpecificData": {
            "kind": "terminal",
            "language": "pwsh",
            "command": "cargo clean"
          },
          "toolCallId": "f4da6d88-6008-4de7-a7b0-2d67021c2f33"
        },
        {
          "value": "Okay, I've reverted the change in `parse_list_internal` and `parse_vector_internal` by adding the `ws()` wrapper back around the `parse_value_internal` call within `separated_list0`. This ensures that whitespace around each element within the list or vector is correctly handled.\n\nI also ran `cargo clean` to remove any old build artifacts.\n\nNow, let's run the test again to see if it passes.\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Using \"Run In Terminal\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolSpecificData": {
            "kind": "terminal",
            "language": "pwsh",
            "command": "cargo test parser::tests::test_parse_list -- --exact --show-output"
          },
          "toolCallId": "e1dac7a3-9413-4416-973e-171ccc299f38"
        },
        {
          "value": "Okay, the test `parser::tests::test_parse_list` is still failing with the same error:\n`assertion \\`left == right\\` failed`\n` left: Err(Error(Error { input: \"(1 true \\\\\\\"hello\\\\\\\")\", code: TakeWhileMN }))`\n` right: Ok((\"\", List([Int(1), Bool(true), String(\"hello\")])))`\n\nThis indicates that when parsing the input `(1 true \"hello\")`, the parser is failing with a `TakeWhileMN` error, which is typically associated with the `parse_symbol` function trying to parse based on character properties (`take_while_m_n(1, 1, is_symbol_start_char)`). It seems the parser isn't correctly identifying the input as a list starting with `(`.\n\nLooking at the structure again:\n- `parse_value` calls `ws(parse_value_internal)`.\n- `parse_value_internal` tries `alt((parse_list_internal, ...))`.\n- `parse_list_internal` uses `delimited(ws(char('(')), separated_list0(multispace0, ws(parse_value_internal)), ws(char(')')))`.\n\nThe trace I did previously suggested this *should* work. However, the error persists. Let's reconsider the whitespace handling. The current structure has `ws` around the delimiters `(` and `)` *and* around each element parsed by `parse_value_internal`, *and* `multispace0` separating the elements. This might be causing conflicts or unexpected consumption of whitespace.\n\nLet's try simplifying the whitespace handling within `parse_list_internal` and `parse_vector_internal`. We'll remove the `ws` wrapper from the delimiters `(` and `)`. The `separated_list0` combinator, using `multispace0` as the separator and `ws(parse_value_internal)` as the element parser, should be sufficient to handle whitespace correctly *inside* the list/vector. The top-level `ws` in `parse_value` handles whitespace *outside*.\n\n1.  **Modify `parse_list_internal`**: Remove `ws()` around `char('(')` and `char(')')`.\n2.  **Modify `parse_vector_internal`**: Remove `ws()` around `char('[')` and `char(']')`.\n3.  **Rerun the test**: Check if this resolves the parsing issue.\n\n```rust\n// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            char('('), // REMOVED ws() wrapper\n            separated_list0(multispace0, ws(parse_value_internal)),\n            char(')')  // REMOVED ws() wrapper\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            char('['), // REMOVED ws() wrapper\n            separated_list0(multispace0, ws(parse_value_internal)),\n            char(']')  // REMOVED ws() wrapper\n        ),\n        Value::Vector,\n    )(input)\n}\n```\n\nI will apply this change and run the test again.\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "6e4f7ead-1e48-49b2-9b3b-23324343c0ca"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "3df0d0eb-4b0d-4cb7-8254-39669ca873b8"
        },
        {
          "kind": "undoStop",
          "id": "ce7c325d-7114-4a0e-83b4-959e3a39ce24"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            char('('), // REMOVED ws() wrapper\n            separated_list0(multispace0, ws(parse_value_internal)),\n            char(')')  // REMOVED ws() wrapper\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            char('['), // REMOVED ws() wrapper\n            separated_list0(multispace0, ws(parse_value_internal)),\n            char(']')  // REMOVED ws() wrapper\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('('), // REMOVED ws() wrapper",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, ws(parse_value_internal)), // ADDED ws() wrapper back",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "            char(')')  // REMOVED ws() wrapper",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('['), // REMOVED ws() wrapper",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, ws(parse_value_internal)), // ADDED ws() wrapper back",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "            char(']')  // REMOVED ws() wrapper",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, the previous attempts didn't resolve the issue, and the test `parser::tests::test_parse_list` is still failing with an error related to `TakeWhileMN`, likely originating from `parse_symbol` being tried incorrectly.\n\nThe failure message `left: Err(Error(Error { input: \"(1 true \\\\\\\"hello\\\\\\\")\", code: TakeWhileMN }))` suggests the parser fails early, possibly due to how whitespace is handled around delimiters and between elements.\n\nLet's try a different approach to whitespace management within lists and vectors:\n\n1.  **Use `ws()` around the delimiters:** This handles whitespace immediately inside the parentheses/brackets, like `( item ... )` or `[ item ... ]`.\n2.  **Use `multispace1` as the separator in `separated_list0`:** This requires at least one whitespace character *between* elements (e.g., `item1 item2`), preventing elements from running together.\n3.  **Do *not* use `ws()` around the `parse_value_internal` inside `separated_list0`:** The whitespace is handled by the separator and the delimiter wrappers.\n\nApplying this logic:\n\n*   For lists `(item1 item2 ...)`: `delimited(ws(char('(')), separated_list0(multispace1, parse_value_internal), ws(char(')')))`\n*   For vectors `[item1 item2 ...]`: `delimited(ws(char('[')), separated_list0(multispace1, parse_value_internal), ws(char(']')))`\n\nThis structure ensures:\n*   Whitespace around the collection is handled (` ws( ` ` ) `).\n*   Whitespace between elements is mandatory (`multispace1`).\n*   Individual elements are parsed without extra whitespace wrappers.\n\nLet's modify the code accordingly.\n\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "cbac7754-f0c8-4b34-b3da-656200c0124c"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "d88c2c7c-2879-4cbd-87f4-713355f8203c"
        },
        {
          "kind": "undoStop",
          "id": "a9b5486e-e220-4716-9385-b0c6ecb91ebe"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // Use ws around delimiter\n            separated_list0(multispace1, parse_value_internal), // Use multispace1 separator, no ws on element\n            ws(char(')'))  // Use ws around delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // Use ws around delimiter\n            separated_list0(multispace1, parse_value_internal), // Use multispace1 separator, no ws on element\n            ws(char(']'))  // Use ws around delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // Use ws around delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace1, parse_value_internal), // Use multispace1 separator, no ws on element",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "            ws(char(')'))  // Use ws around delimiter",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // Use ws around delimiter",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace1, parse_value_internal), // Use multispace1 separator, no ws on element",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "            ws(char(']'))  // Use ws around delimiter",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, the previous attempts didn't resolve the issue. The test failure `left: Err(Error(Error { input: \"(1 true \\\\\\\"hello\\\\\\\")\", code: TakeWhileMN }))` still points towards a problem parsing elements within the list, possibly related to how whitespace is consumed between them or around them.\n\nLet's try another common `nom` pattern for lists/vectors:\n1.  Use `ws()` around the opening and closing delimiters (`(`, `)`, `[`, `]`). This handles whitespace *just inside* the delimiters.\n2.  Use `separated_list0` to parse the elements.\n3.  Use `multispace1` as the separator, requiring at least one space between elements.\n4.  Do *not* wrap the `parse_value_internal` element parser with `ws()` inside `separated_list0`, as the `multispace1` separator should handle the space *between* elements, and the `ws()` around the delimiters handles space at the start/end of the list content.\n\nI'll apply this change to `parse_list_internal` and `parse_vector_internal` and run the test again.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "a4a95711-3c49-4544-8434-302c8e9cb78c"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "329e3d56-2082-4aa0-b0d4-4da44a681b1c"
        },
        {
          "kind": "undoStop",
          "id": "39df18f9-b06a-4e44-add8-84b439c9e273"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // ws around opening delimiter\n            separated_list0(multispace1, parse_value_internal), // multispace1 separator, NO ws on element\n            ws(char(')'))  // ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // ws around opening delimiter\n            separated_list0(multispace1, parse_value_internal), // multispace1 separator, NO ws on element\n            ws(char(']'))  // ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace1, parse_value_internal), // multispace1 separator, NO ws on element",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 111
                }
              }
            ],
            [
              {
                "text": "            ws(char(')'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace1, parse_value_internal), // multispace1 separator, NO ws on element",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 111
                }
              }
            ],
            [
              {
                "text": "            ws(char(']'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, the previous attempts didn't resolve the issue. The test failure `left: Err(Error(Error { input: \"(1 true \\\\\\\"hello\\\\\\\")\", code: TakeWhileMN }))` still points to an unexpected attempt to parse something as a symbol (`TakeWhileMN` is used in `parse_symbol`).\n\nLet's analyze the parsing flow again with the current code:\n`delimited(ws(char('(')), separated_list0(multispace1, parse_value_internal), ws(char(')')))`\n\nInput: `(1 true \"hello\")`\n1.  `ws(char('('))` consumes `(`. Remaining: `1 true \"hello\")`\n2.  `separated_list0` starts:\n    *   Calls `parse_value_internal` on `1 true \"hello\")`. `parse_int` succeeds. Returns `(\" true \\\\\\\"hello\\\\\\\")\", Int(1))`.\n    *   Looks for separator `multispace1`. Finds space. Consumes it. Remaining: `true \\\\\\\"hello\\\\\\\")`.\n    *   Calls `parse_value_internal` on `true \\\\\\\"hello\\\\\\\")`. `parse_bool` succeeds. Returns `(\" \\\\\\\"hello\\\\\\\")\", Bool(true))`.\n    *   Looks for separator `multispace1`. Finds space. Consumes it. Remaining: `\\\\\\\"hello\\\\\\\")`.\n    *   Calls `parse_value_internal` on `\\\\\\\"hello\\\\\\\")`. `parse_string` succeeds. Returns `\")\", String(\"hello\"))`.\n    *   Looks for separator `multispace1`. Fails on `)`. `separated_list0` returns the collected list and remaining input `)`.\n3.  `ws(char(')'))` consumes `)`. Remaining: `\"\"`.\n4.  The final result should be `Ok((\"\", List(...)))`.\n\nThe logic seems sound, yet the error persists. The error code `TakeWhileMN` strongly suggests `parse_symbol` is being invoked incorrectly. This could happen if one of the preceding parsers in `alt` (like `parse_bool` or `parse_string`) fails unexpectedly, allowing the execution flow to reach `parse_symbol`.\n\nPerhaps the issue lies not in the list parser itself, but in how the sub-parsers consume input or handle whitespace *before* the list parser is even called, or how `parse_value_internal` interacts with the separator.\n\nLet's try simplifying the separator back to `multispace0` while keeping the `ws` around the delimiters. `multispace1` might be too strict if there's a case with no space between elements (though the test case has spaces).\n\n```rust\n// In parse_list_internal and parse_vector_internal\nseparated_list0(multispace0, parse_value_internal), // Use multispace0 separator\n```\n\nI'll apply this change and rerun the test.\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "2fbeebe0-9001-42c2-800d-ed1e149debfb"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "b9a0d9c6-0a3a-40db-81ca-c0beda390e8d"
        },
        {
          "kind": "undoStop",
          "id": "fdf8b86c-8a6c-4cdb-8a54-ae63c938d911"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // ws around opening delimiter\n            separated_list0(multispace0, parse_value_internal), // Use multispace0 separator\n            ws(char(')'))  // ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // ws around opening delimiter\n            separated_list0(multispace0, parse_value_internal), // Use multispace0 separator\n            ws(char(']'))  // ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_value_internal), // Use multispace0 separator",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 107
                }
              }
            ],
            [
              {
                "text": "            ws(char(')'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_value_internal), // Use multispace0 separator",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 107
                }
              }
            ],
            [
              {
                "text": "            ws(char(']'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is.err()); // Colon only",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, the test still failed with the same error: `TakeWhileMN` error when parsing `(1 true \"hello\")`. This error originates from the `parse_symbol` function, suggesting that the parser is incorrectly attempting to parse `true` (or potentially another element) as a symbol.\n\nThis usually happens in `alt` combinators when preceding parsers fail and it falls through to a later one. Given the structure `(1 true \"hello\")`, the parser should correctly identify `1` as an Int, `true` as a Bool, and `\"hello\"` as a String. The fact that it reaches `parse_symbol` for `true` implies that `parse_bool` might not be consuming the input as expected within the `separated_list0` context, or there's an issue with how whitespace is handled between elements.\n\nLet's try a common `nom` pattern for lists: wrap the delimiters and the *element parser* with `ws`, and use `multispace1` as the separator (since elements in a list like `(1 2)` must be separated by at least one space).\n\n```rust\n// In parse_list_internal\nmap(\n    delimited(\n        ws(char('(')), // ws around opening delimiter\n        separated_list0(\n            multispace1, // Use multispace1 as separator\n            ws(parse_value_internal) // ws around the element parser\n        ),\n        ws(char(')'))  // ws around closing delimiter\n    ),\n    Value::List,\n)(input)\n\n// In parse_vector_internal\nmap(\n    delimited(\n        ws(char('[')), // ws around opening delimiter\n        separated_list0(\n            multispace1, // Use multispace1 as separator\n            ws(parse_value_internal) // ws around the element parser\n        ),\n        ws(char(']'))  // ws around closing delimiter\n    ),\n    Value::Vector,\n)(input)\n```\n\nI will apply this change and run the test again.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "e3e27017-f20c-4f5d-aad3-1d201b969c02"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "69a6ee3a-4cd3-44de-9761-5411fc73c638"
        },
        {
          "kind": "undoStop",
          "id": "8503c29c-6e01-4efe-b2bf-ddbc629715c0"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // ws around opening delimiter\n            separated_list0(\n                multispace1, // Use multispace1 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(')'))  // ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // ws around opening delimiter\n            separated_list0(\n                multispace1, // Use multispace1 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(']'))  // ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                multispace1, // Use multispace1 as separator",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal) // ws around the element parser",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ws(char(')'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                multispace1, // Use multispace1 as separator",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal) // ws around the element parser",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            ws(char(']'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is.ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is.err()); // Colon only",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is.err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            _ => None,",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        }",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, the previous attempts involved adjusting whitespace handling (`ws`, `multispace0`, `multispace1`) in the list and vector parsers, but the test `parser::tests::test_parse_list` still fails with the same error: `TakeWhileMN` on the input `\"(1 true \\\\\"hello\\\\\")\"`.\n\nThis error suggests the parser is incorrectly trying to parse the number `1` as a symbol. Looking at the `parse_value_internal` function, the order of parsers in the `alt` combinator determines the matching priority.\n\n```rust\nfn parse_value_internal(input: &str) -> IResult<&str, Value> {\n    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value\n    alt((\n        parse_list_internal, // Use internal versions\n        parse_vector_internal,\n        parse_map_internal,\n        parse_nil,\n        parse_bool,\n        parse_float, // Float before Int is important\n        parse_int,\n        parse_string,\n        parse_keyword,\n        parse_symbol, // Symbol is last among atoms\n    ))(input)\n}\n```\n\nCurrently, `parse_symbol` is tried *after* numbers and other literals. The `TakeWhileMN` error likely comes from `parse_symbol` attempting `take_while_m_n(1, 1, is_symbol_start_char)` on the input `1`, which fails because '1' is not a valid symbol start character according to `is_symbol_start_char`.\n\nHowever, the error message `left: Err(Error(Error { input: \"(1 true \\\\\"hello\\\\\")\", code: TakeWhileMN }))` is confusing because the input shown is the *entire* list string, not just the part where the error occurred (which should be `\"1 true \\\\\"hello\\\\\")\"` after consuming the opening parenthesis). This might indicate an issue with how errors are propagated or reported by `nom`, or perhaps the whitespace handling around the elements is still not quite right.\n\nLet's re-examine the list/vector parsers and the `ws` usage. The last change was:\n\n```rust\n// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // ws around opening delimiter\n            separated_list0(\n                multispace1, // Use multispace1 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(')'))  // ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n// Similar for parse_vector_internal\n```\n\nThis structure means:\n1.  Consume optional whitespace before `(`.\n2.  Consume `(`.\n3.  Consume optional whitespace after `(`.\n4.  Parse zero or more elements separated by *one or more* whitespace characters (`multispace1`).\n5.  Each element parsing (`parse_value_internal`) is wrapped in `ws`, meaning it consumes surrounding whitespace *again*.\n6.  Consume optional whitespace before `)`.\n7.  Consume `)`.\n8.  Consume optional whitespace after `)`.\n\nThe double whitespace consumption (by `multispace1` separator *and* `ws(parse_value_internal)`) might be problematic. Let's try simplifying it: the separator should handle the space *between* elements, and the `delimited` handles space around the parentheses. The element parser itself shouldn't need `ws`.\n\nLet's revert to using `multispace1` as the separator but remove the `ws` wrapper from the element parser.\n\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "219dc7fa-0e2a-4484-9e92-e068bc71384e"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "49ea07eb-7a9b-4b05-9433-1af097224ed3"
        },
        {
          "kind": "undoStop",
          "id": "8a6d45be-c0e0-4d56-a98c-927fe71d9709"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // ws around opening delimiter\n            separated_list0(\n                multispace1, // Use multispace1 as separator\n                parse_value_internal // NO ws around the element parser\n            ),\n            ws(char(')'))  // ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // ws around opening delimiter\n            separated_list0(\n                multispace1, // Use multispace1 as separator\n                parse_value_internal // NO ws around the element parser\n            ),\n            ws(char(']'))  // ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace1, // Use multispace1 as separator",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal // NO ws around the element parser",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(')'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace1, // Use multispace1 as separator",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal // NO ws around the element parser",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(']'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is.ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is.err());",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is.err()); // Colon only",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is.err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, the previous attempts involved trying different combinations of whitespace handling (`ws`, `multispace0`, `multispace1`) in the list and vector parsers. The test failure consistently pointed to an error (`TakeWhileMN`) originating from the symbol or keyword parser, even though the input `(1 true \"hello\")` doesn't seem like it should trigger those parsers directly for the list elements.\n\nLet's carefully re-evaluate the standard `nom` approach for parsing separated lists with surrounding delimiters and whitespace:\n\n1.  **Delimiters:** Whitespace should be allowed *outside* the delimiters. The `ws()` combinator applied to the delimiter characters (`char('(')`, `char(')')`) handles this.\n2.  **Elements:** Each element itself might have surrounding whitespace that needs to be consumed *before* parsing the element's core value. The `ws()` combinator applied to the element parser (`parse_value_internal`) handles this.\n3.  **Separators:** The space *between* elements needs to be handled. `separated_list0` takes a separator parser. If we use `ws(parse_value_internal)` for elements, this already consumes whitespace *after* the element. Therefore, the separator between elements can be `multispace0` (allowing zero or more spaces), as any required space will likely be consumed by the trailing part of the preceding `ws(parse_value_internal)` or the leading part of the next `ws(parse_value_internal)`.\n\nThis leads back to the following implementation for the internal list/vector parsers:\n\n```rust\n// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // ws around opening delimiter\n            separated_list0(\n                multispace0, // Use multispace0 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(')'))  // ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // ws around opening delimiter\n            separated_list0(\n                multispace0, // Use multispace0 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(']'))  // ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n```\n\nThis structure seems logically sound based on how `nom` combinators typically work together. I will apply this specific configuration again and rerun the test. It's possible the previous failure with this exact code was due to some other transient issue or a mistake in applying the change.\n\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "413bcce2-6e5f-4523-ac60-42c0dce2863f"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "c45ce5f5-c908-4066-b594-4c3e218edaec"
        },
        {
          "kind": "undoStop",
          "id": "1bead7ce-2bcd-4ebf-aac5-9aa4885ce891"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // ws around opening delimiter\n            separated_list0(\n                multispace0, // Use multispace0 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(')'))  // ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // ws around opening delimiter\n            separated_list0(\n                multispace0, // Use multispace0 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(']'))  // ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace0, // Use multispace0 as separator",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal) // ws around the element parser",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(')'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace0, // Use multispace0 as separator",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal) // ws around the element parser",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(']'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is.ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is.err());",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is.err()); // Colon only",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is.err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, the test `parser::tests::test_parse_list` is still failing with the same error: `assertion `left == right` failed left: Err(Error(Error { input: \"(1 true \\\\\"hello\\\\\")\", code: TakeWhileMN })) right: Ok((\"\", List([Int(1), Bool(true), String(\"hello\")])))`.\n\nThis error, specifically the `TakeWhileMN` code, often relates to symbol parsing (`take_while_m_n(1, 1, is_symbol_start_char)`). It seems the parser is incorrectly attempting to parse an element within the list (likely `true`) as a symbol after failing to parse it as other types.\n\nThe previous attempts involved adjusting whitespace handling around delimiters and elements within `separated_list0`. The last change restored `ws(parse_value_internal)` inside `separated_list0` with `multispace0` as the separator.\n\nLet's reconsider the whitespace. The `ws()` combinator wraps a parser with `multispace0` on both sides.\nIn `separated_list0(multispace0, ws(parse_value_internal))`:\n1.  `multispace0` consumes whitespace *between* elements.\n2.  `ws(parse_value_internal)` consumes whitespace *around* each element.\n\nThis seems redundant and potentially problematic. The separator should handle the space *between* items. Let's try removing the `ws()` wrapper from the element parser *within* `separated_list0`, relying solely on the `multispace0` separator to handle the spacing. The `ws()` around the opening and closing delimiters (`(` and `)`) will handle whitespace just inside the parentheses.\n\nI will apply this change to both `parse_list_internal` and `parse_vector_internal`.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "98a34bc1-bd86-4f83-9695-54279d39c9c2"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "3e57de0c-05ad-4c95-a6f4-692e1e32817d"
        },
        {
          "kind": "undoStop",
          "id": "6479b997-699e-4734-ac21-38646c3233f7"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // Keep ws around opening delimiter\n            separated_list0(\n                multispace0,          // Separator handles space BETWEEN elements\n                parse_value_internal  // Element parser itself doesn't consume surrounding ws\n            ),\n            ws(char(')'))  // Keep ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // Keep ws around opening delimiter\n            separated_list0(\n                multispace0,          // Separator handles space BETWEEN elements\n                parse_value_internal  // Element parser itself doesn't consume surrounding ws\n            ),\n            ws(char(']'))  // Keep ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace0,          // Separator handles space BETWEEN elements",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal  // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(')'))  // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace0,          // Separator handles space BETWEEN elements",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal  // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(']'))  // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is.ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is.err());",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is.err()); // Missing colon",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is.err()); // Colon only",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is.err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_9f643711-cafb-4bbd-9a27-747dc9b8938c",
      "isCanceled": true,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editsAgent",
        "description": "Edit files in your workspace in agent mode",
        "when": "config.chat.agent.enabled && !chatAgentModeDisallowed",
        "metadata": {
          "themeIcon": {
            "id": "tools"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "welcomeMessageContent": {
            "icon": {
              "id": "copilot-large"
            },
            "title": "Edit with Copilot",
            "message": {
              "value": "Ask Copilot to edit your files in [agent mode](https://aka.ms/vscode-copilot-agent). Copilot will automatically use multiple requests to pick files to edit, run terminal commands, and iterate on errors.\n\nCopilot is powered by AI, so mistakes are possible. Review output carefully before use.",
              "supportThemeIcons": false,
              "supportHtml": false,
              "uris": {
                "https://aka.ms/vscode-copilot-agent": {
                  "$mid": 1,
                  "external": "https://aka.ms/vscode-copilot-agent",
                  "path": "/vscode-copilot-agent",
                  "scheme": "https",
                  "authority": "aka.ms"
                }
              }
            }
          }
        },
        "name": "agent",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "isToolsAgent": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\.github\\copilot-instructions.md",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "path": "/h:/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1745093561967
    },
    {
      "requestId": "request_7b1eaf32-ee71-4c10-b468-0ecd4bf52c8b",
      "message": {
        "text": "This test fails because management of nested lists in list is not done well... any idea?",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 88
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 89
            },
            "text": "This test fails because management of nested lists in list is not done well... any idea?",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": [
          {
            "id": "vscode.implicit.selection",
            "name": "file:parser.rs",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
                "_sep": 1,
                "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 539,
                "startColumn": 1,
                "endLineNumber": 540,
                "endColumn": 1,
                "selectionStartLineNumber": 539,
                "selectionStartColumn": 1,
                "positionLineNumber": 540,
                "positionColumn": 1
              }
            },
            "isFile": true,
            "modelDescription": "User's active selection"
          }
        ]
      },
      "response": [
        {
          "value": "**Analysis:**\n\nThe user reports that tests involving nested lists are failing, suggesting the parser doesn't handle structures like `(1 (2 3) 4)` correctly. The previous attempts focused on fixing a simpler test case `(1 true \"hello\")`, which consistently failed with a `TakeWhileMN` error, indicating an issue likely related to symbol parsing being triggered incorrectly, possibly due to whitespace mismanagement.\n\nThe core challenge in parsing lists (especially nested ones) with `nom` often lies in correctly defining how whitespace is consumed:\n1.  Around the delimiters (`(` and `)`).\n2.  Around each individual element within the list.\n3.  Between the elements.\n\n**Motivation:**\n\nA robust and common `nom` pattern for handling this involves:\n1.  Using the `ws` combinator around the opening and closing delimiters (`ws(char('('))`, `ws(char(')'))`) to handle whitespace immediately inside the parentheses.\n2.  Using the `ws` combinator around the element parser (`ws(parse_value_internal)`) within `separated_list0`. This ensures each element (including nested lists) is parsed correctly, regardless of surrounding whitespace.\n3.  Using `multispace0` as the separator in `separated_list0`. Since `ws(parse_value_internal)` consumes whitespace *after* the element it parses, `multispace0` correctly handles the (potentially zero) remaining whitespace before the next element's `ws()` takes over.\n\nThis approach ensures that whitespace is handled consistently at each level (delimiters, elements, separators) and should work correctly for both flat and nested lists. The previous failures with this pattern might have been due to subtle interaction issues or incorrect application, so we will re-apply it carefully.\n\n**Steps:**\n\n1.  Modify `parse_list_internal` and `parse_vector_internal` in `parser.rs`.\n2.  Ensure the `delimited` combinator uses `ws(char(...))` for both opening and closing delimiters.\n3.  Ensure the `separated_list0` combinator uses `multispace0` as the separator and `ws(parse_value_internal)` as the element parser.\n4.  Run the tests again to verify the fix.\n\nApplying the changes to `parser.rs`:\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "ba1630ce-092b-42eb-99b4-8b979c8edaaa"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "ad5de532-2c81-4bf8-9292-d832de60c6f2"
        },
        {
          "kind": "undoStop",
          "id": "06a8d046-f831-4367-9fb3-888e113ef975"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // ws around opening delimiter\n            separated_list0(\n                multispace0, // Use multispace0 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(')'))  // ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // ws around opening delimiter\n            separated_list0(\n                multispace0, // Use multispace0 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(']'))  // ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, multispace1, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace0, // Use multispace0 as separator",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal) // ws around the element parser",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(')'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace0, // Use multispace0 as separator",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal) // ws around the element parser",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(']'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('{'), // No ws wrapper",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "**Analysis:**\n\nYou're encountering a persistent failure in `test_parse_list`, specifically with the input `(1 true \"hello\")`, which results in `Err(Error(Error { input: \"(1 true \\\\\"hello\\\\\")\", code: TakeWhileMN }))`. This error is confusing because:\n1.  The `TakeWhileMN` error code typically originates from `parse_symbol` or `parse_keyword` when the input doesn't match the expected starting character pattern (e.g., trying to parse `1` as a symbol).\n2.  The `input` field in the error refers to the *entire original string*, not the substring where the parsing likely failed (e.g., `\"true \\\\\"hello\\\\\")\"`).\n3.  Manual tracing of the current parser logic (using `ws` around delimiters, `ws` around elements, and `multispace0` as the separator in `separated_list0`) suggests it *should* correctly parse both simple lists like `(1 true \"hello\")` and nested lists like `( 1 ( 2 3 ) nil )`. The recursive calls within `parse_value_internal` and the whitespace handling seem appropriate.\n\n**Motivation:**\n\nGiven that the list/vector parsing logic appears correct based on tracing, the misleading error might stem from an inconsistency elsewhere in the `alt` combinator within `parse_value_internal`. One such inconsistency is the whitespace handling for map delimiters (`{`, `}`). While maps aren't directly tested in `test_parse_list`, the `alt` combinator tries parsers in order. Ensuring consistent whitespace handling across *all* collection types might prevent subtle state issues or ambiguities within `nom`'s parsing process.\n\nTherefore, the next step is to make the map parser's whitespace handling consistent with lists and vectors by adding `ws()` around the `{` and `}` delimiters.\n\n**Steps:**\n\n1.  Modify `parse_map_internal` to wrap `char('{')` and `char('}')` with the `ws()` helper function.\n2.  Rerun the specific test `parser::tests::test_parse_list` to see if this resolves the error.\n\n```rust\n// In parse_map_internal\nfn parse_map_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('{')), // ADD ws wrapper\n            separated_list0(multispace0, parse_map_entry_internal),\n            ws(char('}'))  // ADD ws wrapper\n        ),\n        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),\n    )(input)\n}\n\n// No changes needed in parse_map_entry_internal as it already uses ws()\n// fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> { ... }\n```\n\nI will now apply this change and rerun the test.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "0de4e445-91e6-4a58-9579-c292ef400130"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "c5311c5a-5b69-4327-978b-4fb37c2dc0a0"
        },
        {
          "kind": "undoStop",
          "id": "3b6d12f0-a721-4f67-94c3-9c6e94b732be"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws\nfn parse_map_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('{')), // ADD ws wrapper\n            separated_list0(multispace0, parse_map_entry_internal),\n            ws(char('}'))  // ADD ws wrapper\n        ),\n        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, multispace1, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace0,              // Use multispace0 as separator",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal), // ws around the element parser",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(')')), // ws around closing delimiter",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace0,              // Use multispace0 as separator",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal), // ws around the element parser",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(']')), // ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('{')), // ADD ws wrapper",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            ws(char('}'))  // ADD ws wrapper",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "**Analysis:**\n\n1.  **Problem:** The `test_parse_list` fails, specifically on inputs like `(1 true \"hello\")` and the nested list `( 1 ( 2 3 ) nil )`. The error message `Err(Error(Error { input: \"(1 true \\\\\\\"hello\\\\\\\")\", code: TakeWhileMN }))` indicates that the parser is unexpectedly trying (and failing) to parse an element (likely `true` or even `1`) as a symbol, suggesting that the preceding parsers in the `alt` combinator (like `parse_int`, `parse_bool`, `parse_string`) are not matching correctly within the list context.\n2.  **Current Code:** The list/vector parsers currently use `ws` around the delimiters (`(` and `)`), `ws` around the element parser (`parse_value_internal`), and `multispace0` as the separator in `separated_list0`.\n3.  **Recursive Parsing:** Parsing nested lists like `( 1 ( 2 3 ) nil )` involves recursive calls to `parse_value_internal` and subsequently `parse_list_internal`. The whitespace handling needs to be correct at each level.\n4.  **Whitespace Interaction:** The combination `separated_list0(multispace0, ws(parse_value_internal))` means:\n    *   `multispace0` consumes zero or more spaces *between* the end of one element's `ws` wrapper and the start of the next element's `ws` wrapper.\n    *   `ws(parse_value_internal)` consumes whitespace *around* each element.\n    This seems potentially redundant but is a common pattern. The trace performed mentally suggests it *should* work for nested lists.\n5.  **Hypothesis:** Given the persistent failure and the `TakeWhileMN` error code, the issue might stem from how `ws` interacts with the `tag` parsers (like `tag(\"true\")` in `parse_bool`) or the numeric parsers within the `separated_list0` context. Perhaps the combination of `multispace0` and `ws` around the element parser leads to incorrect input slicing or state, causing `alt` to fall through unexpectedly to `parse_symbol`.\n\n**Motivation:**\n\nSince the current whitespace pattern (`multispace0` separator + `ws` around element) isn't working despite seeming logically sound, let's try enforcing at least one whitespace character between elements. This is often the case in Lisp-like languages. We will keep the `ws` wrappers around the delimiters and the element parser, but change the separator to `multispace1`.\n\n**Steps:**\n\n1.  Modify `parse_list_internal` to use `multispace1` as the separator in `separated_list0`.\n2.  Modify `parse_vector_internal` to use `multispace1` as the separator in `separated_list0`.\n3.  Keep the `ws(parse_value_internal)` for the element parser in both functions.\n4.  Keep the `ws` wrappers around the delimiters `(`, `)`, `[`, `]`.\n5.  Run the tests again, focusing on `test_parse_list`.\n\nApplying the change to `parser.rs`:\n*   Update `parse_list_internal`.\n*   Update `parse_vector_internal`.\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "1f9ae2a6-ffd2-4007-8106-23f2d88de18d"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "237dc11f-fdf3-495b-9d43-adc6bcc3b20c"
        },
        {
          "kind": "undoStop",
          "id": "34a23296-bb34-461f-aa77-9afaee4dc2bf"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // ws around opening delimiter\n            separated_list0(\n                multispace1, // Use multispace1 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(')'))  // ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // ws around opening delimiter\n            separated_list0(\n                multispace1, // Use multispace1 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(']'))  // ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, multispace1, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace1, // Use multispace1 as separator",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal) // ws around the element parser",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(')'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace1, // Use multispace1 as separator",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal) // ws around the element parser",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(']'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('{')), // ADD ws wrapper",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            ws(char('}')), // ADD ws wrapper",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, let's analyze the situation with nested lists and the current parser implementation.\n\n**Analysis:**\n\n1.  **Current Parser Logic (List/Vector):**\n    ```rust\n    delimited(\n        ws(char('(')), // Consumes ws around '('\n        separated_list0(\n            multispace1, // Requires 1+ space BETWEEN elements\n            ws(parse_value_internal) // Consumes ws AROUND each element\n        ),\n        ws(char(')'))  // Consumes ws around ')'\n    )\n    ```\n2.  **Input Causing Failure (Likely):** `( 1 ( 2 3 ) nil )`\n3.  **Problem:** The combination of `multispace1` as a separator and `ws(parse_value_internal)` for elements can be problematic.\n    *   Consider the space between `1` and `(`. The `ws(parse_value_internal)` parsing `1` consumes the space *after* `1`. Then, `multispace1` looks for *another* space before parsing the next element `(`. This works.\n    *   Consider the space between `)` and `nil` inside the inner list `( 2 3 )`. The `ws(parse_value_internal)` parsing `3` consumes the space *after* `3`. Then `multispace1` looks for a separator before the closing `)`. It finds the space before `)`. This seems okay.\n    *   Consider the space between the inner list `( 2 3 )` and `nil` in the outer list. The `ws(parse_value_internal)` parsing the inner list `( 2 3 )` will consume the space *after* its closing `)`. Then, the outer `separated_list0`'s `multispace1` looks for *at least one* space before parsing `nil`. This should also work.\n\n    However, the interaction can be subtle. The `ws` combinator uses `multispace0` internally. Having `multispace1` as the explicit separator while also having `ws` (which uses `multispace0`) around the elements might lead to unexpected behavior or backtracking failures in `nom`, especially if whitespace is minimal or inconsistent. The persistent `TakeWhileMN` error, although seemingly unrelated, might be a symptom of `alt` falling through incorrectly after `parse_list_internal` fails due to these whitespace interactions.\n\n**Motivation:**\n\nA more standard and often less problematic pattern in `nom` for this scenario is:\n*   Use `ws` around the delimiters (`(`, `)`).\n*   Use `ws` around the element parser (`parse_value_internal`).\n*   Use `multispace0` as the separator. This allows zero or more spaces between elements. The `ws` around the elements effectively ensures that *at least* the necessary whitespace is consumed either before the next element or after the previous one.\n\n**Steps:**\n\n1.  Modify `parse_list_internal` and `parse_vector_internal`.\n2.  Change the separator argument in `separated_list0` from `multispace1` back to `multispace0`.\n3.  Ensure `ws()` wrappers remain around the delimiters and the element parser (`parse_value_internal`).\n4.  Run the tests again.\n\nApplying the change:\n*   In `parse_list_internal`, change `multispace1` to `multispace0`.\n*   In `parse_vector_internal`, change `multispace1` to `multispace0`.\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "76df0015-8fa6-40ca-9309-0fdefeb582b5"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "c0d9915f-30c8-4c9d-9001-3e500487fee8"
        },
        {
          "kind": "undoStop",
          "id": "84769ec5-1862-41ff-870f-4559de1cdb30"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // ws around opening delimiter\n            separated_list0(\n                multispace0, // Use multispace0 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(')'))  // ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // ws around opening delimiter\n            separated_list0(\n                multispace0, // Use multispace0 as separator\n                ws(parse_value_internal) // ws around the element parser\n            ),\n            ws(char(']'))  // ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, multispace1, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple},",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace0, // Use multispace0 as separator",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal) // ws around the element parser",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(')'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                multispace0, // Use multispace0 as separator",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                ws(parse_value_internal) // ws around the element parser",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ws(char(']'))  // ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        pair(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Add ws back",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('{')), // ADD ws wrapper",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            separated_list0(multispace0, parse_map_entry_internal),",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            ws(char('}')), // ADD ws wrapper",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 103
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ] \"),",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_e6a36e49-efae-4c0c-a3f7-f292647c7765",
      "isCanceled": true,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editsAgent",
        "description": "Edit files in your workspace in agent mode",
        "when": "config.chat.agent.enabled && !chatAgentModeDisallowed",
        "metadata": {
          "themeIcon": {
            "id": "tools"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "welcomeMessageContent": {
            "icon": {
              "id": "copilot-large"
            },
            "title": "Edit with Copilot",
            "message": {
              "value": "Ask Copilot to edit your files in [agent mode](https://aka.ms/vscode-copilot-agent). Copilot will automatically use multiple requests to pick files to edit, run terminal commands, and iterate on errors.\n\nCopilot is powered by AI, so mistakes are possible. Review output carefully before use.",
              "supportThemeIcons": false,
              "supportHtml": false,
              "uris": {
                "https://aka.ms/vscode-copilot-agent": {
                  "$mid": 1,
                  "external": "https://aka.ms/vscode-copilot-agent",
                  "path": "/vscode-copilot-agent",
                  "scheme": "https",
                  "authority": "aka.ms"
                }
              }
            }
          }
        },
        "name": "agent",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "isToolsAgent": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\.github\\copilot-instructions.md",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "path": "/h:/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1745095037111
    },
    {
      "requestId": "request_2b3a2827-77f0-4c89-8ac4-3547d32916ad",
      "message": {
        "text": "map entry is a pair yes but there is a separator between elements, right? it can't be concatenated without sep, am I right?",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 123
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 124
            },
            "text": "map entry is a pair yes but there is a separator between elements, right? it can't be concatenated without sep, am I right?",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": [
          {
            "id": "vscode.implicit.selection",
            "name": "file:parser.rs",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
                "_sep": 1,
                "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 260,
                "startColumn": 1,
                "endLineNumber": 268,
                "endColumn": 1,
                "selectionStartLineNumber": 268,
                "selectionStartColumn": 1,
                "positionLineNumber": 260,
                "positionColumn": 1
              }
            },
            "isFile": true,
            "modelDescription": "User's active selection"
          }
        ]
      },
      "response": [
        {
          "value": "**Analysis:**\n\nYou are absolutely right to question the parsing of map entries. Let's look at the current code:\n\n*   `parse_map_internal`: Uses `separated_list0(multispace0, parse_map_entry_internal)`. This correctly handles separating the `key value` *pairs* from each other using optional whitespace (`multispace0`).\n*   `parse_map_entry_internal`: Uses `pair(ws(parse_value_internal), ws(parse_value_internal))`. This is where the potential issue lies. The `pair` combinator expects the second parser (`ws(parse_value_internal)` for the value) to match immediately after the first parser (`ws(parse_value_internal)` for the key) finishes. While the `ws` wrappers handle whitespace *around* the key and *around* the value, `pair` itself doesn't enforce any separation *between* the key and the value.\n\nThis means an input like `{:key1}` could potentially (and incorrectly) be parsed as key `:key` and value `1` if `parse_symbol` matched `:key` and `parse_int` matched `1` immediately after. A map entry like `:key 1` requires a separator (whitespace) between the key and the value.\n\n**Motivation:**\n\nTo enforce a separator between the key and the value within a map entry, we should replace the `pair` combinator with `separated_pair`. The `separated_pair(first, sep, second)` combinator ensures that the `sep` parser successfully runs between the `first` and `second` parsers.\n\nThe appropriate separator between a map key and its value is typically one or more whitespace characters, which corresponds to the `multispace1` combinator in `nom`.\n\n**Steps:**\n\n1.  Modify the `parse_map_entry_internal` function.\n2.  Replace `pair(...)` with `separated_pair(...)`.\n3.  Use `ws(parse_value_internal)` for the key parser (first argument).\n4.  Use `multispace1` for the separator parser (second argument).\n5.  Use `ws(parse_value_internal)` for the value parser (third argument).\n6.  Apply the change to `parser.rs`.\n\nApplying the change:\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "19cc0850-00aa-4357-a038-9be0031b6ce3"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "fa99efec-f5b1-41fc-a5ef-6c02ff57a643"
        },
        {
          "kind": "undoStop",
          "id": "e95ededb-3fc9-4eb6-bd38-c786bd56a955"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "use nom::{\n    // ... existing imports ...\n    sequence::{delimited, pair, preceded, tuple, separated_pair}, // Added separated_pair\n    // ... rest of imports ...\n};\n// ... existing code ...\n\n// Parser for Map Entries: key value - WITHOUT outer ws\nfn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {\n    map_res(\n        separated_pair( // Changed from pair to separated_pair\n            ws(parse_value_internal), // Key parser\n            multispace1,              // Separator: Must have 1+ space between key and value\n            ws(parse_value_internal)  // Value parser\n        ),\n        |(k, v)| {\n            k.into_map_key()\n                .ok_or(\"Invalid map key type\")\n                .map(|map_key| (map_key, v))\n        },\n    )(input)\n}\n\n// ... rest of the file ...\n\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, multispace1, none_of},",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, tuple, separated_pair}, // Added separated_pair",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(multispace0, inner, multispace0)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                multispace1,          // Separator handles space BETWEEN elements",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            )),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            char(')'), // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                multispace1,          // Separator handles space BETWEEN elements",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            )),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            char(']'), // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        separated_pair( // Changed from pair to separated_pair",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal), // Key parser",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "            multispace1,              // Separator: Must have 1+ space between key and value",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            ws(parse_value_internal)  // Value parser",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "            ws(char('{')), // No ws wrapper",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(multispace1, parse_map_entry_internal)),",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 111
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_list_internal(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ]\"),",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_vector_internal(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        match self {",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            _ => None,",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        }",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 761,
                  "startColumn": 1,
                  "endLineNumber": 761,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "You are absolutely right!\n\nA map entry consists of a key and a value, and in typical S-expression or EDN-like syntaxes (which this parser seems inspired by), there *must* be a separator (usually whitespace) between the key and the value. They cannot be directly concatenated.\n\nFor example, `{ :key value }` is valid, but `{ :keyvalue }` would likely be parsed as a single map with one entry where `:keyvalue` is the key and the parser would then look for its corresponding value.\n\nThe previous implementation of `parse_map_entry_internal` might have implicitly relied on the `ws` wrappers around the key and value parsers to consume the space, but it didn't explicitly *require* a separator.\n\nI have just updated the `parse_map_entry_internal` function to use the `separated_pair` combinator from `nom`. This combinator explicitly requires a separator between the two elements it parses. I've used `multispace1` as the separator, meaning at least one whitespace character is now mandatory between the map key and its value. This makes the parsing more robust and aligns with the expected syntax.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        }
      ],
      "responseId": "response_b2e5b777-a9c9-49bd-92e4-9c693e9b5d8f",
      "result": {
        "timings": {
          "firstProgress": 16101,
          "totalElapsed": 42082
        },
        "metadata": {
          "edits": {
            "workingSet": [],
            "promptInstructions": [],
            "request": "Above is the result of calling one or more tools. The user can see the results of the insert_edit_into_file tool, so you don't need to explain them. But the user can't see the results of other tools, so you should explain them to the user if referencing them in your answer. Continue from where you left off if needed without repeating yourself.",
            "response": "You are absolutely right!\n\nA map entry consists of a key and a value, and in typical S-expression or EDN-like syntaxes (which this parser seems inspired by), there *must* be a separator (usually whitespace) between the key and the value. They cannot be directly concatenated.\n\nFor example, `{ :key value }` is valid, but `{ :keyvalue }` would likely be parsed as a single map with one entry where `:keyvalue` is the key and the parser would then look for its corresponding value.\n\nThe previous implementation of `parse_map_entry_internal` might have implicitly relied on the `ws` wrappers around the key and value parsers to consume the space, but it didn't explicitly *require* a separator.\n\nI have just updated the `parse_map_entry_internal` function to use the `separated_pair` combinator from `nom`. This combinator explicitly requires a separator between the two elements it parses. I've used `multispace1` as the separator, meaning at least one whitespace character is now mandatory between the map key and its value. This makes the parsing more robust and aligns with the expected syntax."
          },
          "codeBlocks": [],
          "messages": [
            {
              "role": "user",
              "content": "map entry is a pair yes but there is a separator between elements, right? it can't be concatenated without sep, am I right?"
            },
            {
              "role": "assistant",
              "content": "You are absolutely right!\n\nA map entry consists of a key and a value, and in typical S-expression or EDN-like syntaxes (which this parser seems inspired by), there *must* be a separator (usually whitespace) between the key and the value. They cannot be directly concatenated.\n\nFor example, `{ :key value }` is valid, but `{ :keyvalue }` would likely be parsed as a single map with one entry where `:keyvalue` is the key and the parser would then look for its corresponding value.\n\nThe previous implementation of `parse_map_entry_internal` might have implicitly relied on the `ws` wrappers around the key and value parsers to consume the space, but it didn't explicitly *require* a separator.\n\nI have just updated the `parse_map_entry_internal` function to use the `separated_pair` combinator from `nom`. This combinator explicitly requires a separator between the two elements it parses. I've used `multispace1` as the separator, meaning at least one whitespace character is now mandatory between the map key and its value. This makes the parsing more robust and aligns with the expected syntax."
            }
          ],
          "toolCallRounds": [
            {
              "toolCalls": [
                {
                  "name": "insert_edit_into_file",
                  "arguments": "{\"code\":\"use nom::{\\n    // ... existing imports ...\\n    sequence::{delimited, pair, preceded, tuple, separated_pair}, // Added separated_pair\\n    // ... rest of imports ...\\n};\\n// ... existing code ...\\n\\n// Parser for Map Entries: key value - WITHOUT outer ws\\nfn parse_map_entry_internal(input: \\u0026str) -\\u003e IResult\\u003c\\u0026str, (MapKey, Value)\\u003e {\\n    map_res(\\n        separated_pair( // Changed from pair to separated_pair\\n            ws(parse_value_internal), // Key parser\\n            multispace1,              // Separator: Must have 1+ space between key and value\\n            ws(parse_value_internal)  // Value parser\\n        ),\\n        |(k, v)| {\\n            k.into_map_key()\\n                .ok_or(\\\"Invalid map key type\\\")\\n                .map(|map_key| (map_key, v))\\n        },\\n    )(input)\\n}\\n\\n// ... rest of the file ...\\n\",\"explanation\":\"Refactor parse_map_entry_internal to use separated_pair instead of pair, enforcing at least one whitespace character (multispace1) between the map key and value.\",\"filePath\":\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\"}",
                  "id": "call_MHxkTkVhYVpSMXY0U2c3SXhVYTA__vscode-1745091772384"
                }
              ],
              "toolInputRetry": 0,
              "response": "**Analysis:**\n\nYou are absolutely right to question the parsing of map entries. Let's look at the current code:\n\n*   `parse_map_internal`: Uses `separated_list0(multispace0, parse_map_entry_internal)`. This correctly handles separating the `key value` *pairs* from each other using optional whitespace (`multispace0`).\n*   `parse_map_entry_internal`: Uses `pair(ws(parse_value_internal), ws(parse_value_internal))`. This is where the potential issue lies. The `pair` combinator expects the second parser (`ws(parse_value_internal)` for the value) to match immediately after the first parser (`ws(parse_value_internal)` for the key) finishes. While the `ws` wrappers handle whitespace *around* the key and *around* the value, `pair` itself doesn't enforce any separation *between* the key and the value.\n\nThis means an input like `{:key1}` could potentially (and incorrectly) be parsed as key `:key` and value `1` if `parse_symbol` matched `:key` and `parse_int` matched `1` immediately after. A map entry like `:key 1` requires a separator (whitespace) between the key and the value.\n\n**Motivation:**\n\nTo enforce a separator between the key and the value within a map entry, we should replace the `pair` combinator with `separated_pair`. The `separated_pair(first, sep, second)` combinator ensures that the `sep` parser successfully runs between the `first` and `second` parsers.\n\nThe appropriate separator between a map key and its value is typically one or more whitespace characters, which corresponds to the `multispace1` combinator in `nom`.\n\n**Steps:**\n\n1.  Modify the `parse_map_entry_internal` function.\n2.  Replace `pair(...)` with `separated_pair(...)`.\n3.  Use `ws(parse_value_internal)` for the key parser (first argument).\n4.  Use `multispace1` for the separator parser (second argument).\n5.  Use `ws(parse_value_internal)` for the value parser (third argument).\n6.  Apply the change to `parser.rs`.\n\nApplying the change:\n"
            },
            {
              "toolCalls": [],
              "toolInputRetry": 0,
              "response": "You are absolutely right!\n\nA map entry consists of a key and a value, and in typical S-expression or EDN-like syntaxes (which this parser seems inspired by), there *must* be a separator (usually whitespace) between the key and the value. They cannot be directly concatenated.\n\nFor example, `{ :key value }` is valid, but `{ :keyvalue }` would likely be parsed as a single map with one entry where `:keyvalue` is the key and the parser would then look for its corresponding value.\n\nThe previous implementation of `parse_map_entry_internal` might have implicitly relied on the `ws` wrappers around the key and value parsers to consume the space, but it didn't explicitly *require* a separator.\n\nI have just updated the `parse_map_entry_internal` function to use the `separated_pair` combinator from `nom`. This combinator explicitly requires a separator between the two elements it parses. I've used `multispace1` as the separator, meaning at least one whitespace character is now mandatory between the map key and its value. This makes the parsing more robust and aligns with the expected syntax."
            }
          ],
          "toolCallResults": {
            "call_MHxkTkVhYVpSMXY0U2c3SXhVYTA__vscode-1745091772384": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 22,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "<file_after_edit path=\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\">\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "This is the new state of the file after the edit. Base future edits off of this file, no need to read it again, unless a terminal command may have changed it.",
                                  "lineBreakBefore": false
                                },
                                {
                                  "type": 1,
                                  "ctor": 2,
                                  "children": [
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "```rust\nuse nom::{\r\n    branch::alt,\r\n    // Removed is_not\r\n    bytes::complete::{tag, take_while, take_while1, take_while_m_n},\r\n    character::complete::{char, multispace0, multispace1, none_of},\r\n    combinator::{map, map_res, opt, recognize, value},\r\n    error::ParseError,\r\n    multi::{many0, separated_list0},\r\n    sequence::{delimited, pair, preceded, tuple, separated_pair}, // Added separated_pair\r\n    IResult,\r\n};\r\nuse num_bigint::BigInt;\r\nuse std::collections::HashMap;\r\nuse std::str::FromStr;\r\n\r\nuse crate::ast::{Expr, MapKey, Value}; // Added MapKey\r\n\r\n// Helper function to consume whitespace\r\nfn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>\r\nwhere\r\n    F: FnMut(&'a str) -> IResult<&'a str, O, E>,\r\n{\r\n    delimited(multispace0, inner, multispace0)\r\n}\r\n\r\n// Parser for Nil\r\nfn parse_nil(input: &str) -> IResult<&str, Value> {\r\n    map(tag(\"nil\"), |_| Value::Nil)(input)\r\n}\r\n\r\n// Parser for Booleans\r\nfn parse_bool(input: &str) -> IResult<&str, Value> {\r\n    alt((\r\n        value(Value::Bool(true), tag(\"true\")),\r\n        value(Value::Bool(false), tag(\"false\")),\r\n    ))(input)\r\n}\r\n\r\n// Parser for Integers (Ensure it doesn't parse floats)\r\nfn parse_int(input: &str) -> IResult<&str, Value> {\r\n    // Use recognize first to capture the potential integer part\r\n    let (remaining, recognized) =\r\n        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;\r\n\r\n    // Check the character immediately after the recognized part in the original input\r\n    match remaining.chars().next() {\r\n        // If the next char indicates a float, fail parsing the integer\r\n        Some('.') | Some('e') | Some('E') => {\r\n            Err(nom::Err::Error(nom::error::Error::new(\r\n                input,\r\n                nom::error::ErrorKind::Verify,\r\n            ))) // Indicate verification failure\r\n        }\r\n        // Otherwise, proceed to convert the recognized part to BigInt\r\n        _ => {\r\n            match BigInt::from_str(recognized) {\r\n                Ok(val) => Ok((remaining, Value::Int(val))),\r\n                Err(_) => Err(nom::Err::Error(nom::error::Error::new(\r\n                    recognized,\r\n                    nom::error::ErrorKind::MapRes,\r\n                ))), // Error during BigInt conversion\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Parser for Floats (recognizes the pattern first)\r\n// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan\r\n// *** Must contain '.' or 'e'/'E' to distinguish from integers ***\r\n\r\n// Helper parser for standard float patterns (excluding inf/nan)\r\nfn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {\r\n    recognize(pair(\r\n        opt(alt((char('+'), char('-')))), // Optional sign\r\n        alt((\r\n            // Case 1: Digits + '.' + Optional Digits + Optional Exponent\r\n            recognize(tuple((\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                char('.'),\r\n                take_while(|c: char| c.is_digit(10)), // Optional digits after dot\r\n                opt(tuple((\r\n                    // Optional exponent\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                ))),\r\n            ))),\r\n            // Case 2: '.' + Digits + Optional Exponent\r\n            recognize(tuple((\r\n                char('.'),\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                opt(tuple((\r\n                    // Optional exponent\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                ))),\r\n            ))),\r\n            // Case 3: Digits + Exponent (No decimal point)\r\n            recognize(tuple((\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                // Exponent MUST be present here\r\n                tuple((\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                )),\r\n            ))),\r\n        )),\r\n    ))(input)\r\n}\r\n\r\nfn parse_float(input: &str) -> IResult<&str, Value> {\r\n    map_res(\r\n        alt((\r\n            // Handle inf, -inf, nan first as they are distinct patterns\r\n            tag(\"inf\"),\r\n            tag(\"-inf\"),\r\n            tag(\"+inf\"),\r\n            tag(\"nan\"),\r\n            // Use the helper for standard float patterns\r\n            parse_standard_float_pattern,\r\n        )),\r\n        |s: &str| {\r\n            // Same mapping logic as before\r\n            match s {\r\n                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),\r\n                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),\r\n                \"nan\" => Ok(Value::Float(f64::NAN)),\r\n                _ => s.parse::<f64>().map(Value::Float),\r\n            }\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Helper for parsing a single escaped character\r\nfn parse_escape_sequence(input: &str) -> IResult<&str, char> {\r\n    preceded(\r\n        char('\\\\'),\r\n        alt((\r\n            value('\\\\', tag(\"\\\\\")),\r\n            value('\\\"', tag(\"\\\"\")),\r\n            value('\\n', tag(\"n\")),\r\n            value('\\r', tag(\"r\")),\r\n            value('\\t', tag(\"t\")),\r\n            // TODO: Add more escapes like unicode? \\u{...}\r\n        )),\r\n    )(input)\r\n}\r\n\r\n// Helper for parsing a single non-escape, non-quote character\r\nfn parse_normal_char(input: &str) -> IResult<&str, char> {\r\n    none_of(\"\\\\\\\"\")(input)\r\n}\r\n\r\n// Parser for string content (handles escapes)\r\nfn parse_string_content(input: &str) -> IResult<&str, String> {\r\n    map(\r\n        many0(alt((parse_escape_sequence, parse_normal_char))),\r\n        |chars: Vec<char>| chars.into_iter().collect(),\r\n    )(input)\r\n}\r\n\r\n// Parser for Strings using the manual content parser\r\nfn parse_string(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            char('\"'),\r\n            parse_string_content, // Use the new content parser\r\n            char('\"'),\r\n        ),\r\n        Value::String,\r\n    )(input)\r\n}\r\n\r\n// Parser for Symbols / Keywords\r\n// Must not be nil, true, false, or a number.\r\n// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.\r\n// Continues with non-quote, non-paren/bracket/brace, non-whitespace.\r\nfn is_symbol_start_char(c: char) -> bool {\r\n    // Exclude digits from starting characters\r\n    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)\r\n}\r\n\r\nfn is_symbol_char(c: char) -> bool {\r\n    // Allow digits inside, but not at the start (handled by is_symbol_start_char)\r\n    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)\r\n}\r\n\r\nfn parse_symbol(input: &str) -> IResult<&str, Value> {\r\n    map_res(\r\n        recognize(tuple((\r\n            take_while_m_n(1, 1, is_symbol_start_char),\r\n            take_while(is_symbol_char),\r\n        ))),\r\n        |s: &str| {\r\n            // Check if it's a reserved keyword or number pattern that failed other parsers\r\n            match s {\r\n                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool\r\n                _ => {\r\n                    // Basic check to prevent parsing numbers as symbols\r\n                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')\r\n                        && s.parse::<f64>().is_ok()\r\n                    {\r\n                        Err(\"Numeric literal used as symbol\")\r\n                    } else {\r\n                        Ok(Value::Symbol(s.to_string()))\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Parser for Keywords (e.g., :my-keyword)\r\nfn parse_keyword(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        preceded(\r\n            char(':'),\r\n            // Use the updated symbol character rules\r\n            recognize(tuple((\r\n                take_while_m_n(1, 1, is_symbol_start_char),\r\n                take_while(is_symbol_char),\r\n            ))),\r\n        ),\r\n        |s: &str| Value::Keyword(s.to_string()),\r\n    )(input)\r\n}\r\n\r\n// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\r\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('(')), // Keep ws around opening delimiter\r\n            ws(separated_list0(\r\n                multispace1,          // Separator handles space BETWEEN elements\r\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\r\n            )),\r\n            char(')'), // Keep ws around closing delimiter\r\n        ),\r\n        Value::List,\r\n    )(input)\r\n}\r\n\r\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\r\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('[')), // Keep ws around opening delimiter\r\n            ws(separated_list0(\r\n                multispace1,          // Separator handles space BETWEEN elements\r\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\r\n            )),\r\n            char(']'), // Keep ws around closing delimiter\r\n        ),\r\n        Value::Vector,\r\n    )(input)\r\n}\r\n\r\n// Parser for Map Entries: key value - WITHOUT outer ws\r\nfn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {\r\n    map_res(\r\n        separated_pair( // Changed from pair to separated_pair\r\n            ws(parse_value_internal), // Key parser\r\n            multispace1,              // Separator: Must have 1+ space between key and value\r\n            ws(parse_value_internal)  // Value parser\r\n        ),\r\n        |(k, v)| {\r\n            k.into_map_key()\r\n                .ok_or(\"Invalid map key type\")\r\n                .map(|map_key| (map_key, v))\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws\r\nfn parse_map_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('{')), // No ws wrapper\r\n            ws(separated_list0(multispace1, parse_map_entry_internal)),\r\n            char('}'), // No ws wrapper\r\n        ),\r\n        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),\r\n    )(input)\r\n}\r\n\r\n// Define the actual recursive parser function\r\nfn parse_value_internal(input: &str) -> IResult<&str, Value> {\r\n    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value\r\n    alt((\r\n        parse_list_internal, // Use internal versions\r\n        parse_vector_internal,\r\n        parse_map_internal,\r\n        parse_nil,\r\n        parse_bool,\r\n        parse_float,\r\n        parse_int,\r\n        parse_string,\r\n        parse_keyword,\r\n        parse_symbol,\r\n    ))(input)\r\n}\r\n\r\n// Top-level parser for a single value/expression, handles outer whitespace\r\npub fn parse_value(input: &str) -> IResult<&str, Value> {\r\n    ws(parse_value_internal)(input) // Add ws wrapper here at the top level\r\n}\r\n\r\n// Top-level parser (for now, just parses a single value into an Expr)\r\npub fn parse_expr(input: &str) -> IResult<&str, Expr> {\r\n    // Use the top-level parse_value which handles outer whitespace\r\n    map(parse_value, Expr::Literal)(input)\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use num_bigint::ToBigInt;\r\n    use std::collections::HashMap;\r\n\r\n    // Helper for float comparison, especially NaNs\r\n    fn assert_float_eq(v1: &Value, v2: &Value) {\r\n        match (v1, v2) {\r\n            (Value::Float(f1), Value::Float(f2)) => {\r\n                if f1.is_nan() && f2.is_nan() {\r\n                    // NaNs are equal in this context\r\n                } else {\r\n                    assert_eq!(f1, f2);\r\n                }\r\n            }\r\n            _ => panic!(\"Expected two Float values\"),\r\n        }\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_nil() {\r\n        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));\r\n        assert!(parse_nil(\"Nil\").is_err());\r\n        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_bool() {\r\n        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));\r\n        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));\r\n        assert!(parse_bool(\"True\").is_err());\r\n        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_int() {\r\n        assert_eq!(\r\n            parse_int(\"123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(\r\n            parse_int(\"-45\"),\r\n            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));\r\n        // Still consumes only digits, leaving trailing chars\r\n        assert_eq!(\r\n            parse_int(\"123a\"),\r\n            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert!(parse_int(\"abc\").is_err());\r\n        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent\r\n                                              // These assertions should now pass\r\n        assert!(parse_int(\"1.2\").is_err());\r\n        assert!(parse_int(\"1e5\").is_err());\r\n        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_float() {\r\n        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));\r\n        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));\r\n        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot\r\n        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot\r\n        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent\r\n        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent\r\n        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));\r\n        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));\r\n        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));\r\n        assert_float_eq(\r\n            &parse_float(\"-inf\").unwrap().1,\r\n            &Value::Float(f64::NEG_INFINITY),\r\n        );\r\n        assert_float_eq(\r\n            &parse_float(\"+inf\").unwrap().1,\r\n            &Value::Float(f64::INFINITY),\r\n        );\r\n        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));\r\n        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"\r\n        assert!(parse_float(\".\").is_err());\r\n        assert!(parse_float(\"e5\").is_err());\r\n        // Ensure it doesn't consume integers meant for parse_int\r\n        assert!(parse_float(\"123\").is_err()); // No dot or exponent\r\n        assert!(parse_float(\"-45\").is_err()); // No dot or exponent\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_string() {\r\n        // This should finally pass\r\n        assert_eq!(\r\n            parse_string(r#\"\"\"\"#),\r\n            Ok((\"\", Value::String(\"\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"hello\"\"#),\r\n            Ok((\"\", Value::String(\"hello\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"hello world\"\"#),\r\n            Ok((\"\", Value::String(\"hello world\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),\r\n            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))\r\n        );\r\n        assert!(parse_string(r#\"\"unterminated\"#).is_err());\r\n        assert!(parse_string(r#\"no quotes\"#).is_err());\r\n        // This should still fail as '\\e' is not a valid escape sequence here\r\n        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_symbol() {\r\n        assert_eq!(\r\n            parse_symbol(\"abc\"),\r\n            Ok((\"\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"a-b_c?\"),\r\n            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))\r\n        );\r\n        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));\r\n        assert_eq!(\r\n            parse_symbol(\"set!\"),\r\n            Ok((\"\", Value::Symbol(\"set!\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"valid.symbol#1\"),\r\n            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"a1\"),\r\n            Ok((\"\", Value::Symbol(\"a1\".to_string())))\r\n        );\r\n\r\n        // Should not parse keywords or numbers\r\n        assert!(parse_symbol(\"nil\").is_err());\r\n        assert!(parse_symbol(\"true\").is_err());\r\n        assert!(parse_symbol(\"false\").is_err());\r\n        assert!(parse_symbol(\"123\").is_err());\r\n        assert!(parse_symbol(\"-45\").is_err());\r\n        assert!(parse_symbol(\"1.23\").is_err());\r\n        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword\r\n\r\n        // Test partial consumption\r\n        assert_eq!(\r\n            parse_symbol(\"abc def\"),\r\n            Ok((\" def\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"abc)\"),\r\n            Ok((\")\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n\r\n        // Invalid start characters\r\n        assert!(parse_symbol(\".dotstart\").is_err());\r\n        assert!(parse_symbol(\"#hashstart\").is_err());\r\n        assert!(parse_symbol(\":colonstart\").is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_keyword() {\r\n        assert_eq!(\r\n            parse_keyword(\":abc\"),\r\n            Ok((\"\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":a-b_c?\"),\r\n            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":+\"),\r\n            Ok((\"\", Value::Keyword(\"+\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":set!\"),\r\n            Ok((\"\", Value::Keyword(\"set!\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":valid.keyword#1\"),\r\n            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":a1\"), // Digit allowed inside\r\n            Ok((\"\", Value::Keyword(\"a1\".to_string())))\r\n        );\r\n\r\n        // Invalid keywords\r\n        assert!(parse_keyword(\"abc\").is_err()); // Missing colon\r\n        assert!(parse_keyword(\":\").is_err()); // Colon only\r\n                                              // This assertion should now pass\r\n        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon\r\n        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon\r\n\r\n        // Test partial consumption\r\n        assert_eq!(\r\n            parse_keyword(\":abc def\"),\r\n            Ok((\" def\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":abc)\"),\r\n            Ok((\")\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_list() {\r\n        // Use the public parse_value or parse_list_internal directly?\r\n        // Tests should ideally use the public interface if possible.\r\n        // Let's test parse_value with list input.\r\n        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));\r\n        assert_eq!(\r\n            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Bool(true),\r\n                    Value::String(\"hello\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value\r\n            Ok((\r\n                \"\", // parse_value consumes all surrounding whitespace\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::List(vec![\r\n                        Value::Int(2.to_bigint().unwrap()),\r\n                        Value::Int(3.to_bigint().unwrap()),\r\n                    ]),\r\n                    Value::Nil,\r\n                ])\r\n            ))\r\n        );\r\n        assert!(parse_value(\"(1 2\").is_err()); // Unclosed\r\n        assert!(parse_list_internal(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_vector() {\r\n        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));\r\n        assert_eq!(\r\n            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Bool(true),\r\n                    Value::String(\"hello\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"[ 1 [ 2 3 ] nil ]\"),\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Vector(vec![\r\n                        Value::Int(2.to_bigint().unwrap()),\r\n                        Value::Int(3.to_bigint().unwrap()),\r\n                    ]),\r\n                    Value::Nil,\r\n                ])\r\n            ))\r\n        );\r\n        assert!(parse_value(\"[1 2\").is_err()); // Unclosed\r\n        assert!(parse_vector_internal(\"(1 2)\").is_err()); // Wrong brackets\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_map() {\r\n        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));\r\n\r\n        let mut expected_map1 = HashMap::new();\r\n        expected_map1.insert(\r\n            MapKey::Keyword(\"a\".to_string()),\r\n            Value::Int(1.to_bigint().unwrap()),\r\n        );\r\n        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));\r\n\r\n        assert_eq!(\r\n            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value\r\n            Ok((\"\", Value::Map(expected_map1)))\r\n        );\r\n\r\n        let mut expected_map2 = HashMap::new();\r\n        let mut inner_map = HashMap::new();\r\n        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);\r\n        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));\r\n\r\n        assert_eq!(\r\n            parse_value(\"{ outer { 10 nil } }\"),\r\n            Ok((\"\", Value::Map(expected_map2)))\r\n        );\r\n\r\n        // Test invalid key type\r\n        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key\r\n        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key\r\n\r\n        // Test uneven number of elements\r\n        assert!(parse_value(\"{ :a 1 :b }\").is_err());\r\n        assert!(parse_value(\"{ :a }\").is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_value_literals() {\r\n        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));\r\n        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));\r\n        assert_eq!(\r\n            parse_value(\"\\t -99 \\n\"),\r\n            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))\r\n        );\r\n        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));\r\n        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));\r\n        assert_eq!(\r\n            parse_value(r#\" \"hello \\n world\" \"#),\r\n            Ok((\"\", Value::String(\"hello \\n world\".to_string())))\r\n        );\r\n        // Test order sensitivity\r\n        assert_eq!(\r\n            parse_value(\"123\"), // Should be Int\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float\r\n        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float\r\n        assert_eq!(\r\n            parse_value(\"  my-symbol  \"),\r\n            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\" :a-keyword? \"),\r\n            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))\r\n        );\r\n\r\n        // Test order sensitivity again\r\n        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol\r\n        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol\r\n        assert_eq!(\r\n            parse_value(\"123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        ); // Not a symbol\r\n        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_value_collections() {\r\n        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));\r\n        // This assertion should now pass as parse_float won't consume \"1\"\r\n        assert_eq!(\r\n            parse_value(\" [ 1 ] \"),\r\n            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))\r\n        );\r\n        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));\r\n        assert_eq!(\r\n            parse_value(\"( [ :a ] { } ) \"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),\r\n                    Value::Map(HashMap::new()),\r\n                ])\r\n            ))\r\n        );\r\n        // Add a test with floats inside collections\r\n        // Using helper method to extract value for comparison\r\n        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;\r\n        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_expr_literal() {\r\n        assert_eq!(\r\n            parse_expr(\" 12345 \"),\r\n            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" false\"),\r\n            Ok((\"\", Expr::Literal(Value::Bool(false))))\r\n        );\r\n        // Using if let to handle the result and avoid unreachable pattern warning\r\n        let parse_result = parse_expr(\" -inf \");\r\n        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");\r\n        if let Ok((_, parsed_expr)) = parse_result {\r\n            let expected_value = Value::Float(f64::NEG_INFINITY);\r\n            match parsed_expr {\r\n                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),\r\n                // This branch might be unreachable if parse_expr only returns Expr::Literal\r\n                #[allow(unreachable_patterns)]\r\n                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),\r\n            }\r\n        }\r\n        assert_eq!(\r\n            parse_expr(r#\" \"string\" \"#),\r\n            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" some_symbol \"),\r\n            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" :keyword123 \"),\r\n            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" (1 2) \"),\r\n            Ok((\r\n                \"\",\r\n                Expr::Literal(Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap())\r\n                ]))\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" [ :a ] \"),\r\n            Ok((\r\n                \"\",\r\n                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))\r\n            ))\r\n        );\r\n        let mut expected_map = HashMap::new();\r\n        expected_map.insert(\r\n            MapKey::String(\"key\".to_string()),\r\n            Value::Int(100.to_bigint().unwrap()),\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" { \\\"key\\\" 100 } \"),\r\n            Ok((\"\", Expr::Literal(Value::Map(expected_map))))\r\n        );\r\n    }\r\n}\r\n\r\n// Helper method added to Value for testing convenience (optional)\r\nimpl Value {\r\n    fn get_vector(&self) -> Option<&Vec<Value>> {\r\n        match self {\r\n            Value::Vector(v) => Some(v),\r\n            _ => None,\r\n        }\r\n    }\r\n}\n```",
                                          "references": [],
                                          "lineBreakBefore": true
                                        }
                                      ],
                                      "references": []
                                    }
                                  ],
                                  "references": []
                                },
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "priority": 1,
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "</file_after_edit>",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 2,
                              "priority": 9007199254740991,
                              "text": "\n",
                              "lineBreakBefore": false
                            }
                          ],
                          "references": []
                        }
                      ],
                      "references": []
                    }
                  }
                }
              ]
            }
          },
          "modelMessageId": "902de9b0-c073-49fc-97a3-b867c9073cd7",
          "responseId": "eb3da725-24dc-41c7-858d-1a91817b96ee",
          "sessionId": "fd77c6d2-0f54-4d70-bef8-16911a33ae6a",
          "agentId": "github.copilot.editsAgent"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editsAgent",
        "description": "Edit files in your workspace in agent mode",
        "when": "config.chat.agent.enabled && !chatAgentModeDisallowed",
        "metadata": {
          "themeIcon": {
            "id": "tools"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "welcomeMessageContent": {
            "icon": {
              "id": "copilot-large"
            },
            "title": "Edit with Copilot",
            "message": {
              "value": "Ask Copilot to edit your files in [agent mode](https://aka.ms/vscode-copilot-agent). Copilot will automatically use multiple requests to pick files to edit, run terminal commands, and iterate on errors.\n\nCopilot is powered by AI, so mistakes are possible. Review output carefully before use.",
              "supportThemeIcons": false,
              "supportHtml": false,
              "uris": {
                "https://aka.ms/vscode-copilot-agent": {
                  "$mid": 1,
                  "external": "https://aka.ms/vscode-copilot-agent",
                  "path": "/vscode-copilot-agent",
                  "scheme": "https",
                  "authority": "aka.ms"
                }
              }
            }
          }
        },
        "name": "agent",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "isToolsAgent": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\.github\\copilot-instructions.md",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "path": "/h:/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1745097548014
    }
  ]
}