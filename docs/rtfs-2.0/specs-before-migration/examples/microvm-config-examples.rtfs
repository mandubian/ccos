;; MicroVM Configuration Examples
;; This file demonstrates various MicroVM provider configurations for different use cases

;; =============================================================================
;; 1. Development/Testing Configuration (Mock Provider)
;; =============================================================================

(def microvm-dev-config
  {:provider "mock"
   :timeout "60s"
   :memory_limit_mb 1024
   :cpu_limit 1.0
   :network_policy {:type "AllowList" 
                    :hosts ["localhost" "127.0.0.1"]}
   :fs_policy {:type "ReadOnly"}
   :env_vars {"DEBUG" "true"
              "LOG_LEVEL" "debug"}})

;; Example usage in development
(defn run-dev-test [program]
  (call :microvm.execute 
        {:program program
         :config microvm-dev-config}))

;; =============================================================================
;; 2. Production Security Configuration (Firecracker Provider)
;; =============================================================================

(def microvm-prod-secure-config
  {:provider "firecracker"
   :timeout "300s"
   :memory_limit_mb 2048
   :cpu_limit 1.0
   :network_policy {:type "AllowList"
                    :hosts ["api.github.com" 
                           "api.openai.com"
                           "registry.npmjs.org"]}
   :fs_policy {:type "ReadOnly"}
   :env_vars {"NODE_ENV" "production"
              "SECURITY_LEVEL" "high"}})

;; Example usage for untrusted code execution
(defn execute-untrusted-code [source-code]
  (call :microvm.execute
        {:program {:type "RtfsSource" :content source-code}
         :config microvm-prod-secure-config}))

;; =============================================================================
;; 3. Container Environment Configuration (gVisor Provider)
;; =============================================================================

(def microvm-container-config
  {:provider "gvisor"
   :timeout "180s"
   :memory_limit_mb 1536
   :cpu_limit 0.8
   :network_policy {:type "AllowList"
                    :hosts ["api.docker.io"
                           "registry-1.docker.io"]}
   :fs_policy {:type "ReadWrite"
               :allowed_paths ["/tmp" "/var/tmp"]}
   :env_vars {"CONTAINER_ID" "gvisor-123"
              "RUNTIME" "gvisor"}})

;; Example usage for container operations
(defn run-container-task [task-script]
  (call :microvm.execute
        {:program {:type "ExternalProgram"
                   :path "/bin/bash"
                   :args ["-c" task-script]}
         :config microvm-container-config}))

;; =============================================================================
;; 4. Cross-Platform Configuration (WASM Provider)
;; =============================================================================

(def microvm-wasm-config
  {:provider "wasm"
   :timeout "120s"
   :memory_limit_mb 512
   :cpu_limit 0.5
   :network_policy {:type "Denied"}
   :fs_policy {:type "None"}
   :env_vars {"WASM_RUNTIME" "wasmtime"
              "PLATFORM" "cross-platform"}})

;; Example usage for cross-platform code
(defn run-cross-platform-code [wasm-module]
  (call :microvm.execute
        {:program {:type "RtfsSource" :content wasm-module}
         :config microvm-wasm-config}))

;; =============================================================================
;; 5. Process Isolation Configuration (Process Provider)
;; =============================================================================

(def microvm-process-config
  {:provider "process"
   :timeout "90s"
   :memory_limit_mb 1024
   :cpu_limit 0.6
   :network_policy {:type "AllowList"
                    :hosts ["localhost" "api.local"]}
   :fs_policy {:type "ReadOnly"}
   :env_vars {"PROCESS_ID" "isolated-456"
              "ISOLATION_LEVEL" "process"}})

;; Example usage for external program execution
(defn run-external-program [program-path args]
  (call :microvm.execute
        {:program {:type "ExternalProgram"
                   :path program-path
                   :args args}
         :config microvm-process-config}))

;; =============================================================================
;; 6. High-Performance Configuration (Optimized for Speed)
;; =============================================================================

(def microvm-perf-config
  {:provider "process"  ; Use process provider for best performance
   :timeout "600s"
   :memory_limit_mb 4096
   :cpu_limit 2.0
   :network_policy {:type "Full"}
   :fs_policy {:type "ReadWrite"}
   :env_vars {"PERFORMANCE_MODE" "high"
              "CACHE_ENABLED" "true"}})

;; Example usage for performance-critical operations
(defn run-performance-task [task]
  (call :microvm.execute
        {:program {:type "RtfsSource" :content task}
         :config microvm-perf-config}))

;; =============================================================================
;; 7. Minimal Security Configuration (Minimal Isolation)
;; =============================================================================

(def microvm-minimal-config
  {:provider "mock"  ; Minimal isolation for trusted code
   :timeout "30s"
   :memory_limit_mb 256
   :cpu_limit 0.25
   :network_policy {:type "Denied"}
   :fs_policy {:type "None"}
   :env_vars {"SECURITY_LEVEL" "minimal"}})

;; Example usage for trusted code execution
(defn run-trusted-code [code]
  (call :microvm.execute
        {:program {:type "RtfsSource" :content code}
         :config microvm-minimal-config}))

;; =============================================================================
;; 8. Network-Intensive Configuration (API-heavy workloads)
;; =============================================================================

(def microvm-network-config
  {:provider "gvisor"  ; Good balance for network operations
   :timeout "240s"
   :memory_limit_mb 2048
   :cpu_limit 1.0
   :network_policy {:type "AllowList"
                    :hosts ["api.github.com"
                           "api.openai.com"
                           "api.anthropic.com"
                           "api.cohere.ai"
                           "api.together.ai"]}
   :fs_policy {:type "ReadOnly"}
   :env_vars {"NETWORK_TIMEOUT" "30s"
              "MAX_CONNECTIONS" "100"}})

;; Example usage for API-heavy workloads
(defn run-api-workload [api-script]
  (call :microvm.execute
        {:program {:type "RtfsSource" :content api-script}
         :config microvm-network-config}))

;; =============================================================================
;; 9. File Processing Configuration (I/O-heavy workloads)
;; =============================================================================

(def microvm-file-config
  {:provider "process"  ; Good for file I/O operations
   :timeout "300s"
   :memory_limit_mb 3072
   :cpu_limit 1.0
   :network_policy {:type "Denied"}
   :fs_policy {:type "ReadWrite"
               :allowed_paths ["/tmp" "/var/tmp" "/data"]}
   :env_vars {"FILE_BUFFER_SIZE" "8192"
              "MAX_FILE_SIZE" "100MB"}})

;; Example usage for file processing
(defn process-files [file-script]
  (call :microvm.execute
        {:program {:type "RtfsSource" :content file-script}
         :config microvm-file-config}))

;; =============================================================================
;; 10. Machine Learning Configuration (Compute-intensive workloads)
;; =============================================================================

(def microvm-ml-config
  {:provider "firecracker"  ; Strongest isolation for ML workloads
   :timeout "1800s"  ; 30 minutes
   :memory_limit_mb 8192  ; 8GB
   :cpu_limit 4.0  ; 4 CPU cores
   :network_policy {:type "AllowList"
                    :hosts ["api.openai.com"
                           "api.anthropic.com"
                           "huggingface.co"]}
   :fs_policy {:type "ReadWrite"
               :allowed_paths ["/tmp" "/models" "/data"]}
   :env_vars {"CUDA_VISIBLE_DEVICES" "0"
              "OMP_NUM_THREADS" "4"
              "ML_FRAMEWORK" "pytorch"}})

;; Example usage for ML workloads
(defn run-ml-task [ml-script]
  (call :microvm.execute
        {:program {:type "RtfsSource" :content ml-script}
         :config microvm-ml-config}))

;; =============================================================================
;; Configuration Selection Helper Functions
;; =============================================================================

(defn select-config [use-case]
  (match use-case
    "development" microvm-dev-config
    "production" microvm-prod-secure-config
    "container" microvm-container-config
    "cross-platform" microvm-wasm-config
    "process" microvm-process-config
    "performance" microvm-perf-config
    "minimal" microvm-minimal-config
    "network" microvm-network-config
    "file-processing" microvm-file-config
    "machine-learning" microvm-ml-config
    _ microvm-dev-config))  ; Default to development config

(defn execute-with-use-case [program use-case]
  (let [config (select-config use-case)]
    (call :microvm.execute
          {:program {:type "RtfsSource" :content program}
           :config config})))

;; =============================================================================
;; Example Usage Scenarios
;; =============================================================================

;; Example 1: Development testing
(execute-with-use-case 
  "(println \"Hello from development environment\")"
  "development")

;; Example 2: Production security
(execute-with-use-case
  "(call :ccos.math.add {:a 10 :b 20})"
  "production")

;; Example 3: Network API calls
(execute-with-use-case
  "(call :ccos.network.http-fetch {:url \"https://api.github.com/users/octocat\"})"
  "network")

;; Example 4: File processing
(execute-with-use-case
  "(call :ccos.file.read {:path \"/tmp/data.txt\"})"
  "file-processing")

;; Example 5: Machine learning
(execute-with-use-case
  "(call :ccos.ml.inference {:model \"gpt-3.5-turbo\" :input \"Hello, world!\"})"
  "machine-learning") 