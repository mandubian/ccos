;; Capability: Get 5 Day Weather Forecast
;; Generated from API introspection
;; Base URL: https://api.openweathermap.org
;; Endpoint: GET /data/2.5/forecast

(capability "openweather_api.get_forecast"
  :name "Get 5 Day Weather Forecast"
  :version "2.5"
  :description "5 day weather forecast with data every 3 hours"
  :provider "OpenWeather API"
  :source_url "https://api.openweathermap.org"
  :discovery_method "api_introspection"
  :created_at "2025-10-23T20:01:33.396153193+00:00"
  :capability_type "specialized_http_api"
  :permissions [:network.http]
  :effects [:network_request :auth_required]
  :input-schema {
    :q :string ;; optional
    :lat :float ;; optional
    :lon :float ;; optional
    :cnt :int ;; optional
  }
  :output-schema {
    :cnt :int
    :list [:vector :map]
    :city {
    :name :string
  }
  }
  :implementation
    (fn [input]
  ;; Runtime-controlled implementation - validation and controls handled by runtime
  ;; Input: 5 day weather forecast with data every 3 hours
  ;; Output: validated by runtime against output_schema
  (do
    (call "ccos.io.println" (str "[DEBUG] Calling openweather_api.get_forecast with input: " (call "ccos.data.serialize-json" input)))
    (let [base_url "https://api.openweathermap.org"
          path "/data/2.5/forecast"
          method "GET"
          ;; Build URL
          full_url (str base_url path)
          ;; Build query string from input map (input is a map of parameters)
          query_string (if (map? input)
                        (let [params (keys input)]
                          (reduce (fn [acc k]
                                    (let [v (get input k)
                                          k_str (str k)
                                          ;; Remove leading ':' from keyword if present
                                          param_name (if (starts-with? k_str ":")
                                                       (substring k_str 1)
                                                       k_str)]
                                      (if (and v (not= v ""))
                                        (str acc 
                                             (if (= acc "") "?" "&")
                                             param_name "=" (str v))
                                        acc)))
                                  ""
                                  params))
                        "")
          url_with_params (str full_url query_string)
          ;; Add API key from environment (OpenWeather requires 'appid' parameter)
          api_key (call "ccos.system.get-env" "OPENWEATHERMAP_ORG_API_KEY")
          final_url (if (and api_key (not= api_key ""))
                      (str url_with_params 
                           (if (= query_string "") "?" "&")
                           "appid=" api_key)
                      url_with_params)
          headers {}]
      (do
        (call "ccos.io.println" (str "[DEBUG] Final URL (with key): " final_url))
        (call "ccos.network.http-fetch"
              :method method
              :url final_url
              :headers headers
              :body (if (= method "POST") (call "ccos.data.serialize-json" input) nil))))))
)
