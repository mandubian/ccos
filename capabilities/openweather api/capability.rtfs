;; Capability metadata for openweather api API
;; Generated from web discovery
;; Capability metadata for openweather api API
;; Generated from web discovery
;; Source URL: https://openweathermap.org/api

(capability "openweather api"
  :name "openweather api API"
  :version "1.0.0"
  :description "HTTP API discovered from https://openweathermap.org/api"
  :source_url "https://openweathermap.org/api"
  :discovery_method "web_search"
  :created_at "2025-10-19T13:11:41.946761085+00:00"
  :capability_type "generic_http_api"
  :permissions [:network.http]
  :effects [:network_request]
  :input-schema :any
  :output-schema :any
  :implementation
    (do
      ;; binding input convention: the host passes a single value as 'input'
      ;; input may be a string endpoint, a list of keyword pairs, or a map
      (defn ensure_url [base maybe]
        (if (or (starts-with? maybe "http://") (starts-with? maybe "https://"))
          maybe
          (if (starts-with? maybe "/")
            (str base maybe)
            (str base "/" maybe))))

      (defn normalize_to_map [in]
        (if (string? in)
          {:method "GET" :url in}
          (if (list? in)
            ;; if in length is 1, it can't be converted to hash-map
            (if (= (length in) 1)
              {:method "GET" :url (first in)}
              (apply hash-map in))
            (if (map? in)
              in
              {:method "GET" :url (str in)}))))

      (defn has_query? [url]
        (> (count (split url "?")) 1))

      (defn append_query [url param value]
        (if (has_query? url)
          (str url "&" param "=" value)
          (str url "?" param "=" value)))

      (defn ensure_parameter [url param value]
        (if (or (not value) (= value ""))
          url
          (let [string_value (str value)
                marker (str param "=")]
            (if (> (count (split url marker)) 1)
              url
              (append_query url param string_value)))))
      (call "ccos.io.println" (str "[openweather-api DEBUG] input: " input))

    (let [base "https://api.openweathermap.org"
          req (normalize_to_map input)
          method (or (get req :method) "GET")
          url_part (or (get req :url) "")
          ;; ensure URL is absolute
          final_url (ensure_url base url_part)
          ;; Headers default to empty map to avoid odd-arity map errors
          headers_raw (get req :headers)
          headers (if (map? headers_raw) headers_raw {})
          body (get req :body)
          ;; Retrieve API key from environment and append as `appid` if present
          api_key (call "ccos.system.get-env" "OPENWEATHERMAP_ORG_API_KEY")]

      (call "ccos.io.println" (str "[openweather-api DEBUG] req: " req))

      ;; If api_key is a string and not empty, append as query param
      (let [final_url_with_key (if (and api_key (not (= api_key "")))
                                 (ensure_parameter final_url "appid" api_key)
                                 final_url)
            ;; Execute the HTTP fetch via host capability using keyword args
            resp (call "ccos.network.http-fetch"
                       :method method
                       :url final_url_with_key
                       :headers headers
                       :body body)]

        (call "ccos.io.println" (str "[openweather-api DEBUG] resp: " resp))
        resp
      )
    )
    )
)
