;; MCP Capability: push_files
;; Generated from MCP tool introspection
;; MCP Server: github (https://api.githubcopilot.com/mcp/)
;; Tool: push_files

(capability "mcp.github.push_files"
  :name "push_files"
  :version "1.0.0"
  :description "Push multiple files to a GitHub repository in a single commit"
  :provider "MCP"
  :source_url "https://api.githubcopilot.com/mcp/"
  :discovery_method "mcp_introspection"
  :created_at "2025-10-23T20:57:22.380185657+00:00"
  :capability_type "mcp_tool"
  :permissions [:network.http]
  :effects [:network_request :mcp_call]
  :mcp_metadata {
    :server_url "https://api.githubcopilot.com/mcp/"
    :server_name "github"
    :tool_name "push_files"
    :protocol_version "2024-11-05"
  }
  :input-schema {
    :branch :string
    :files [:vector {
    :content :string
    :path :string
  }]
    :message :string
    :owner :string
    :repo :string
  }
  :output-schema :any
  :implementation
    (fn [input]
  ;; MCP Tool: Push multiple files to a GitHub repository in a single commit
  ;; Runtime validates input against input_schema and output_schema
  ;; Makes standard MCP JSON-RPC call to tools/call endpoint
  ;; 
  ;; Configuration:
  ;;   - MCP_SERVER_URL: Override server URL (default from metadata)
  ;;   - MCP_AUTH_TOKEN: Optional auth token for MCP server
  ;;
  ;; Session management is handled by the runtime based on capability metadata.
  (let [default_url "https://api.githubcopilot.com/mcp/"
        env_url (call "ccos.system.get-env" "MCP_SERVER_URL")
        mcp_url (if env_url env_url default_url)
        ;; Optional: get auth token from input or env
        auth_token (or (get input :auth-token)
                       (call "ccos.system.get-env" "MCP_AUTH_TOKEN"))
        ;; Build MCP JSON-RPC request
        mcp_request {:jsonrpc "2.0"
                      :id "mcp_call"
                      :method "tools/call"
                      :params {:name "push_files"
                               :arguments input}}
        ;; Build headers with optional auth
        headers (if auth_token
                  {:content-type "application/json"
                    :authorization (str "Bearer " auth_token)}
                  {:content-type "application/json"})]
    ;; Make HTTP POST to MCP server
    (let [response (call "ccos.network.http-fetch"
                        :method "POST"
                        :url mcp_url
                        :headers headers
                        :body (call "ccos.data.serialize-json" mcp_request))]
      ;; Parse response and extract result
      (if (get response :body)
        (let [response_json (call "ccos.data.parse-json" (get response :body))
              result (get response_json :result)]
          ;; Return MCP tool result (runtime validates against output_schema)
          result)
        ;; Return error if no response body
        {:error "No response from MCP server" :url mcp_url}))))
)
