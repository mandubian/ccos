;; MCP Capability: request_copilot_review
;; Generated from MCP tool introspection
;; MCP Server: github (https://api.githubcopilot.com/mcp/)
;; Tool: request_copilot_review

(capability "mcp.github.request_copilot_review"
  :name "request_copilot_review"
  :version "1.0.0"
  :description "Request a GitHub Copilot code review for a pull request. Use this for automated feedback on pull requests, usually before requesting a human reviewer."
  :provider "MCP"
  :source_url "https://api.githubcopilot.com/mcp/"
  :discovery_method "mcp_introspection"
  :created_at "2025-10-23T20:00:10.547332398+00:00"
  :capability_type "mcp_tool"
  :permissions [:network.http]
  :effects [:network_request :mcp_call]
  :mcp_metadata {
    :server_url "https://api.githubcopilot.com/mcp/"
    :server_name "github"
    :tool_name "request_copilot_review"
    :protocol_version "2024-11-05"
  }
  :input-schema {
    :owner :string
    :pullNumber :float
    :repo :string
  }
  :output-schema :any
  :implementation
    (fn [input]
  ;; MCP Tool: Request a GitHub Copilot code review for a pull request. Use this for automated feedback on pull requests, usually before requesting a human reviewer.
  ;; Runtime validates input against input_schema
  ;; Makes MCP JSON-RPC call and validates result against output_schema
  (let [mcp_request {:jsonrpc "2.0"
                      :id "mcp_call"
                      :method "tools/call"
                      :params {:name "request_copilot_review"
                               :arguments input}}
        mcp_url "https://api.githubcopilot.com/mcp/"
        ;; Make HTTP POST to MCP server
        response (call "ccos.network.http-fetch"
                      :method "POST"
                      :url mcp_url
                      :headers {:content-type "application/json"}
                      :body (call "ccos.data.serialize-json" mcp_request))
        ;; Parse MCP JSON-RPC response
        response_json (call "ccos.data.parse-json" (get response :body))
        ;; Extract result (MCP wraps actual result in 'result' field)
        result (get response_json :result)]
    ;; Return the MCP tool result (runtime validates against output_schema)
    result))
)
