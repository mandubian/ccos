;; MCP Capability: remove_sub_issue
;; Generated from MCP tool introspection
;; MCP Server: github (https://api.githubcopilot.com/mcp/)
;; Tool: remove_sub_issue

(capability "mcp.github.remove_sub_issue"
  :name "remove_sub_issue"
  :version "1.0.0"
  :description "Remove a sub-issue from a parent issue in a GitHub repository."
  :provider "MCP"
  :permissions [:network.http]
  :effects [:network_request :mcp_call]
  :metadata {
    :mcp {
      :server_url "https://api.githubcopilot.com/mcp/"
      :server_name "github"
      :tool_name "remove_sub_issue"
      :protocol_version "2024-11-05"
      :requires_session "auto"
      :auth_env_var "MCP_AUTH_TOKEN"
      :server_url_override_env "MCP_SERVER_URL"
    }
    :discovery {
      :method "mcp_introspection"
      :source_url "https://api.githubcopilot.com/mcp/"
      :created_at "2025-10-24T09:02:22.097959431+00:00"
      :capability_type "mcp_tool"
    }
  }
  :input-schema {
    :issue_number :float
    :owner :string
    :repo :string
    :sub_issue_id :float
  }
  :output-schema :any
  :implementation
    (fn [input]
  ;; MCP Tool: Remove a sub-issue from a parent issue in a GitHub repository.
  ;; Runtime validates input against input_schema and output_schema
  ;; Makes standard MCP JSON-RPC call to tools/call endpoint
  ;; 
  ;; Configuration:
  ;;   - MCP_SERVER_URL: Override server URL (default from metadata)
  ;;   - MCP_AUTH_TOKEN: Optional auth token for MCP server
  ;;
  ;; Session management is handled by the runtime based on capability metadata.
  (let [default_url "https://api.githubcopilot.com/mcp/"
        env_url (call "ccos.system.get-env" "MCP_SERVER_URL")
        mcp_url (if env_url env_url default_url)
        ;; Optional: get auth token from input or env
        auth_token (or (get input :auth-token)
                       (call "ccos.system.get-env" "MCP_AUTH_TOKEN"))
        ;; Build MCP JSON-RPC request
        mcp_request {:jsonrpc "2.0"
                      :id "mcp_call"
                      :method "tools/call"
                      :params {:name "remove_sub_issue"
                               :arguments input}}
        ;; Build headers with optional auth
        headers (if auth_token
                  {:content-type "application/json"
                    :authorization (str "Bearer " auth_token)}
                  {:content-type "application/json"})]
    ;; Make HTTP POST to MCP server
    (let [response (call "ccos.network.http-fetch"
                        :method "POST"
                        :url mcp_url
                        :headers headers
                        :body (call "ccos.data.serialize-json" mcp_request))]
      ;; Parse response and extract result
      (if (get response :body)
        (let [response_json (call "ccos.data.parse-json" (get response :body))
              result (get response_json :result)]
          ;; Return MCP tool result (runtime validates against output_schema)
          result)
        ;; Return error if no response body
        {:error "No response from MCP server" :url mcp_url}))))
)
