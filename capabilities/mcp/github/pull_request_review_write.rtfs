;; MCP Capability: pull_request_review_write
;; Generated from MCP tool introspection
;; MCP Server: github (https://api.githubcopilot.com/mcp/)
;; Tool: pull_request_review_write

(capability "mcp.github.pull_request_review_write"
  :name "pull_request_review_write"
  :version "1.0.0"
  :description "Create and/or submit, delete review of a pull request.

Available methods:
- create: Create a new review of a pull request. If "event" parameter is provided, the review is submitted. If "event" is omitted, a pending review is created.
- submit_pending: Submit an existing pending review of a pull request. This requires that a pending review exists for the current user on the specified pull request. The "body" and "event" parameters are used when submitting the review.
- delete_pending: Delete an existing pending review of a pull request. This requires that a pending review exists for the current user on the specified pull request.
"
  :provider "MCP"
  :permissions [:network.http]
  :effects [:network_request :mcp_call]
  :metadata {
    :mcp {
      :server_url "https://api.githubcopilot.com/mcp/"
      :server_name "github"
      :tool_name "pull_request_review_write"
      :protocol_version "2024-11-05"
      :requires_session "auto"
      :auth_env_var "MCP_AUTH_TOKEN"
      :server_url_override_env "MCP_SERVER_URL"
    }
    :discovery {
      :method "mcp_introspection"
      :source_url "https://api.githubcopilot.com/mcp/"
      :created_at "2025-10-24T09:02:22.097486473+00:00"
      :capability_type "mcp_tool"
    }
  }
  :input-schema {
    :body :string ;; optional
    :commitID :string ;; optional
    :event :string ;; optional
    :method :string
    :owner :string
    :pullNumber :float
    :repo :string
  }
  :output-schema :any
  :implementation
    (fn [input]
  ;; MCP Tool: Create and/or submit, delete review of a pull request.

Available methods:
- create: Create a new review of a pull request. If "event" parameter is provided, the review is submitted. If "event" is omitted, a pending review is created.
- submit_pending: Submit an existing pending review of a pull request. This requires that a pending review exists for the current user on the specified pull request. The "body" and "event" parameters are used when submitting the review.
- delete_pending: Delete an existing pending review of a pull request. This requires that a pending review exists for the current user on the specified pull request.

  ;; Runtime validates input against input_schema and output_schema
  ;; Makes standard MCP JSON-RPC call to tools/call endpoint
  ;; 
  ;; Configuration:
  ;;   - MCP_SERVER_URL: Override server URL (default from metadata)
  ;;   - MCP_AUTH_TOKEN: Optional auth token for MCP server
  ;;
  ;; Session management is handled by the runtime based on capability metadata.
  (let [default_url "https://api.githubcopilot.com/mcp/"
        env_url (call "ccos.system.get-env" "MCP_SERVER_URL")
        mcp_url (if env_url env_url default_url)
        ;; Optional: get auth token from input or env
        auth_token (or (get input :auth-token)
                       (call "ccos.system.get-env" "MCP_AUTH_TOKEN"))
        ;; Build MCP JSON-RPC request
        mcp_request {:jsonrpc "2.0"
                      :id "mcp_call"
                      :method "tools/call"
                      :params {:name "pull_request_review_write"
                               :arguments input}}
        ;; Build headers with optional auth
        headers (if auth_token
                  {:content-type "application/json"
                    :authorization (str "Bearer " auth_token)}
                  {:content-type "application/json"})]
    ;; Make HTTP POST to MCP server
    (let [response (call "ccos.network.http-fetch"
                        :method "POST"
                        :url mcp_url
                        :headers headers
                        :body (call "ccos.data.serialize-json" mcp_request))]
      ;; Parse response and extract result
      (if (get response :body)
        (let [response_json (call "ccos.data.parse-json" (get response :body))
              result (get response_json :result)]
          ;; Return MCP tool result (runtime validates against output_schema)
          result)
        ;; Return error if no response body
        {:error "No response from MCP server" :url mcp_url}))))
)
