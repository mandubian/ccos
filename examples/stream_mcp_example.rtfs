;; Example: MCP streaming with mock loop
;; Demonstrates the ergonomic (mcp-stream ...) macro which lowers to a capability call
;; Assumes runtime has invoked register_mcp_streaming_capability so :mcp.stream.start is registered.

;; Define a simple processor function that would receive each chunk.
;; (Note: actual continuation re-entry wiring still placeholder; this documents intent.)
(fn process-weather-chunk [state chunk]
  ;; Expect chunk like { :seq <int> :payload <string> }
  (let [seq (:seq chunk)
        payload (:payload chunk)
        new-count (+ (:count state 0) 1)]
    (println "[processor] seq=" seq " payload=" payload " count=" new-count)
    ;; Return updated state (immutably) - future runtime will persist with continuation
    {:count new-count :last payload}))

;; Start the stream. Initial state is {:count 0}
(step "Start weather monitoring stream"
  (mcp-stream "weather.monitor.v1" process-weather-chunk {:count 0}))

"Stream started (mock). Use the mock loop to feed chunks during tests." 
