{
  "requesterUsername": "mandubian",
  "requesterAvatarIconUri": {
    "$mid": 1,
    "path": "/u/77193",
    "scheme": "https",
    "authority": "avatars.githubusercontent.com",
    "query": "v=4"
  },
  "responderUsername": "GitHub Copilot",
  "responderAvatarIconUri": {
    "id": "copilot"
  },
  "initialLocation": "panel",
  "requests": [
    {
      "requestId": "request_e7c5f6a4-fda1-45c1-b362-a5f91766b23d",
      "message": {
        "text": "ok I've corrected all tests. Can you add more tests on AST like comments",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 72
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 73
            },
            "text": "ok I've corrected all tests. Can you add more tests on AST like comments",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": [
          {
            "id": "vscode.implicit.viewport",
            "name": "file:parser.rs",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
                "_sep": 1,
                "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 1,
                "startColumn": 1,
                "endLineNumber": 34,
                "endColumn": 47
              }
            },
            "isFile": true,
            "modelDescription": "User's current visible code"
          }
        ]
      },
      "response": [
        {
          "value": "Okay, I understand you want to add tests related to comments.\n\nCurrently, the parser uses `multispace0` and `multispace1` within the `ws` helper and collection parsers. These `nom` combinators typically consume standard whitespace characters (spaces, tabs, newlines). In many parsing contexts, comments are treated like whitespace and are consumed/ignored by these combinators.\n\nTherefore, the parser doesn't explicitly create AST nodes for comments; it simply skips over them.\n\nWhat I can do is add tests to demonstrate and verify that comments (using a common Lisp-style semicolon `;` for single-line comments, as this seems appropriate for the S-expression style) are correctly ignored and do not interfere with parsing the actual data structures.\n\nHere's the plan:\n\n1.  **Define Comment Syntax:** Assume single-line comments start with `;` and go to the end of the line.\n2.  **Modify Whitespace Handling (if needed):** Check if `multispace0`/`multispace1` already handle this. If not, we might need a custom whitespace/comment consumer. *Correction:* `nom::character::complete::multispace0` and `multispace1` only handle standard whitespace (` \\t\\r\\n`). We need a custom combinator to handle both whitespace *and* comments.\n3.  **Implement Custom Whitespace/Comment Consumer:** Create a new parser function `ws_or_comment` that consumes zero or more occurrences of standard whitespace or semicolon comments.\n4.  **Update Parsers:** Replace `multispace0` and `multispace1` in the `ws` helper and collection parsers (`separated_list0`) with the new `ws_or_comment` combinator (or a variant that requires at least one whitespace/comment character where `multispace1` was used).\n5.  **Add Tests:** Create new test cases in `parser.rs` that include comments in various positions (start of input, end of input, between elements, inside collections) to ensure they are ignored correctly.\n\nLet's start by implementing the custom whitespace/comment consumer and updating the relevant parser functions.\n\n**Step 1 & 2: Implement Custom Whitespace/Comment Consumer & Update `ws`**\n\nI'll define `parse_comment` and then `ws_or_comment0` (like `multispace0`) and `ws_or_comment1` (like `multispace1`). Then I'll update the `ws` helper.\n\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "8cf85ee3-6d40-402e-9efd-36f2bcedb564"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "10714f0b-42ba-4e8a-8b7b-a03396f702b0"
        },
        {
          "kind": "undoStop",
          "id": "69dd572c-9adf-46c8-b998-7713caaadebd"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "use nom::{\n    branch::alt,\n    // Removed is_not\n    bytes::complete::{tag, take_while, take_while1, take_while_m_n},\n    character::complete::{char, multispace0, multispace1, none_of, line_ending, not_line_ending}, // Added line_ending, not_line_ending\n    combinator::{map, map_res, opt, recognize, value},\n    error::ParseError,\n    multi::{many0, separated_list0},\n    sequence::{delimited, pair, preceded, separated_pair, tuple}, // Added separated_pair\n    IResult,\n};\n// ...existing code...\n\n// Parser for single-line comments starting with ;\nfn parse_comment<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\n    recognize(preceded(char(';'), opt(not_line_ending)))(input)\n}\n\n// Parser for zero or more whitespace characters or comments\nfn ws_or_comment0<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\n    recognize(many0(alt((multispace1, parse_comment))))(input)\n}\n\n// Parser for one or more whitespace characters or comments\nfn ws_or_comment1<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\n    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here\n}\n\n\n// Helper function to consume whitespace OR comments\nfn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>\nwhere\n    F: FnMut(&'a str) -> IResult<&'a str, O, E>,\n{\n    delimited(ws_or_comment0, inner, ws_or_comment0) // Use ws_or_comment0\n}\n\n// Parser for Nil\n// ...existing code...\n\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace0, multispace1, none_of, line_ending, not_line_ending}, // Added line_ending, not_line_ending",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, separated_pair, tuple}, // Added separated_pair",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for single-line comments starting with ;",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "fn parse_comment<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "    recognize(preceded(char(';'), opt(not_line_ending)))(input)",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "// Parser for zero or more whitespace characters or comments",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn ws_or_comment0<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    recognize(many0(alt((multispace1, parse_comment))))(input)",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Parser for one or more whitespace characters or comments",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn ws_or_comment1<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace OR comments",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(ws_or_comment0, inner, ws_or_comment0) // Use ws_or_comment0",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                multispace1,          // Separator handles space BETWEEN elements",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            )),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            char(')'), // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                multispace1,          // Separator handles space BETWEEN elements",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            )),",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            char(']'), // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        separated_pair(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "            // Changed from pair to separated_pair",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "            parse_value_internal, // Key parser",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            multispace1,          // Separator: Must have 1+ space between key and value",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            parse_value_internal, // Value parser without surrounding ws",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "            ws(char('{')), // No ws wrapper",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(multispace1, parse_map_entry_internal)),",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 111
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_list_internal(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ]\"),",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_vector_internal(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 761,
                  "startColumn": 1,
                  "endLineNumber": 761,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 762,
                  "startColumn": 1,
                  "endLineNumber": 762,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 763,
                  "startColumn": 1,
                  "endLineNumber": 763,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 764,
                  "startColumn": 1,
                  "endLineNumber": 764,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 765,
                  "startColumn": 1,
                  "endLineNumber": 765,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 766,
                  "startColumn": 1,
                  "endLineNumber": 766,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 767,
                  "startColumn": 1,
                  "endLineNumber": 767,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 768,
                  "startColumn": 1,
                  "endLineNumber": 768,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\nimpl Value {",
                "range": {
                  "startLineNumber": 769,
                  "startColumn": 1,
                  "endLineNumber": 769,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 770,
                  "startColumn": 1,
                  "endLineNumber": 770,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        match self {",
                "range": {
                  "startLineNumber": 771,
                  "startColumn": 1,
                  "endLineNumber": 771,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 772,
                  "startColumn": 1,
                  "endLineNumber": 772,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            _ => None,",
                "range": {
                  "startLineNumber": 773,
                  "startColumn": 1,
                  "endLineNumber": 773,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        }",
                "range": {
                  "startLineNumber": 774,
                  "startColumn": 1,
                  "endLineNumber": 774,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 775,
                  "startColumn": 1,
                  "endLineNumber": 775,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 776,
                  "startColumn": 1,
                  "endLineNumber": 776,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 777,
                  "startColumn": 1,
                  "endLineNumber": 777,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, I've updated the parser logic in ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          },
          "uris": {}
        },
        {
          "kind": "inlineReference",
          "inlineReference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          }
        },
        {
          "value": " to recognize comments starting with `;` and treat them similarly to whitespace using the `ws_or_comment0` and `ws_or_comment1` helper parsers. The main `ws` helper now uses `ws_or_comment0` to allow comments wherever whitespace was previously allowed.\n\nNow, let's add tests to ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "inlineReference",
          "inlineReference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          }
        },
        {
          "value": " to specifically verify the comment parsing behavior.\n\n```rust\n#[cfg(test)]\nmod tests {\n    // ... existing imports ...\n    use super::{parse_value, parse_expr, Value, Expr, MapKey}; // Ensure these are imported\n\n    // ... existing helper functions and tests ...\n\n    #[test]\n    fn test_parse_with_comments() {\n        // Comments before value\n        assert_eq!(\n            parse_value(\"; this is a comment\\\\n 123\"),\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\n        );\n        // Comments after value\n        assert_eq!(\n            parse_value(\"true ; another comment\"),\n            Ok((\"\", Value::Bool(true)))\n        );\n        // Comments surrounding value\n        assert_eq!(\n            parse_value(\"; comment before\\\\n nil ; comment after\"),\n            Ok((\"\", Value::Nil))\n        );\n        // Comments inside list\n        assert_eq!(\n            parse_value(\"(1 ; item 1\\\\n 2 ; item 2\\\\n )\"),\n            Ok((\n                \"\",\n                Value::List(vec![\n                    Value::Int(1.to_bigint().unwrap()),\n                    Value::Int(2.to_bigint().unwrap()),\n                ])\n            ))\n        );\n        // Comments inside vector\n        assert_eq!(\n            parse_value(\"[ :a ; keyword a \\\\n :b ; keyword b ]\"),\n            Ok((\n                \"\",\n                Value::Vector(vec![\n                    Value::Keyword(\"a\".to_string()),\n                    Value::Keyword(\"b\".to_string()),\n                ])\n            ))\n        );\n        // Comments inside map\n        let mut expected_map = HashMap::new();\n        expected_map.insert(MapKey::String(\"key\".to_string()), Value::Int(1.to_bigint().unwrap()));\n        expected_map.insert(MapKey::Keyword(\"another\".to_string()), Value::Bool(false));\n        assert_eq!(\n            parse_value(\"{ \\\\\\\"key\\\\\\\" ; map key \\\\n 1 ; map value \\\\n :another false ; next pair \\\\n }\"),\n            Ok((\"\", Value::Map(expected_map)))\n        );\n        // Comment within a string (should be part of the string)\n        assert_eq!(\n            parse_value(r#\"\"a string ; with a comment inside\"\"#),\n            Ok((\"\", Value::String(\"a string ; with a comment inside\".to_string())))\n        );\n        // Multiple comments and whitespace\n        assert_eq!(\n            parse_value(\"  ; comment 1 \\\\n   ( ; comment 2 \\\\n 1 \\\\n ; comment 3 \\\\n ) ; comment 4 \"),\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))\n        );\n        // Empty input with comments\n        assert!(parse_value(\"; only comment\").is_err()); // Expecting a value, not just comment\n        assert!(parse_value(\" ; ; ; \").is_err());      // Expecting a value\n\n        // Test with parse_expr\n         assert_eq!(\n            parse_expr(\"; comment before expr\\\\n 42\"),\n            Ok((\"\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))\n        );\n    }\n\n    #[test]\n    fn test_parse_comment_only_input() {\n        // Test cases where the input contains only comments or whitespace and comments\n        let result = parse_value(\"; just a comment\");\n        assert!(result.is_err(), \"Parsing only a comment should fail when expecting a value\");\n\n        let result = parse_value(\"  ; comment with leading space \\n ; another comment \");\n         assert!(result.is_err(), \"Parsing only comments and whitespace should fail\");\n\n        // Ensure parse_expr also handles this correctly\n        let result_expr = parse_expr(\"; comment for expr\");\n        assert!(result_expr.is_err(), \"parse_expr should fail on comment-only input\");\n    }\n\n     #[test]\n    fn test_comment_at_eof() {\n        // Test parsing a value followed immediately by EOF after a comment\n        assert_eq!(\n            parse_value(\"123 ; comment at end\"),\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\n        );\n         assert_eq!(\n            parse_value(\"(1 2) ; list comment\"),\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap()), Value::Int(2.to_bigint().unwrap())])))\n        );\n    }\n}\n```\n\nI will now add these tests to the ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "inlineReference",
          "inlineReference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          }
        },
        {
          "value": " file.\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          },
          "uris": {}
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "9effd1a7-d808-4fca-92a7-5be21f6ba9d7"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "8b230d77-175f-4045-b216-7f23e5934d44"
        },
        {
          "kind": "undoStop",
          "id": "910544db-d2d6-4741-8cbe-5e3f911fe9f5"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "\n\n#[cfg(test)]\nmod tests {\n    // ... existing imports ...\n    use super::{parse_value, parse_expr, Value, Expr, MapKey}; // Ensure these are imported\n\n    // ... existing helper functions and tests ...\n\n    #[test]\n    fn test_parse_with_comments() {\n        // Comments before value\n        assert_eq!(\n            parse_value(\"; this is a comment\\n 123\"),\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\n        );\n        // Comments after value\n        assert_eq!(\n            parse_value(\"true ; another comment\"),\n            Ok((\"\", Value::Bool(true)))\n        );\n        // Comments surrounding value\n        assert_eq!(\n            parse_value(\"; comment before\\n nil ; comment after\"),\n            Ok((\"\", Value::Nil))\n        );\n        // Comments inside list\n        assert_eq!(\n            parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),\n            Ok((\n                \"\",\n                Value::List(vec![\n                    Value::Int(1.to_bigint().unwrap()),\n                    Value::Int(2.to_bigint().unwrap()),\n                ])\n            ))\n        );\n        // Comments inside vector\n        assert_eq!(\n            parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"),\n            Ok((\n                \"\",\n                Value::Vector(vec![\n                    Value::Keyword(\"a\".to_string()),\n                    Value::Keyword(\"b\".to_string()),\n                ])\n            ))\n        );\n        // Comments inside map\n        let mut expected_map = HashMap::new();\n        expected_map.insert(MapKey::String(\"key\".to_string()), Value::Int(1.to_bigint().unwrap()));\n        expected_map.insert(MapKey::Keyword(\"another\".to_string()), Value::Bool(false));\n        assert_eq!(\n            parse_value(\"{ \\\"key\\\" ; map key \\n 1 ; map value \\n :another false ; next pair \\n }\"),\n            Ok((\"\", Value::Map(expected_map)))\n        );\n        // Comment within a string (should be part of the string)\n        assert_eq!(\n            parse_value(r#\"\"a string ; with a comment inside\"\"#),\n            Ok((\"\", Value::String(\"a string ; with a comment inside\".to_string())))\n        );\n        // Multiple comments and whitespace\n        assert_eq!(\n            parse_value(\"  ; comment 1 \\n   ( ; comment 2 \\n 1 \\n ; comment 3 \\n ) ; comment 4 \"),\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))\n        );\n        // Empty input with comments\n        assert!(parse_value(\"; only comment\").is_err()); // Expecting a value, not just comment\n        assert!(parse_value(\" ; ; ; \").is_err());      // Expecting a value\n\n        // Test with parse_expr\n         assert_eq!(\n            parse_expr(\"; comment before expr\\n 42\"),\n            Ok((\"\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))\n        );\n    }\n\n    #[test]\n    fn test_parse_comment_only_input() {\n        // Test cases where the input contains only comments or whitespace and comments\n        let result = parse_value(\"; just a comment\");\n        assert!(result.is_err(), \"Parsing only a comment should fail when expecting a value\");\n\n        let result = parse_value(\"  ; comment with leading space \\n ; another comment \");\n         assert!(result.is_err(), \"Parsing only comments and whitespace should fail\");\n\n        // Ensure parse_expr also handles this correctly\n        let result_expr = parse_expr(\"; comment for expr\");\n        assert!(result_expr.is_err(), \"parse_expr should fail on comment-only input\");\n    }\n\n     #[test]\n    fn test_comment_at_eof() {\n        // Test parsing a value followed immediately by EOF after a comment\n        assert_eq!(\n            parse_value(\"123 ; comment at end\"),\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\n        );\n         assert_eq!(\n            parse_value(\"(1 2) ; list comment\"),\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap()), Value::Int(2.to_bigint().unwrap())])))\n        );\n    }\n}\n\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, line_ending, multispace0, multispace1, none_of, not_line_ending}, // Added line_ending, not_line_ending",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 136
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, separated_list0},",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, separated_pair, tuple}, // Added separated_pair",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for single-line comments starting with ;",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "fn parse_comment<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "    recognize(preceded(char(';'), opt(not_line_ending)))(input)",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for zero or more whitespace characters or comments",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "fn ws_or_comment0<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "    recognize(many0(alt((multispace1, parse_comment))))(input)",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for one or more whitespace characters or comments",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn ws_or_comment1<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace OR comments",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(ws_or_comment0, inner, ws_or_comment0) // Use ws_or_comment0",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                multispace1,          // Separator handles space BETWEEN elements",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            )),",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            char(')'), // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                multispace1,          // Separator handles space BETWEEN elements",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            )),",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            char(']'), // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        separated_pair(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Changed from pair to separated_pair",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "            parse_value_internal, // Key parser",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            multispace1,          // Separator: Must have 1+ space between key and value",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "            parse_value_internal, // Value parser without surrounding ws",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('{')), // No ws wrapper",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(multispace1, parse_map_entry_internal)),",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_list_internal(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 111
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ]\"),",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_vector_internal(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 761,
                  "startColumn": 1,
                  "endLineNumber": 761,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 762,
                  "startColumn": 1,
                  "endLineNumber": 762,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 763,
                  "startColumn": 1,
                  "endLineNumber": 763,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 764,
                  "startColumn": 1,
                  "endLineNumber": 764,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 765,
                  "startColumn": 1,
                  "endLineNumber": 765,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 766,
                  "startColumn": 1,
                  "endLineNumber": 766,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    // New tests for parsing comments",
                "range": {
                  "startLineNumber": 767,
                  "startColumn": 1,
                  "endLineNumber": 767,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 768,
                  "startColumn": 1,
                  "endLineNumber": 768,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_with_comments() {",
                "range": {
                  "startLineNumber": 769,
                  "startColumn": 1,
                  "endLineNumber": 769,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        // Comments before value",
                "range": {
                  "startLineNumber": 770,
                  "startColumn": 1,
                  "endLineNumber": 770,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 771,
                  "startColumn": 1,
                  "endLineNumber": 771,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"; this is a comment\\n 123\"),",
                "range": {
                  "startLineNumber": 772,
                  "startColumn": 1,
                  "endLineNumber": 772,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 773,
                  "startColumn": 1,
                  "endLineNumber": 773,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 774,
                  "startColumn": 1,
                  "endLineNumber": 774,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Comments after value",
                "range": {
                  "startLineNumber": 775,
                  "startColumn": 1,
                  "endLineNumber": 775,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 776,
                  "startColumn": 1,
                  "endLineNumber": 776,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"true ; another comment\"),",
                "range": {
                  "startLineNumber": 777,
                  "startColumn": 1,
                  "endLineNumber": 777,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((\"\", Value::Bool(true)))",
                "range": {
                  "startLineNumber": 778,
                  "startColumn": 1,
                  "endLineNumber": 778,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 779,
                  "startColumn": 1,
                  "endLineNumber": 779,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Comments surrounding value",
                "range": {
                  "startLineNumber": 780,
                  "startColumn": 1,
                  "endLineNumber": 780,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert_eq!(",
                "range": {
                  "startLineNumber": 781,
                  "startColumn": 1,
                  "endLineNumber": 781,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            parse_value(\"; comment before\\n nil ; comment after\"),",
                "range": {
                  "startLineNumber": 782,
                  "startColumn": 1,
                  "endLineNumber": 782,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((\"\", Value::Nil))",
                "range": {
                  "startLineNumber": 783,
                  "startColumn": 1,
                  "endLineNumber": 783,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 784,
                  "startColumn": 1,
                  "endLineNumber": 784,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Comments inside list",
                "range": {
                  "startLineNumber": 785,
                  "startColumn": 1,
                  "endLineNumber": 785,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert_eq!(",
                "range": {
                  "startLineNumber": 786,
                  "startColumn": 1,
                  "endLineNumber": 786,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),",
                "range": {
                  "startLineNumber": 787,
                  "startColumn": 1,
                  "endLineNumber": 787,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((",
                "range": {
                  "startLineNumber": 788,
                  "startColumn": 1,
                  "endLineNumber": 788,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n                \"\",",
                "range": {
                  "startLineNumber": 789,
                  "startColumn": 1,
                  "endLineNumber": 789,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n                Value::List(vec![",
                "range": {
                  "startLineNumber": 790,
                  "startColumn": 1,
                  "endLineNumber": 790,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 791,
                  "startColumn": 1,
                  "endLineNumber": 791,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n                    Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 792,
                  "startColumn": 1,
                  "endLineNumber": 792,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n                ])",
                "range": {
                  "startLineNumber": 793,
                  "startColumn": 1,
                  "endLineNumber": 793,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            ))",
                "range": {
                  "startLineNumber": 794,
                  "startColumn": 1,
                  "endLineNumber": 794,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 795,
                  "startColumn": 1,
                  "endLineNumber": 795,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Comments inside vector",
                "range": {
                  "startLineNumber": 796,
                  "startColumn": 1,
                  "endLineNumber": 796,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert_eq!(",
                "range": {
                  "startLineNumber": 797,
                  "startColumn": 1,
                  "endLineNumber": 797,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"),",
                "range": {
                  "startLineNumber": 798,
                  "startColumn": 1,
                  "endLineNumber": 798,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((",
                "range": {
                  "startLineNumber": 799,
                  "startColumn": 1,
                  "endLineNumber": 799,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n                \"\",",
                "range": {
                  "startLineNumber": 800,
                  "startColumn": 1,
                  "endLineNumber": 800,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 801,
                  "startColumn": 1,
                  "endLineNumber": 801,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n                    Value::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 802,
                  "startColumn": 1,
                  "endLineNumber": 802,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n                    Value::Keyword(\"b\".to_string()),",
                "range": {
                  "startLineNumber": 803,
                  "startColumn": 1,
                  "endLineNumber": 803,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n                ])",
                "range": {
                  "startLineNumber": 804,
                  "startColumn": 1,
                  "endLineNumber": 804,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            ))",
                "range": {
                  "startLineNumber": 805,
                  "startColumn": 1,
                  "endLineNumber": 805,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 806,
                  "startColumn": 1,
                  "endLineNumber": 806,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Comments inside map",
                "range": {
                  "startLineNumber": 807,
                  "startColumn": 1,
                  "endLineNumber": 807,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 808,
                  "startColumn": 1,
                  "endLineNumber": 808,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        expected_map.insert(MapKey::String(\"key\".to_string()), Value::Int(1.to_bigint().unwrap()));",
                "range": {
                  "startLineNumber": 809,
                  "startColumn": 1,
                  "endLineNumber": 809,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        expected_map.insert(MapKey::Keyword(\"another\".to_string()), Value::Bool(false));",
                "range": {
                  "startLineNumber": 810,
                  "startColumn": 1,
                  "endLineNumber": 810,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert_eq!(",
                "range": {
                  "startLineNumber": 811,
                  "startColumn": 1,
                  "endLineNumber": 811,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            parse_value(\"{ \\\"key\\\" ; map key \\n 1 ; map value \\n :another false ; next pair \\n }\"),",
                "range": {
                  "startLineNumber": 812,
                  "startColumn": 1,
                  "endLineNumber": 812,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((\"\", Value::Map(expected_map)))",
                "range": {
                  "startLineNumber": 813,
                  "startColumn": 1,
                  "endLineNumber": 813,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 814,
                  "startColumn": 1,
                  "endLineNumber": 814,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Comment within a string (should be part of the string)",
                "range": {
                  "startLineNumber": 815,
                  "startColumn": 1,
                  "endLineNumber": 815,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert_eq!(",
                "range": {
                  "startLineNumber": 816,
                  "startColumn": 1,
                  "endLineNumber": 816,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            parse_value(r#\"\"a string ; with a comment inside\"\"#),",
                "range": {
                  "startLineNumber": 817,
                  "startColumn": 1,
                  "endLineNumber": 817,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((\"\", Value::String(\"a string ; with a comment inside\".to_string())))",
                "range": {
                  "startLineNumber": 818,
                  "startColumn": 1,
                  "endLineNumber": 818,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 819,
                  "startColumn": 1,
                  "endLineNumber": 819,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Multiple comments and whitespace",
                "range": {
                  "startLineNumber": 820,
                  "startColumn": 1,
                  "endLineNumber": 820,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert_eq!(",
                "range": {
                  "startLineNumber": 821,
                  "startColumn": 1,
                  "endLineNumber": 821,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            parse_value(\"  ; comment 1 \\n   ( ; comment 2 \\n 1 \\n ; comment 3 \\n ) ; comment 4 \"),",
                "range": {
                  "startLineNumber": 822,
                  "startColumn": 1,
                  "endLineNumber": 822,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 823,
                  "startColumn": 1,
                  "endLineNumber": 823,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 824,
                  "startColumn": 1,
                  "endLineNumber": 824,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Empty input with comments",
                "range": {
                  "startLineNumber": 825,
                  "startColumn": 1,
                  "endLineNumber": 825,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert!(parse_value(\"; only comment\").is_err()); // Expecting a value, not just comment",
                "range": {
                  "startLineNumber": 826,
                  "startColumn": 1,
                  "endLineNumber": 826,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert!(parse_value(\" ; ; ; \").is_err());      // Expecting a value",
                "range": {
                  "startLineNumber": 827,
                  "startColumn": 1,
                  "endLineNumber": 827,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 828,
                  "startColumn": 1,
                  "endLineNumber": 828,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Test with parse_expr",
                "range": {
                  "startLineNumber": 829,
                  "startColumn": 1,
                  "endLineNumber": 829,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n         assert_eq!(",
                "range": {
                  "startLineNumber": 830,
                  "startColumn": 1,
                  "endLineNumber": 830,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            parse_expr(\"; comment before expr\\n 42\"),",
                "range": {
                  "startLineNumber": 831,
                  "startColumn": 1,
                  "endLineNumber": 831,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((\"\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 832,
                  "startColumn": 1,
                  "endLineNumber": 832,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 833,
                  "startColumn": 1,
                  "endLineNumber": 833,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 834,
                  "startColumn": 1,
                  "endLineNumber": 834,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 835,
                  "startColumn": 1,
                  "endLineNumber": 835,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    #[test]",
                "range": {
                  "startLineNumber": 836,
                  "startColumn": 1,
                  "endLineNumber": 836,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    fn test_parse_comment_only_input() {",
                "range": {
                  "startLineNumber": 837,
                  "startColumn": 1,
                  "endLineNumber": 837,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Test cases where the input contains only comments or whitespace and comments",
                "range": {
                  "startLineNumber": 838,
                  "startColumn": 1,
                  "endLineNumber": 838,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        let result = parse_value(\"; just a comment\");",
                "range": {
                  "startLineNumber": 839,
                  "startColumn": 1,
                  "endLineNumber": 839,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert!(result.is_err(), \"Parsing only a comment should fail when expecting a value\");",
                "range": {
                  "startLineNumber": 840,
                  "startColumn": 1,
                  "endLineNumber": 840,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 841,
                  "startColumn": 1,
                  "endLineNumber": 841,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        let result = parse_value(\"  ; comment with leading space \\n ; another comment \");",
                "range": {
                  "startLineNumber": 842,
                  "startColumn": 1,
                  "endLineNumber": 842,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n         assert!(result.is_err(), \"Parsing only comments and whitespace should fail\");",
                "range": {
                  "startLineNumber": 843,
                  "startColumn": 1,
                  "endLineNumber": 843,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 844,
                  "startColumn": 1,
                  "endLineNumber": 844,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Ensure parse_expr also handles this correctly",
                "range": {
                  "startLineNumber": 845,
                  "startColumn": 1,
                  "endLineNumber": 845,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        let result_expr = parse_expr(\"; comment for expr\");",
                "range": {
                  "startLineNumber": 846,
                  "startColumn": 1,
                  "endLineNumber": 846,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert!(result_expr.is_err(), \"parse_expr should fail on comment-only input\");",
                "range": {
                  "startLineNumber": 847,
                  "startColumn": 1,
                  "endLineNumber": 847,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 848,
                  "startColumn": 1,
                  "endLineNumber": 848,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 849,
                  "startColumn": 1,
                  "endLineNumber": 849,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n     #[test]",
                "range": {
                  "startLineNumber": 850,
                  "startColumn": 1,
                  "endLineNumber": 850,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    fn test_comment_at_eof() {",
                "range": {
                  "startLineNumber": 851,
                  "startColumn": 1,
                  "endLineNumber": 851,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        // Test parsing a value followed immediately by EOF after a comment",
                "range": {
                  "startLineNumber": 852,
                  "startColumn": 1,
                  "endLineNumber": 852,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        assert_eq!(",
                "range": {
                  "startLineNumber": 853,
                  "startColumn": 1,
                  "endLineNumber": 853,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            parse_value(\"123 ; comment at end\"),",
                "range": {
                  "startLineNumber": 854,
                  "startColumn": 1,
                  "endLineNumber": 854,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 855,
                  "startColumn": 1,
                  "endLineNumber": 855,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 856,
                  "startColumn": 1,
                  "endLineNumber": 856,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n         assert_eq!(",
                "range": {
                  "startLineNumber": 857,
                  "startColumn": 1,
                  "endLineNumber": 857,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            parse_value(\"(1 2) ; list comment\"),",
                "range": {
                  "startLineNumber": 858,
                  "startColumn": 1,
                  "endLineNumber": 858,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap()), Value::Int(2.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 859,
                  "startColumn": 1,
                  "endLineNumber": 859,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        );",
                "range": {
                  "startLineNumber": 860,
                  "startColumn": 1,
                  "endLineNumber": 860,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 861,
                  "startColumn": 1,
                  "endLineNumber": 861,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 862,
                  "startColumn": 1,
                  "endLineNumber": 862,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 863,
                  "startColumn": 1,
                  "endLineNumber": 863,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 864,
                  "startColumn": 1,
                  "endLineNumber": 864,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\nimpl Value {",
                "range": {
                  "startLineNumber": 865,
                  "startColumn": 1,
                  "endLineNumber": 865,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 866,
                  "startColumn": 1,
                  "endLineNumber": 866,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        match self {",
                "range": {
                  "startLineNumber": 867,
                  "startColumn": 1,
                  "endLineNumber": 867,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 868,
                  "startColumn": 1,
                  "endLineNumber": 868,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n            _ => None,",
                "range": {
                  "startLineNumber": 869,
                  "startColumn": 1,
                  "endLineNumber": 869,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        }",
                "range": {
                  "startLineNumber": 870,
                  "startColumn": 1,
                  "endLineNumber": 870,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 871,
                  "startColumn": 1,
                  "endLineNumber": 871,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 872,
                  "startColumn": 1,
                  "endLineNumber": 872,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 873,
                  "startColumn": 1,
                  "endLineNumber": 873,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Checking [](file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs)",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs": {
                "$mid": 1,
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              }
            }
          },
          "pastTenseMessage": {
            "value": "Checked [](file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs), 3 problems found",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs": {
                "$mid": 1,
                "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              }
            }
          },
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "5a31cf32-7acb-4f0b-a026-a65b3cf8031f"
        },
        {
          "value": "Okay, I've added the comment parsing logic and the corresponding tests to ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          },
          "uris": {}
        },
        {
          "kind": "inlineReference",
          "inlineReference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          }
        },
        {
          "value": ".\n\nIt seems there were a couple of issues reported by the error checker:\n\n1.  The `many1` combinator wasn't imported.\n2.  The `line_ending` and `multispace0` imports were unused.\n\nI'll fix these now.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "c02c43cc-5151-48f7-b496-f5c85737c0a1"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "acb1692a-c659-4839-966f-7a29ddda5250"
        },
        {
          "kind": "undoStop",
          "id": "d17f82e3-4862-444d-adf4-9d0d1a351d6b"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "use nom::{\n    branch::alt,\n    // Removed is_not\n    bytes::complete::{tag, take_while, take_while1, take_while_m_n},\n    // Removed unused line_ending, multispace0\n    character::complete::{char, multispace1, none_of, not_line_ending},\n    combinator::{map, map_res, opt, recognize, value},\n    error::ParseError,\n    multi::{many0, many1, separated_list0}, // Added many1\n    sequence::{delimited, pair, preceded, separated_pair, tuple},\n    IResult,\n};\n// ...existing code...\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    // Removed unused line_ending, multispace0",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 136
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace1, none_of, not_line_ending},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, many1, separated_list0}, // Added many1",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, separated_pair, tuple},",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "// Parser for single-line comments starting with ;",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "fn parse_comment<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    recognize(preceded(char(';'), opt(not_line_ending)))(input)",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "// Parser for zero or more whitespace characters or comments",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "fn ws_or_comment0<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    recognize(many0(alt((multispace1, parse_comment))))(input)",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "// Parser for one or more whitespace characters or comments",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "fn ws_or_comment1<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace OR comments",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    delimited(ws_or_comment0, inner, ws_or_comment0) // Use ws_or_comment0",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                multispace1,          // Separator handles space BETWEEN elements",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            )),",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "            char(')'), // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                multispace1,          // Separator handles space BETWEEN elements",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            )),",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "            char(']'), // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "        separated_pair(",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "            // Changed from pair to separated_pair",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            parse_value_internal, // Key parser",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "            multispace1,          // Separator: Must have 1+ space between key and value",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            parse_value_internal, // Value parser without surrounding ws",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ws(char('{')), // No ws wrapper",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(multispace1, parse_map_entry_internal)),",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 111
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_list_internal(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ]\"),",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_vector_internal(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        assert!(",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            parse_result.is_ok(),",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            \"Parsing '-inf' failed\"",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 761,
                  "startColumn": 1,
                  "endLineNumber": 761,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 762,
                  "startColumn": 1,
                  "endLineNumber": 762,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 763,
                  "startColumn": 1,
                  "endLineNumber": 763,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 764,
                  "startColumn": 1,
                  "endLineNumber": 764,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 765,
                  "startColumn": 1,
                  "endLineNumber": 765,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 766,
                  "startColumn": 1,
                  "endLineNumber": 766,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 767,
                  "startColumn": 1,
                  "endLineNumber": 767,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 768,
                  "startColumn": 1,
                  "endLineNumber": 768,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 769,
                  "startColumn": 1,
                  "endLineNumber": 769,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 770,
                  "startColumn": 1,
                  "endLineNumber": 770,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "    // New tests for parsing comments",
                "range": {
                  "startLineNumber": 771,
                  "startColumn": 1,
                  "endLineNumber": 771,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 772,
                  "startColumn": 1,
                  "endLineNumber": 772,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_with_comments() {",
                "range": {
                  "startLineNumber": 773,
                  "startColumn": 1,
                  "endLineNumber": 773,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        // Comments before value",
                "range": {
                  "startLineNumber": 774,
                  "startColumn": 1,
                  "endLineNumber": 774,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 775,
                  "startColumn": 1,
                  "endLineNumber": 775,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"; this is a comment\\n 123\"),",
                "range": {
                  "startLineNumber": 776,
                  "startColumn": 1,
                  "endLineNumber": 776,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 777,
                  "startColumn": 1,
                  "endLineNumber": 777,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 778,
                  "startColumn": 1,
                  "endLineNumber": 778,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        // Comments after value",
                "range": {
                  "startLineNumber": 779,
                  "startColumn": 1,
                  "endLineNumber": 779,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 780,
                  "startColumn": 1,
                  "endLineNumber": 780,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"true ; another comment\"),",
                "range": {
                  "startLineNumber": 781,
                  "startColumn": 1,
                  "endLineNumber": 781,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Bool(true)))",
                "range": {
                  "startLineNumber": 782,
                  "startColumn": 1,
                  "endLineNumber": 782,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 783,
                  "startColumn": 1,
                  "endLineNumber": 783,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        // Comments surrounding value",
                "range": {
                  "startLineNumber": 784,
                  "startColumn": 1,
                  "endLineNumber": 784,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 785,
                  "startColumn": 1,
                  "endLineNumber": 785,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"; comment before\\n nil ; comment after\"),",
                "range": {
                  "startLineNumber": 786,
                  "startColumn": 1,
                  "endLineNumber": 786,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Nil))",
                "range": {
                  "startLineNumber": 787,
                  "startColumn": 1,
                  "endLineNumber": 787,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 788,
                  "startColumn": 1,
                  "endLineNumber": 788,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        // Comments inside list",
                "range": {
                  "startLineNumber": 789,
                  "startColumn": 1,
                  "endLineNumber": 789,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 790,
                  "startColumn": 1,
                  "endLineNumber": 790,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),",
                "range": {
                  "startLineNumber": 791,
                  "startColumn": 1,
                  "endLineNumber": 791,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 792,
                  "startColumn": 1,
                  "endLineNumber": 792,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 793,
                  "startColumn": 1,
                  "endLineNumber": 793,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 794,
                  "startColumn": 1,
                  "endLineNumber": 794,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 795,
                  "startColumn": 1,
                  "endLineNumber": 795,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 796,
                  "startColumn": 1,
                  "endLineNumber": 796,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 797,
                  "startColumn": 1,
                  "endLineNumber": 797,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 798,
                  "startColumn": 1,
                  "endLineNumber": 798,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 799,
                  "startColumn": 1,
                  "endLineNumber": 799,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        // Comments inside vector",
                "range": {
                  "startLineNumber": 800,
                  "startColumn": 1,
                  "endLineNumber": 800,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 801,
                  "startColumn": 1,
                  "endLineNumber": 801,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"),",
                "range": {
                  "startLineNumber": 802,
                  "startColumn": 1,
                  "endLineNumber": 802,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 803,
                  "startColumn": 1,
                  "endLineNumber": 803,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 804,
                  "startColumn": 1,
                  "endLineNumber": 804,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 805,
                  "startColumn": 1,
                  "endLineNumber": 805,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                    Value::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 806,
                  "startColumn": 1,
                  "endLineNumber": 806,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                    Value::Keyword(\"b\".to_string()),",
                "range": {
                  "startLineNumber": 807,
                  "startColumn": 1,
                  "endLineNumber": 807,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 808,
                  "startColumn": 1,
                  "endLineNumber": 808,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 809,
                  "startColumn": 1,
                  "endLineNumber": 809,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 810,
                  "startColumn": 1,
                  "endLineNumber": 810,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        // Comments inside map",
                "range": {
                  "startLineNumber": 811,
                  "startColumn": 1,
                  "endLineNumber": 811,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 812,
                  "startColumn": 1,
                  "endLineNumber": 812,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 813,
                  "startColumn": 1,
                  "endLineNumber": 813,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 814,
                  "startColumn": 1,
                  "endLineNumber": 814,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 815,
                  "startColumn": 1,
                  "endLineNumber": 815,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 816,
                  "startColumn": 1,
                  "endLineNumber": 816,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(MapKey::Keyword(\"another\".to_string()), Value::Bool(false));",
                "range": {
                  "startLineNumber": 817,
                  "startColumn": 1,
                  "endLineNumber": 817,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 818,
                  "startColumn": 1,
                  "endLineNumber": 818,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ \\\"key\\\" ; map key \\n 1 ; map value \\n :another false ; next pair \\n }\"),",
                "range": {
                  "startLineNumber": 819,
                  "startColumn": 1,
                  "endLineNumber": 819,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map)))",
                "range": {
                  "startLineNumber": 820,
                  "startColumn": 1,
                  "endLineNumber": 820,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 821,
                  "startColumn": 1,
                  "endLineNumber": 821,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        // Comment within a string (should be part of the string)",
                "range": {
                  "startLineNumber": 822,
                  "startColumn": 1,
                  "endLineNumber": 822,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 823,
                  "startColumn": 1,
                  "endLineNumber": 823,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\"\"a string ; with a comment inside\"\"#),",
                "range": {
                  "startLineNumber": 824,
                  "startColumn": 1,
                  "endLineNumber": 824,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 825,
                  "startColumn": 1,
                  "endLineNumber": 825,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 826,
                  "startColumn": 1,
                  "endLineNumber": 826,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "                Value::String(\"a string ; with a comment inside\".to_string())",
                "range": {
                  "startLineNumber": 827,
                  "startColumn": 1,
                  "endLineNumber": 827,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 828,
                  "startColumn": 1,
                  "endLineNumber": 828,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 829,
                  "startColumn": 1,
                  "endLineNumber": 829,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        // Multiple comments and whitespace",
                "range": {
                  "startLineNumber": 830,
                  "startColumn": 1,
                  "endLineNumber": 830,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 831,
                  "startColumn": 1,
                  "endLineNumber": 831,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  ; comment 1 \\n   ( ; comment 2 \\n 1 \\n ; comment 3 \\n ) ; comment 4 \"),",
                "range": {
                  "startLineNumber": 832,
                  "startColumn": 1,
                  "endLineNumber": 832,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 833,
                  "startColumn": 1,
                  "endLineNumber": 833,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 834,
                  "startColumn": 1,
                  "endLineNumber": 834,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Empty input with comments",
                "range": {
                  "startLineNumber": 835,
                  "startColumn": 1,
                  "endLineNumber": 835,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"; only comment\").is_err()); // Expecting a value, not just comment",
                "range": {
                  "startLineNumber": 836,
                  "startColumn": 1,
                  "endLineNumber": 836,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\" ; ; ; \").is_err()); // Expecting a value",
                "range": {
                  "startLineNumber": 837,
                  "startColumn": 1,
                  "endLineNumber": 837,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 838,
                  "startColumn": 1,
                  "endLineNumber": 838,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        // Test with parse_expr",
                "range": {
                  "startLineNumber": 839,
                  "startColumn": 1,
                  "endLineNumber": 839,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 840,
                  "startColumn": 1,
                  "endLineNumber": 840,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\"; comment before expr\\n 42\"),",
                "range": {
                  "startLineNumber": 841,
                  "startColumn": 1,
                  "endLineNumber": 841,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 842,
                  "startColumn": 1,
                  "endLineNumber": 842,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 843,
                  "startColumn": 1,
                  "endLineNumber": 843,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 844,
                  "startColumn": 1,
                  "endLineNumber": 844,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 845,
                  "startColumn": 1,
                  "endLineNumber": 845,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 846,
                  "startColumn": 1,
                  "endLineNumber": 846,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_comment_only_input() {",
                "range": {
                  "startLineNumber": 847,
                  "startColumn": 1,
                  "endLineNumber": 847,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // Test cases where the input contains only comments or whitespace and comments",
                "range": {
                  "startLineNumber": 848,
                  "startColumn": 1,
                  "endLineNumber": 848,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        let result = parse_value(\"; just a comment\");",
                "range": {
                  "startLineNumber": 849,
                  "startColumn": 1,
                  "endLineNumber": 849,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(",
                "range": {
                  "startLineNumber": 850,
                  "startColumn": 1,
                  "endLineNumber": 850,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            result.is_err(),",
                "range": {
                  "startLineNumber": 851,
                  "startColumn": 1,
                  "endLineNumber": 851,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "            \"Parsing only a comment should fail when expecting a value\"",
                "range": {
                  "startLineNumber": 852,
                  "startColumn": 1,
                  "endLineNumber": 852,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 853,
                  "startColumn": 1,
                  "endLineNumber": 853,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 854,
                  "startColumn": 1,
                  "endLineNumber": 854,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let result = parse_value(\"  ; comment with leading space \\n ; another comment \");",
                "range": {
                  "startLineNumber": 855,
                  "startColumn": 1,
                  "endLineNumber": 855,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(",
                "range": {
                  "startLineNumber": 856,
                  "startColumn": 1,
                  "endLineNumber": 856,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            result.is_err(),",
                "range": {
                  "startLineNumber": 857,
                  "startColumn": 1,
                  "endLineNumber": 857,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            \"Parsing only comments and whitespace should fail\"",
                "range": {
                  "startLineNumber": 858,
                  "startColumn": 1,
                  "endLineNumber": 858,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 859,
                  "startColumn": 1,
                  "endLineNumber": 859,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 860,
                  "startColumn": 1,
                  "endLineNumber": 860,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        // Ensure parse_expr also handles this correctly",
                "range": {
                  "startLineNumber": 861,
                  "startColumn": 1,
                  "endLineNumber": 861,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        let result_expr = parse_expr(\"; comment for expr\");",
                "range": {
                  "startLineNumber": 862,
                  "startColumn": 1,
                  "endLineNumber": 862,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(",
                "range": {
                  "startLineNumber": 863,
                  "startColumn": 1,
                  "endLineNumber": 863,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            result_expr.is_err(),",
                "range": {
                  "startLineNumber": 864,
                  "startColumn": 1,
                  "endLineNumber": 864,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            \"parse_expr should fail on comment-only input\"",
                "range": {
                  "startLineNumber": 865,
                  "startColumn": 1,
                  "endLineNumber": 865,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 866,
                  "startColumn": 1,
                  "endLineNumber": 866,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 867,
                  "startColumn": 1,
                  "endLineNumber": 867,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 868,
                  "startColumn": 1,
                  "endLineNumber": 868,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 869,
                  "startColumn": 1,
                  "endLineNumber": 869,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    fn test_comment_at_eof() {",
                "range": {
                  "startLineNumber": 870,
                  "startColumn": 1,
                  "endLineNumber": 870,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        // Test parsing a value followed immediately by EOF after a comment",
                "range": {
                  "startLineNumber": 871,
                  "startColumn": 1,
                  "endLineNumber": 871,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 872,
                  "startColumn": 1,
                  "endLineNumber": 872,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123 ; comment at end\"),",
                "range": {
                  "startLineNumber": 873,
                  "startColumn": 1,
                  "endLineNumber": 873,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 874,
                  "startColumn": 1,
                  "endLineNumber": 874,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 875,
                  "startColumn": 1,
                  "endLineNumber": 875,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 876,
                  "startColumn": 1,
                  "endLineNumber": 876,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 2) ; list comment\"),",
                "range": {
                  "startLineNumber": 877,
                  "startColumn": 1,
                  "endLineNumber": 877,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 878,
                  "startColumn": 1,
                  "endLineNumber": 878,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 879,
                  "startColumn": 1,
                  "endLineNumber": 879,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 880,
                  "startColumn": 1,
                  "endLineNumber": 880,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 881,
                  "startColumn": 1,
                  "endLineNumber": 881,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 882,
                  "startColumn": 1,
                  "endLineNumber": 882,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 883,
                  "startColumn": 1,
                  "endLineNumber": 883,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 884,
                  "startColumn": 1,
                  "endLineNumber": 884,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 885,
                  "startColumn": 1,
                  "endLineNumber": 885,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 886,
                  "startColumn": 1,
                  "endLineNumber": 886,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 887,
                  "startColumn": 1,
                  "endLineNumber": 887,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 888,
                  "startColumn": 1,
                  "endLineNumber": 888,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 889,
                  "startColumn": 1,
                  "endLineNumber": 889,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 890,
                  "startColumn": 1,
                  "endLineNumber": 890,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 891,
                  "startColumn": 1,
                  "endLineNumber": 891,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 892,
                  "startColumn": 1,
                  "endLineNumber": 892,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 893,
                  "startColumn": 1,
                  "endLineNumber": 893,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 894,
                  "startColumn": 1,
                  "endLineNumber": 894,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n        }",
                "range": {
                  "startLineNumber": 895,
                  "startColumn": 1,
                  "endLineNumber": 895,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 896,
                  "startColumn": 1,
                  "endLineNumber": 896,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 897,
                  "startColumn": 1,
                  "endLineNumber": 897,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 898,
                  "startColumn": 1,
                  "endLineNumber": 898,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, I've updated the parser to handle single-line comments starting with `;` and added several new tests to ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          },
          "uris": {}
        },
        {
          "kind": "inlineReference",
          "inlineReference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          }
        },
        {
          "value": " to cover various scenarios involving comments.\n\nHere's a breakdown of the changes:\n\n1.  **Parser Modifications (`acl_compiler/src/parser.rs`):**\n    *   Introduced a `parse_comment` function using `nom` combinators (`preceded`, `char`, `opt`, `not_line_ending`) to recognize lines starting with `;`.\n    *   Created `ws_or_comment0` and `ws_or_comment1` combinators that parse zero-or-more or one-or-more sequences of whitespace characters *or* comments.\n    *   Modified the `ws` helper function to use `ws_or_comment0`. This allows comments to be ignored wherever whitespace was previously ignored (e.g., around values, before/after delimiters like `(`, `)`, `[`, `]`, `{`, `}`).\n\n2.  **New Tests (`acl_compiler/src/parser.rs`):**\n    *   Added a `test_parse_with_comments` function that checks:\n        *   Comments before and after values (`123`, `true`, `nil`).\n        *   Comments inside lists, vectors, and maps, interspersed with elements.\n        *   Comments within string literals (which should be preserved as part of the string).\n        *   Multiple comments and varying amounts of whitespace.\n        *   Parsing expressions (`parse_expr`) with preceding comments.\n    *   Added `test_parse_comment_only_input` to ensure that input consisting *only* of comments (and potentially whitespace) correctly results in a parse error when a value is expected.\n    *   Added `test_comment_at_eof` to verify parsing works correctly when a comment is the very last thing in the input string after a valid value.\n\nI fixed a couple of minor import issues identified by `get_errors` after the changes. The tests should now cover comment handling thoroughly.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        }
      ],
      "responseId": "response_046fd853-81fb-453d-8e95-8ac8527aa970",
      "result": {
        "timings": {
          "firstProgress": 15989,
          "totalElapsed": 208181
        },
        "metadata": {
          "edits": {
            "workingSet": [],
            "promptInstructions": [],
            "request": "Above is the result of calling one or more tools. The user can see the results of the insert_edit_into_file tool, so you don't need to explain them. But the user can't see the results of other tools, so you should explain them to the user if referencing them in your answer. Continue from where you left off if needed without repeating yourself.",
            "response": "Okay, I've updated the parser to handle single-line comments starting with `;` and added several new tests to `acl_compiler/src/parser.rs` to cover various scenarios involving comments.\n\nHere's a breakdown of the changes:\n\n1.  **Parser Modifications (`acl_compiler/src/parser.rs`):**\n    *   Introduced a `parse_comment` function using `nom` combinators (`preceded`, `char`, `opt`, `not_line_ending`) to recognize lines starting with `;`.\n    *   Created `ws_or_comment0` and `ws_or_comment1` combinators that parse zero-or-more or one-or-more sequences of whitespace characters *or* comments.\n    *   Modified the `ws` helper function to use `ws_or_comment0`. This allows comments to be ignored wherever whitespace was previously ignored (e.g., around values, before/after delimiters like `(`, `)`, `[`, `]`, `{`, `}`).\n\n2.  **New Tests (`acl_compiler/src/parser.rs`):**\n    *   Added a `test_parse_with_comments` function that checks:\n        *   Comments before and after values (`123`, `true`, `nil`).\n        *   Comments inside lists, vectors, and maps, interspersed with elements.\n        *   Comments within string literals (which should be preserved as part of the string).\n        *   Multiple comments and varying amounts of whitespace.\n        *   Parsing expressions (`parse_expr`) with preceding comments.\n    *   Added `test_parse_comment_only_input` to ensure that input consisting *only* of comments (and potentially whitespace) correctly results in a parse error when a value is expected.\n    *   Added `test_comment_at_eof` to verify parsing works correctly when a comment is the very last thing in the input string after a valid value.\n\nI fixed a couple of minor import issues identified by `get_errors` after the changes. The tests should now cover comment handling thoroughly."
          },
          "codeBlocks": [],
          "messages": [
            {
              "role": "user",
              "content": "ok I've corrected all tests. Can you add more tests on AST like comments"
            },
            {
              "role": "assistant",
              "content": "Okay, I've updated the parser to handle single-line comments starting with `;` and added several new tests to `acl_compiler/src/parser.rs` to cover various scenarios involving comments.\n\nHere's a breakdown of the changes:\n\n1.  **Parser Modifications (`acl_compiler/src/parser.rs`):**\n    *   Introduced a `parse_comment` function using `nom` combinators (`preceded`, `char`, `opt`, `not_line_ending`) to recognize lines starting with `;`.\n    *   Created `ws_or_comment0` and `ws_or_comment1` combinators that parse zero-or-more or one-or-more sequences of whitespace characters *or* comments.\n    *   Modified the `ws` helper function to use `ws_or_comment0`. This allows comments to be ignored wherever whitespace was previously ignored (e.g., around values, before/after delimiters like `(`, `)`, `[`, `]`, `{`, `}`).\n\n2.  **New Tests (`acl_compiler/src/parser.rs`):**\n    *   Added a `test_parse_with_comments` function that checks:\n        *   Comments before and after values (`123`, `true`, `nil`).\n        *   Comments inside lists, vectors, and maps, interspersed with elements.\n        *   Comments within string literals (which should be preserved as part of the string).\n        *   Multiple comments and varying amounts of whitespace.\n        *   Parsing expressions (`parse_expr`) with preceding comments.\n    *   Added `test_parse_comment_only_input` to ensure that input consisting *only* of comments (and potentially whitespace) correctly results in a parse error when a value is expected.\n    *   Added `test_comment_at_eof` to verify parsing works correctly when a comment is the very last thing in the input string after a valid value.\n\nI fixed a couple of minor import issues identified by `get_errors` after the changes. The tests should now cover comment handling thoroughly."
            }
          ],
          "toolCallRounds": [
            {
              "toolCalls": [
                {
                  "name": "insert_edit_into_file",
                  "arguments": "{\"code\":\"use nom::{\\n    branch::alt,\\n    // Removed is_not\\n    bytes::complete::{tag, take_while, take_while1, take_while_m_n},\\n    character::complete::{char, multispace0, multispace1, none_of, line_ending, not_line_ending}, // Added line_ending, not_line_ending\\n    combinator::{map, map_res, opt, recognize, value},\\n    error::ParseError,\\n    multi::{many0, separated_list0},\\n    sequence::{delimited, pair, preceded, separated_pair, tuple}, // Added separated_pair\\n    IResult,\\n};\\n// ...existing code...\\n\\n// Parser for single-line comments starting with ;\\nfn parse_comment\\u003c'a, E: ParseError\\u003c\\u0026'a str\\u003e\\u003e(input: \\u0026'a str) -\\u003e IResult\\u003c\\u0026'a str, \\u0026'a str, E\\u003e {\\n    recognize(preceded(char(';'), opt(not_line_ending)))(input)\\n}\\n\\n// Parser for zero or more whitespace characters or comments\\nfn ws_or_comment0\\u003c'a, E: ParseError\\u003c\\u0026'a str\\u003e\\u003e(input: \\u0026'a str) -\\u003e IResult\\u003c\\u0026'a str, \\u0026'a str, E\\u003e {\\n    recognize(many0(alt((multispace1, parse_comment))))(input)\\n}\\n\\n// Parser for one or more whitespace characters or comments\\nfn ws_or_comment1\\u003c'a, E: ParseError\\u003c\\u0026'a str\\u003e\\u003e(input: \\u0026'a str) -\\u003e IResult\\u003c\\u0026'a str, \\u0026'a str, E\\u003e {\\n    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here\\n}\\n\\n\\n// Helper function to consume whitespace OR comments\\nfn ws\\u003c'a, F, O, E: ParseError\\u003c\\u0026'a str\\u003e\\u003e(inner: F) -\\u003e impl FnMut(\\u0026'a str) -\\u003e IResult\\u003c\\u0026'a str, O, E\\u003e\\nwhere\\n    F: FnMut(\\u0026'a str) -\\u003e IResult\\u003c\\u0026'a str, O, E\\u003e,\\n{\\n    delimited(ws_or_comment0, inner, ws_or_comment0) // Use ws_or_comment0\\n}\\n\\n// Parser for Nil\\n// ...existing code...\\n\",\"explanation\":\"Define parsers for comments and whitespace/comments, then update the `ws` helper to use the new `ws_or_comment0` combinator.\",\"filePath\":\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\"}",
                  "id": "call_MHw4Ykd0eXBreTI5QWQycWliUjk__vscode-1745091772385"
                }
              ],
              "toolInputRetry": 0,
              "response": "Okay, I understand you want to add tests related to comments.\n\nCurrently, the parser uses `multispace0` and `multispace1` within the `ws` helper and collection parsers. These `nom` combinators typically consume standard whitespace characters (spaces, tabs, newlines). In many parsing contexts, comments are treated like whitespace and are consumed/ignored by these combinators.\n\nTherefore, the parser doesn't explicitly create AST nodes for comments; it simply skips over them.\n\nWhat I can do is add tests to demonstrate and verify that comments (using a common Lisp-style semicolon `;` for single-line comments, as this seems appropriate for the S-expression style) are correctly ignored and do not interfere with parsing the actual data structures.\n\nHere's the plan:\n\n1.  **Define Comment Syntax:** Assume single-line comments start with `;` and go to the end of the line.\n2.  **Modify Whitespace Handling (if needed):** Check if `multispace0`/`multispace1` already handle this. If not, we might need a custom whitespace/comment consumer. *Correction:* `nom::character::complete::multispace0` and `multispace1` only handle standard whitespace (` \\t\\r\\n`). We need a custom combinator to handle both whitespace *and* comments.\n3.  **Implement Custom Whitespace/Comment Consumer:** Create a new parser function `ws_or_comment` that consumes zero or more occurrences of standard whitespace or semicolon comments.\n4.  **Update Parsers:** Replace `multispace0` and `multispace1` in the `ws` helper and collection parsers (`separated_list0`) with the new `ws_or_comment` combinator (or a variant that requires at least one whitespace/comment character where `multispace1` was used).\n5.  **Add Tests:** Create new test cases in `parser.rs` that include comments in various positions (start of input, end of input, between elements, inside collections) to ensure they are ignored correctly.\n\nLet's start by implementing the custom whitespace/comment consumer and updating the relevant parser functions.\n\n**Step 1 & 2: Implement Custom Whitespace/Comment Consumer & Update `ws`**\n\nI'll define `parse_comment` and then `ws_or_comment0` (like `multispace0`) and `ws_or_comment1` (like `multispace1`). Then I'll update the `ws` helper.\n\n"
            },
            {
              "toolCalls": [
                {
                  "name": "insert_edit_into_file",
                  "arguments": "{\"code\":\"\\n\\n#[cfg(test)]\\nmod tests {\\n    // ... existing imports ...\\n    use super::{parse_value, parse_expr, Value, Expr, MapKey}; // Ensure these are imported\\n\\n    // ... existing helper functions and tests ...\\n\\n    #[test]\\n    fn test_parse_with_comments() {\\n        // Comments before value\\n        assert_eq!(\\n            parse_value(\\\"; this is a comment\\\\n 123\\\"),\\n            Ok((\\\"\\\", Value::Int(123.to_bigint().unwrap())))\\n        );\\n        // Comments after value\\n        assert_eq!(\\n            parse_value(\\\"true ; another comment\\\"),\\n            Ok((\\\"\\\", Value::Bool(true)))\\n        );\\n        // Comments surrounding value\\n        assert_eq!(\\n            parse_value(\\\"; comment before\\\\n nil ; comment after\\\"),\\n            Ok((\\\"\\\", Value::Nil))\\n        );\\n        // Comments inside list\\n        assert_eq!(\\n            parse_value(\\\"(1 ; item 1\\\\n 2 ; item 2\\\\n )\\\"),\\n            Ok((\\n                \\\"\\\",\\n                Value::List(vec![\\n                    Value::Int(1.to_bigint().unwrap()),\\n                    Value::Int(2.to_bigint().unwrap()),\\n                ])\\n            ))\\n        );\\n        // Comments inside vector\\n        assert_eq!(\\n            parse_value(\\\"[ :a ; keyword a \\\\n :b ; keyword b ]\\\"),\\n            Ok((\\n                \\\"\\\",\\n                Value::Vector(vec![\\n                    Value::Keyword(\\\"a\\\".to_string()),\\n                    Value::Keyword(\\\"b\\\".to_string()),\\n                ])\\n            ))\\n        );\\n        // Comments inside map\\n        let mut expected_map = HashMap::new();\\n        expected_map.insert(MapKey::String(\\\"key\\\".to_string()), Value::Int(1.to_bigint().unwrap()));\\n        expected_map.insert(MapKey::Keyword(\\\"another\\\".to_string()), Value::Bool(false));\\n        assert_eq!(\\n            parse_value(\\\"{ \\\\\\\"key\\\\\\\" ; map key \\\\n 1 ; map value \\\\n :another false ; next pair \\\\n }\\\"),\\n            Ok((\\\"\\\", Value::Map(expected_map)))\\n        );\\n        // Comment within a string (should be part of the string)\\n        assert_eq!(\\n            parse_value(r#\\\"\\\"a string ; with a comment inside\\\"\\\"#),\\n            Ok((\\\"\\\", Value::String(\\\"a string ; with a comment inside\\\".to_string())))\\n        );\\n        // Multiple comments and whitespace\\n        assert_eq!(\\n            parse_value(\\\"  ; comment 1 \\\\n   ( ; comment 2 \\\\n 1 \\\\n ; comment 3 \\\\n ) ; comment 4 \\\"),\\n            Ok((\\\"\\\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))\\n        );\\n        // Empty input with comments\\n        assert!(parse_value(\\\"; only comment\\\").is_err()); // Expecting a value, not just comment\\n        assert!(parse_value(\\\" ; ; ; \\\").is_err());      // Expecting a value\\n\\n        // Test with parse_expr\\n         assert_eq!(\\n            parse_expr(\\\"; comment before expr\\\\n 42\\\"),\\n            Ok((\\\"\\\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))\\n        );\\n    }\\n\\n    #[test]\\n    fn test_parse_comment_only_input() {\\n        // Test cases where the input contains only comments or whitespace and comments\\n        let result = parse_value(\\\"; just a comment\\\");\\n        assert!(result.is_err(), \\\"Parsing only a comment should fail when expecting a value\\\");\\n\\n        let result = parse_value(\\\"  ; comment with leading space \\\\n ; another comment \\\");\\n         assert!(result.is_err(), \\\"Parsing only comments and whitespace should fail\\\");\\n\\n        // Ensure parse_expr also handles this correctly\\n        let result_expr = parse_expr(\\\"; comment for expr\\\");\\n        assert!(result_expr.is_err(), \\\"parse_expr should fail on comment-only input\\\");\\n    }\\n\\n     #[test]\\n    fn test_comment_at_eof() {\\n        // Test parsing a value followed immediately by EOF after a comment\\n        assert_eq!(\\n            parse_value(\\\"123 ; comment at end\\\"),\\n            Ok((\\\"\\\", Value::Int(123.to_bigint().unwrap())))\\n        );\\n         assert_eq!(\\n            parse_value(\\\"(1 2) ; list comment\\\"),\\n            Ok((\\\"\\\", Value::List(vec![Value::Int(1.to_bigint().unwrap()), Value::Int(2.to_bigint().unwrap())])))\\n        );\\n    }\\n}\\n\",\"explanation\":\"Add new tests specifically for parsing comments in various positions: before, after, surrounding values, within collections, and handling comment-only input.\",\"filePath\":\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\"}",
                  "id": "call_MHxSVUc1R3JwUHRSb3dZaW1hU0w__vscode-1745091772386"
                },
                {
                  "name": "get_errors",
                  "arguments": "{\"filePaths\":[\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\"]}",
                  "id": "call_MXxXbThXclhvNkJzbTBpZjlSdGg__vscode-1745091772387"
                }
              ],
              "toolInputRetry": 0,
              "response": "Okay, I've updated the parser logic in `acl_compiler/src/parser.rs` to recognize comments starting with `;` and treat them similarly to whitespace using the `ws_or_comment0` and `ws_or_comment1` helper parsers. The main `ws` helper now uses `ws_or_comment0` to allow comments wherever whitespace was previously allowed.\n\nNow, let's add tests to `acl_compiler/src/parser.rs` to specifically verify the comment parsing behavior.\n\n```rust\n#[cfg(test)]\nmod tests {\n    // ... existing imports ...\n    use super::{parse_value, parse_expr, Value, Expr, MapKey}; // Ensure these are imported\n\n    // ... existing helper functions and tests ...\n\n    #[test]\n    fn test_parse_with_comments() {\n        // Comments before value\n        assert_eq!(\n            parse_value(\"; this is a comment\\\\n 123\"),\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\n        );\n        // Comments after value\n        assert_eq!(\n            parse_value(\"true ; another comment\"),\n            Ok((\"\", Value::Bool(true)))\n        );\n        // Comments surrounding value\n        assert_eq!(\n            parse_value(\"; comment before\\\\n nil ; comment after\"),\n            Ok((\"\", Value::Nil))\n        );\n        // Comments inside list\n        assert_eq!(\n            parse_value(\"(1 ; item 1\\\\n 2 ; item 2\\\\n )\"),\n            Ok((\n                \"\",\n                Value::List(vec![\n                    Value::Int(1.to_bigint().unwrap()),\n                    Value::Int(2.to_bigint().unwrap()),\n                ])\n            ))\n        );\n        // Comments inside vector\n        assert_eq!(\n            parse_value(\"[ :a ; keyword a \\\\n :b ; keyword b ]\"),\n            Ok((\n                \"\",\n                Value::Vector(vec![\n                    Value::Keyword(\"a\".to_string()),\n                    Value::Keyword(\"b\".to_string()),\n                ])\n            ))\n        );\n        // Comments inside map\n        let mut expected_map = HashMap::new();\n        expected_map.insert(MapKey::String(\"key\".to_string()), Value::Int(1.to_bigint().unwrap()));\n        expected_map.insert(MapKey::Keyword(\"another\".to_string()), Value::Bool(false));\n        assert_eq!(\n            parse_value(\"{ \\\\\\\"key\\\\\\\" ; map key \\\\n 1 ; map value \\\\n :another false ; next pair \\\\n }\"),\n            Ok((\"\", Value::Map(expected_map)))\n        );\n        // Comment within a string (should be part of the string)\n        assert_eq!(\n            parse_value(r#\"\"a string ; with a comment inside\"\"#),\n            Ok((\"\", Value::String(\"a string ; with a comment inside\".to_string())))\n        );\n        // Multiple comments and whitespace\n        assert_eq!(\n            parse_value(\"  ; comment 1 \\\\n   ( ; comment 2 \\\\n 1 \\\\n ; comment 3 \\\\n ) ; comment 4 \"),\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))\n        );\n        // Empty input with comments\n        assert!(parse_value(\"; only comment\").is_err()); // Expecting a value, not just comment\n        assert!(parse_value(\" ; ; ; \").is_err());      // Expecting a value\n\n        // Test with parse_expr\n         assert_eq!(\n            parse_expr(\"; comment before expr\\\\n 42\"),\n            Ok((\"\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))\n        );\n    }\n\n    #[test]\n    fn test_parse_comment_only_input() {\n        // Test cases where the input contains only comments or whitespace and comments\n        let result = parse_value(\"; just a comment\");\n        assert!(result.is_err(), \"Parsing only a comment should fail when expecting a value\");\n\n        let result = parse_value(\"  ; comment with leading space \\n ; another comment \");\n         assert!(result.is_err(), \"Parsing only comments and whitespace should fail\");\n\n        // Ensure parse_expr also handles this correctly\n        let result_expr = parse_expr(\"; comment for expr\");\n        assert!(result_expr.is_err(), \"parse_expr should fail on comment-only input\");\n    }\n\n     #[test]\n    fn test_comment_at_eof() {\n        // Test parsing a value followed immediately by EOF after a comment\n        assert_eq!(\n            parse_value(\"123 ; comment at end\"),\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\n        );\n         assert_eq!(\n            parse_value(\"(1 2) ; list comment\"),\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap()), Value::Int(2.to_bigint().unwrap())])))\n        );\n    }\n}\n```\n\nI will now add these tests to the `acl_compiler/src/parser.rs` file.\n"
            },
            {
              "toolCalls": [
                {
                  "name": "insert_edit_into_file",
                  "arguments": "{\"code\":\"use nom::{\\n    branch::alt,\\n    // Removed is_not\\n    bytes::complete::{tag, take_while, take_while1, take_while_m_n},\\n    // Removed unused line_ending, multispace0\\n    character::complete::{char, multispace1, none_of, not_line_ending},\\n    combinator::{map, map_res, opt, recognize, value},\\n    error::ParseError,\\n    multi::{many0, many1, separated_list0}, // Added many1\\n    sequence::{delimited, pair, preceded, separated_pair, tuple},\\n    IResult,\\n};\\n// ...existing code...\",\"explanation\":\"Import `many1` from `nom::multi` and remove unused imports `line_ending` and `multispace0`.\",\"filePath\":\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\"}",
                  "id": "call_MHxvZERhR2dac1lKY1dzQ1dCcjA__vscode-1745091772388"
                }
              ],
              "toolInputRetry": 0,
              "response": "Okay, I've added the comment parsing logic and the corresponding tests to `acl_compiler/src/parser.rs`.\n\nIt seems there were a couple of issues reported by the error checker:\n\n1.  The `many1` combinator wasn't imported.\n2.  The `line_ending` and `multispace0` imports were unused.\n\nI'll fix these now."
            },
            {
              "toolCalls": [],
              "toolInputRetry": 0,
              "response": "Okay, I've updated the parser to handle single-line comments starting with `;` and added several new tests to `acl_compiler/src/parser.rs` to cover various scenarios involving comments.\n\nHere's a breakdown of the changes:\n\n1.  **Parser Modifications (`acl_compiler/src/parser.rs`):**\n    *   Introduced a `parse_comment` function using `nom` combinators (`preceded`, `char`, `opt`, `not_line_ending`) to recognize lines starting with `;`.\n    *   Created `ws_or_comment0` and `ws_or_comment1` combinators that parse zero-or-more or one-or-more sequences of whitespace characters *or* comments.\n    *   Modified the `ws` helper function to use `ws_or_comment0`. This allows comments to be ignored wherever whitespace was previously ignored (e.g., around values, before/after delimiters like `(`, `)`, `[`, `]`, `{`, `}`).\n\n2.  **New Tests (`acl_compiler/src/parser.rs`):**\n    *   Added a `test_parse_with_comments` function that checks:\n        *   Comments before and after values (`123`, `true`, `nil`).\n        *   Comments inside lists, vectors, and maps, interspersed with elements.\n        *   Comments within string literals (which should be preserved as part of the string).\n        *   Multiple comments and varying amounts of whitespace.\n        *   Parsing expressions (`parse_expr`) with preceding comments.\n    *   Added `test_parse_comment_only_input` to ensure that input consisting *only* of comments (and potentially whitespace) correctly results in a parse error when a value is expected.\n    *   Added `test_comment_at_eof` to verify parsing works correctly when a comment is the very last thing in the input string after a valid value.\n\nI fixed a couple of minor import issues identified by `get_errors` after the changes. The tests should now cover comment handling thoroughly."
            }
          ],
          "toolCallResults": {
            "call_MHw4Ykd0eXBreTI5QWQycWliUjk__vscode-1745091772385": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 21,
                  "value": "The file was edited successfully"
                }
              ]
            },
            "call_MHxSVUc1R3JwUHRSb3dZaW1hU0w__vscode-1745091772386": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 21,
                  "value": "The file was edited successfully"
                }
              ]
            },
            "call_MXxXbThXclhvNkJzbTBpZjlSdGg__vscode-1745091772387": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 22,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "<errors path=\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\">\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 1,
                                  "ctor": 2,
                                  "children": [
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "This code",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "\n",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "children": [
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 9007199254740991,
                                                  "text": "```\n    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here\n```",
                                                  "references": [],
                                                  "lineBreakBefore": true
                                                }
                                              ],
                                              "references": []
                                            }
                                          ],
                                          "references": []
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "\n",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "has the problem reported:",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "\n",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "children": [
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 9007199254740991,
                                                  "text": "<compileError>\n",
                                                  "lineBreakBefore": false
                                                }
                                              ],
                                              "references": []
                                            },
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 1,
                                                  "text": "cannot find function `many1` in this scope",
                                                  "lineBreakBefore": false
                                                },
                                                {
                                                  "type": 2,
                                                  "priority": 1,
                                                  "text": "\n",
                                                  "lineBreakBefore": false
                                                }
                                              ],
                                              "priority": 1,
                                              "references": []
                                            },
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 9007199254740991,
                                                  "text": "</compileError>",
                                                  "lineBreakBefore": false
                                                }
                                              ],
                                              "references": []
                                            },
                                            {
                                              "type": 2,
                                              "priority": 9007199254740991,
                                              "text": "\n",
                                              "lineBreakBefore": false
                                            }
                                          ],
                                          "references": []
                                        }
                                      ],
                                      "references": []
                                    },
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [],
                                      "references": []
                                    },
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "This code",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "\n",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "children": [
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 9007199254740991,
                                                  "text": "```\n    character::complete::{char, line_ending, multispace0, multispace1, none_of, not_line_ending}, // Added line_ending, not_line_ending\n```",
                                                  "references": [],
                                                  "lineBreakBefore": true
                                                }
                                              ],
                                              "references": []
                                            }
                                          ],
                                          "references": []
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "\n",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "has the problem reported:",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "\n",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "children": [
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 9007199254740991,
                                                  "text": "<compileError>\n",
                                                  "lineBreakBefore": false
                                                }
                                              ],
                                              "references": []
                                            },
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 1,
                                                  "text": "unused imports: `line_ending` and `multispace0`\n`#[warn(unused_imports)]` on by default",
                                                  "lineBreakBefore": false
                                                },
                                                {
                                                  "type": 2,
                                                  "priority": 1,
                                                  "text": "\n",
                                                  "lineBreakBefore": false
                                                }
                                              ],
                                              "priority": 1,
                                              "references": []
                                            },
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 9007199254740991,
                                                  "text": "</compileError>",
                                                  "lineBreakBefore": false
                                                }
                                              ],
                                              "references": []
                                            },
                                            {
                                              "type": 2,
                                              "priority": 9007199254740991,
                                              "text": "\n",
                                              "lineBreakBefore": false
                                            }
                                          ],
                                          "references": []
                                        }
                                      ],
                                      "references": []
                                    },
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [],
                                      "references": []
                                    },
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "This code",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "\n",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "children": [
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 9007199254740991,
                                                  "text": "```\n    character::complete::{char, line_ending, multispace0, multispace1, none_of, not_line_ending}, // Added line_ending, not_line_ending\n```",
                                                  "references": [],
                                                  "lineBreakBefore": true
                                                }
                                              ],
                                              "references": []
                                            }
                                          ],
                                          "references": []
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "\n",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "has the problem reported:",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "\n",
                                          "lineBreakBefore": false
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "children": [
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 9007199254740991,
                                                  "text": "<compileError>\n",
                                                  "lineBreakBefore": false
                                                }
                                              ],
                                              "references": []
                                            },
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 1,
                                                  "text": "unused imports: `line_ending` and `multispace0`\n`#[warn(unused_imports)]` on by default",
                                                  "lineBreakBefore": false
                                                },
                                                {
                                                  "type": 2,
                                                  "priority": 1,
                                                  "text": "\n",
                                                  "lineBreakBefore": false
                                                }
                                              ],
                                              "priority": 1,
                                              "references": []
                                            },
                                            {
                                              "type": 1,
                                              "ctor": 2,
                                              "children": [
                                                {
                                                  "type": 2,
                                                  "priority": 9007199254740991,
                                                  "text": "</compileError>",
                                                  "lineBreakBefore": false
                                                }
                                              ],
                                              "references": []
                                            },
                                            {
                                              "type": 2,
                                              "priority": 9007199254740991,
                                              "text": "\n",
                                              "lineBreakBefore": false
                                            }
                                          ],
                                          "references": []
                                        }
                                      ],
                                      "references": []
                                    },
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [],
                                      "references": []
                                    }
                                  ],
                                  "references": []
                                },
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "priority": 1,
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "</errors>",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 2,
                              "priority": 9007199254740991,
                              "text": "\n",
                              "lineBreakBefore": false
                            }
                          ],
                          "references": []
                        }
                      ],
                      "references": []
                    }
                  }
                }
              ]
            },
            "call_MHxvZERhR2dac1lKY1dzQ1dCcjA__vscode-1745091772388": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 22,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "<file_after_edit path=\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\">\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "This is the new state of the file after the edit. Base future edits off of this file, no need to read it again, unless a terminal command may have changed it.",
                                  "lineBreakBefore": false
                                },
                                {
                                  "type": 1,
                                  "ctor": 2,
                                  "children": [
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "```rust\nuse nom::{\r\n    branch::alt,\r\n    // Removed is_not\r\n    bytes::complete::{tag, take_while, take_while1, take_while_m_n},\r\n    // Removed unused line_ending, multispace0\r\n    character::complete::{char, multispace1, none_of, not_line_ending},\r\n    combinator::{map, map_res, opt, recognize, value},\r\n    error::ParseError,\r\n    multi::{many0, many1, separated_list0}, // Added many1\r\n    sequence::{delimited, pair, preceded, separated_pair, tuple},\r\n    IResult,\r\n};\r\nuse num_bigint::BigInt;\r\nuse std::collections::HashMap;\r\nuse std::str::FromStr;\r\n\r\nuse crate::ast::{Expr, MapKey, Value}; // Added MapKey\r\n\r\n// Parser for single-line comments starting with ;\r\nfn parse_comment<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\r\n    recognize(preceded(char(';'), opt(not_line_ending)))(input)\r\n}\r\n\r\n// Parser for zero or more whitespace characters or comments\r\nfn ws_or_comment0<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\r\n    recognize(many0(alt((multispace1, parse_comment))))(input)\r\n}\r\n\r\n// Parser for one or more whitespace characters or comments\r\nfn ws_or_comment1<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\r\n    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here\r\n}\r\n\r\n// Helper function to consume whitespace OR comments\r\nfn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>\r\nwhere\r\n    F: FnMut(&'a str) -> IResult<&'a str, O, E>,\r\n{\r\n    delimited(ws_or_comment0, inner, ws_or_comment0) // Use ws_or_comment0\r\n}\r\n\r\n// Parser for Nil\r\nfn parse_nil(input: &str) -> IResult<&str, Value> {\r\n    map(tag(\"nil\"), |_| Value::Nil)(input)\r\n}\r\n\r\n// Parser for Booleans\r\nfn parse_bool(input: &str) -> IResult<&str, Value> {\r\n    alt((\r\n        value(Value::Bool(true), tag(\"true\")),\r\n        value(Value::Bool(false), tag(\"false\")),\r\n    ))(input)\r\n}\r\n\r\n// Parser for Integers (Ensure it doesn't parse floats)\r\nfn parse_int(input: &str) -> IResult<&str, Value> {\r\n    // Use recognize first to capture the potential integer part\r\n    let (remaining, recognized) =\r\n        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;\r\n\r\n    // Check the character immediately after the recognized part in the original input\r\n    match remaining.chars().next() {\r\n        // If the next char indicates a float, fail parsing the integer\r\n        Some('.') | Some('e') | Some('E') => {\r\n            Err(nom::Err::Error(nom::error::Error::new(\r\n                input,\r\n                nom::error::ErrorKind::Verify,\r\n            ))) // Indicate verification failure\r\n        }\r\n        // Otherwise, proceed to convert the recognized part to BigInt\r\n        _ => {\r\n            match BigInt::from_str(recognized) {\r\n                Ok(val) => Ok((remaining, Value::Int(val))),\r\n                Err(_) => Err(nom::Err::Error(nom::error::Error::new(\r\n                    recognized,\r\n                    nom::error::ErrorKind::MapRes,\r\n                ))), // Error during BigInt conversion\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Parser for Floats (recognizes the pattern first)\r\n// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan\r\n// *** Must contain '.' or 'e'/'E' to distinguish from integers ***\r\n\r\n// Helper parser for standard float patterns (excluding inf/nan)\r\nfn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {\r\n    recognize(pair(\r\n        opt(alt((char('+'), char('-')))), // Optional sign\r\n        alt((\r\n            // Case 1: Digits + '.' + Optional Digits + Optional Exponent\r\n            recognize(tuple((\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                char('.'),\r\n                take_while(|c: char| c.is_digit(10)), // Optional digits after dot\r\n                opt(tuple((\r\n                    // Optional exponent\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                ))),\r\n            ))),\r\n            // Case 2: '.' + Digits + Optional Exponent\r\n            recognize(tuple((\r\n                char('.'),\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                opt(tuple((\r\n                    // Optional exponent\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                ))),\r\n            ))),\r\n            // Case 3: Digits + Exponent (No decimal point)\r\n            recognize(tuple((\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                // Exponent MUST be present here\r\n                tuple((\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                )),\r\n            ))),\r\n        )),\r\n    ))(input)\r\n}\r\n\r\nfn parse_float(input: &str) -> IResult<&str, Value> {\r\n    map_res(\r\n        alt((\r\n            // Handle inf, -inf, nan first as they are distinct patterns\r\n            tag(\"inf\"),\r\n            tag(\"-inf\"),\r\n            tag(\"+inf\"),\r\n            tag(\"nan\"),\r\n            // Use the helper for standard float patterns\r\n            parse_standard_float_pattern,\r\n        )),\r\n        |s: &str| {\r\n            // Same mapping logic as before\r\n            match s {\r\n                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),\r\n                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),\r\n                \"nan\" => Ok(Value::Float(f64::NAN)),\r\n                _ => s.parse::<f64>().map(Value::Float),\r\n            }\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Helper for parsing a single escaped character\r\nfn parse_escape_sequence(input: &str) -> IResult<&str, char> {\r\n    preceded(\r\n        char('\\\\'),\r\n        alt((\r\n            value('\\\\', tag(\"\\\\\")),\r\n            value('\\\"', tag(\"\\\"\")),\r\n            value('\\n', tag(\"n\")),\r\n            value('\\r', tag(\"r\")),\r\n            value('\\t', tag(\"t\")),\r\n            // TODO: Add more escapes like unicode? \\u{...}\r\n        )),\r\n    )(input)\r\n}\r\n\r\n// Helper for parsing a single non-escape, non-quote character\r\nfn parse_normal_char(input: &str) -> IResult<&str, char> {\r\n    none_of(\"\\\\\\\"\")(input)\r\n}\r\n\r\n// Parser for string content (handles escapes)\r\nfn parse_string_content(input: &str) -> IResult<&str, String> {\r\n    map(\r\n        many0(alt((parse_escape_sequence, parse_normal_char))),\r\n        |chars: Vec<char>| chars.into_iter().collect(),\r\n    )(input)\r\n}\r\n\r\n// Parser for Strings using the manual content parser\r\nfn parse_string(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            char('\"'),\r\n            parse_string_content, // Use the new content parser\r\n            char('\"'),\r\n        ),\r\n        Value::String,\r\n    )(input)\r\n}\r\n\r\n// Parser for Symbols / Keywords\r\n// Must not be nil, true, false, or a number.\r\n// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.\r\n// Continues with non-quote, non-paren/bracket/brace, non-whitespace.\r\nfn is_symbol_start_char(c: char) -> bool {\r\n    // Exclude digits from starting characters\r\n    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)\r\n}\r\n\r\nfn is_symbol_char(c: char) -> bool {\r\n    // Allow digits inside, but not at the start (handled by is_symbol_start_char)\r\n    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)\r\n}\r\n\r\nfn parse_symbol(input: &str) -> IResult<&str, Value> {\r\n    map_res(\r\n        recognize(tuple((\r\n            take_while_m_n(1, 1, is_symbol_start_char),\r\n            take_while(is_symbol_char),\r\n        ))),\r\n        |s: &str| {\r\n            // Check if it's a reserved keyword or number pattern that failed other parsers\r\n            match s {\r\n                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool\r\n                _ => {\r\n                    // Basic check to prevent parsing numbers as symbols\r\n                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')\r\n                        && s.parse::<f64>().is_ok()\r\n                    {\r\n                        Err(\"Numeric literal used as symbol\")\r\n                    } else {\r\n                        Ok(Value::Symbol(s.to_string()))\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Parser for Keywords (e.g., :my-keyword)\r\nfn parse_keyword(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        preceded(\r\n            char(':'),\r\n            // Use the updated symbol character rules\r\n            recognize(tuple((\r\n                take_while_m_n(1, 1, is_symbol_start_char),\r\n                take_while(is_symbol_char),\r\n            ))),\r\n        ),\r\n        |s: &str| Value::Keyword(s.to_string()),\r\n    )(input)\r\n}\r\n\r\n// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\r\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('(')), // Keep ws around opening delimiter\r\n            ws(separated_list0(\r\n                multispace1,          // Separator handles space BETWEEN elements\r\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\r\n            )),\r\n            char(')'), // Keep ws around closing delimiter\r\n        ),\r\n        Value::List,\r\n    )(input)\r\n}\r\n\r\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\r\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('[')), // Keep ws around opening delimiter\r\n            ws(separated_list0(\r\n                multispace1,          // Separator handles space BETWEEN elements\r\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\r\n            )),\r\n            char(']'), // Keep ws around closing delimiter\r\n        ),\r\n        Value::Vector,\r\n    )(input)\r\n}\r\n\r\n// Parser for Map Entries: key value - WITHOUT outer ws\r\nfn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {\r\n    map_res(\r\n        separated_pair(\r\n            // Changed from pair to separated_pair\r\n            parse_value_internal, // Key parser\r\n            multispace1,          // Separator: Must have 1+ space between key and value\r\n            parse_value_internal, // Value parser without surrounding ws\r\n        ),\r\n        |(k, v)| {\r\n            k.into_map_key()\r\n                .ok_or(\"Invalid map key type\")\r\n                .map(|map_key| (map_key, v))\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws\r\nfn parse_map_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('{')), // No ws wrapper\r\n            ws(separated_list0(multispace1, parse_map_entry_internal)),\r\n            char('}'), // No ws wrapper\r\n        ),\r\n        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),\r\n    )(input)\r\n}\r\n\r\n// Define the actual recursive parser function\r\nfn parse_value_internal(input: &str) -> IResult<&str, Value> {\r\n    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value\r\n    alt((\r\n        parse_list_internal, // Use internal versions\r\n        parse_vector_internal,\r\n        parse_map_internal,\r\n        parse_nil,\r\n        parse_bool,\r\n        parse_float,\r\n        parse_int,\r\n        parse_string,\r\n        parse_keyword,\r\n        parse_symbol,\r\n    ))(input)\r\n}\r\n\r\n// Top-level parser for a single value/expression, handles outer whitespace\r\npub fn parse_value(input: &str) -> IResult<&str, Value> {\r\n    ws(parse_value_internal)(input) // Add ws wrapper here at the top level\r\n}\r\n\r\n// Top-level parser (for now, just parses a single value into an Expr)\r\npub fn parse_expr(input: &str) -> IResult<&str, Expr> {\r\n    // Use the top-level parse_value which handles outer whitespace\r\n    map(parse_value, Expr::Literal)(input)\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use num_bigint::ToBigInt;\r\n    use std::collections::HashMap;\r\n\r\n    // Helper for float comparison, especially NaNs\r\n    fn assert_float_eq(v1: &Value, v2: &Value) {\r\n        match (v1, v2) {\r\n            (Value::Float(f1), Value::Float(f2)) => {\r\n                if f1.is_nan() && f2.is_nan() {\r\n                    // NaNs are equal in this context\r\n                } else {\r\n                    assert_eq!(f1, f2);\r\n                }\r\n            }\r\n            _ => panic!(\"Expected two Float values\"),\r\n        }\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_nil() {\r\n        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));\r\n        assert!(parse_nil(\"Nil\").is_err());\r\n        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_bool() {\r\n        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));\r\n        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));\r\n        assert!(parse_bool(\"True\").is_err());\r\n        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_int() {\r\n        assert_eq!(\r\n            parse_int(\"123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(\r\n            parse_int(\"-45\"),\r\n            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));\r\n        // Still consumes only digits, leaving trailing chars\r\n        assert_eq!(\r\n            parse_int(\"123a\"),\r\n            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert!(parse_int(\"abc\").is_err());\r\n        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent\r\n                                              // These assertions should now pass\r\n        assert!(parse_int(\"1.2\").is_err());\r\n        assert!(parse_int(\"1e5\").is_err());\r\n        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_float() {\r\n        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));\r\n        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));\r\n        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot\r\n        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot\r\n        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent\r\n        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent\r\n        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));\r\n        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));\r\n        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));\r\n        assert_float_eq(\r\n            &parse_float(\"-inf\").unwrap().1,\r\n            &Value::Float(f64::NEG_INFINITY),\r\n        );\r\n        assert_float_eq(\r\n            &parse_float(\"+inf\").unwrap().1,\r\n            &Value::Float(f64::INFINITY),\r\n        );\r\n        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));\r\n        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"\r\n        assert!(parse_float(\".\").is_err());\r\n        assert!(parse_float(\"e5\").is_err());\r\n        // Ensure it doesn't consume integers meant for parse_int\r\n        assert!(parse_float(\"123\").is_err()); // No dot or exponent\r\n        assert!(parse_float(\"-45\").is_err()); // No dot or exponent\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_string() {\r\n        // This should finally pass\r\n        assert_eq!(\r\n            parse_string(r#\"\"\"\"#),\r\n            Ok((\"\", Value::String(\"\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"hello\"\"#),\r\n            Ok((\"\", Value::String(\"hello\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"hello world\"\"#),\r\n            Ok((\"\", Value::String(\"hello world\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),\r\n            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))\r\n        );\r\n        assert!(parse_string(r#\"\"unterminated\"#).is_err());\r\n        assert!(parse_string(r#\"no quotes\"#).is_err());\r\n        // This should still fail as '\\e' is not a valid escape sequence here\r\n        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_symbol() {\r\n        assert_eq!(\r\n            parse_symbol(\"abc\"),\r\n            Ok((\"\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"a-b_c?\"),\r\n            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))\r\n        );\r\n        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));\r\n        assert_eq!(\r\n            parse_symbol(\"set!\"),\r\n            Ok((\"\", Value::Symbol(\"set!\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"valid.symbol#1\"),\r\n            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"a1\"),\r\n            Ok((\"\", Value::Symbol(\"a1\".to_string())))\r\n        );\r\n\r\n        // Should not parse keywords or numbers\r\n        assert!(parse_symbol(\"nil\").is_err());\r\n        assert!(parse_symbol(\"true\").is_err());\r\n        assert!(parse_symbol(\"false\").is_err());\r\n        assert!(parse_symbol(\"123\").is_err());\r\n        assert!(parse_symbol(\"-45\").is_err());\r\n        assert!(parse_symbol(\"1.23\").is_err());\r\n        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword\r\n\r\n        // Test partial consumption\r\n        assert_eq!(\r\n            parse_symbol(\"abc def\"),\r\n            Ok((\" def\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"abc)\"),\r\n            Ok((\")\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n\r\n        // Invalid start characters\r\n        assert!(parse_symbol(\".dotstart\").is_err());\r\n        assert!(parse_symbol(\"#hashstart\").is_err());\r\n        assert!(parse_symbol(\":colonstart\").is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_keyword() {\r\n        assert_eq!(\r\n            parse_keyword(\":abc\"),\r\n            Ok((\"\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":a-b_c?\"),\r\n            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":+\"),\r\n            Ok((\"\", Value::Keyword(\"+\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":set!\"),\r\n            Ok((\"\", Value::Keyword(\"set!\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":valid.keyword#1\"),\r\n            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":a1\"), // Digit allowed inside\r\n            Ok((\"\", Value::Keyword(\"a1\".to_string())))\r\n        );\r\n\r\n        // Invalid keywords\r\n        assert!(parse_keyword(\"abc\").is_err()); // Missing colon\r\n        assert!(parse_keyword(\":\").is_err()); // Colon only\r\n                                              // This assertion should now pass\r\n        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon\r\n        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon\r\n\r\n        // Test partial consumption\r\n        assert_eq!(\r\n            parse_keyword(\":abc def\"),\r\n            Ok((\" def\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":abc)\"),\r\n            Ok((\")\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_list() {\r\n        // Use the public parse_value or parse_list_internal directly?\r\n        // Tests should ideally use the public interface if possible.\r\n        // Let's test parse_value with list input.\r\n        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));\r\n        assert_eq!(\r\n            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Bool(true),\r\n                    Value::String(\"hello\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value\r\n            Ok((\r\n                \"\", // parse_value consumes all surrounding whitespace\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::List(vec![\r\n                        Value::Int(2.to_bigint().unwrap()),\r\n                        Value::Int(3.to_bigint().unwrap()),\r\n                    ]),\r\n                    Value::Nil,\r\n                ])\r\n            ))\r\n        );\r\n        assert!(parse_value(\"(1 2\").is_err()); // Unclosed\r\n        assert!(parse_list_internal(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_vector() {\r\n        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));\r\n        assert_eq!(\r\n            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Bool(true),\r\n                    Value::String(\"hello\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"[ 1 [ 2 3 ] nil ]\"),\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Vector(vec![\r\n                        Value::Int(2.to_bigint().unwrap()),\r\n                        Value::Int(3.to_bigint().unwrap()),\r\n                    ]),\r\n                    Value::Nil,\r\n                ])\r\n            ))\r\n        );\r\n        assert!(parse_value(\"[1 2\").is_err()); // Unclosed\r\n        assert!(parse_vector_internal(\"(1 2)\").is_err()); // Wrong brackets\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_map() {\r\n        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));\r\n\r\n        let mut expected_map1 = HashMap::new();\r\n        expected_map1.insert(\r\n            MapKey::Keyword(\"a\".to_string()),\r\n            Value::Int(1.to_bigint().unwrap()),\r\n        );\r\n        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));\r\n\r\n        assert_eq!(\r\n            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value\r\n            Ok((\"\", Value::Map(expected_map1)))\r\n        );\r\n\r\n        let mut expected_map2 = HashMap::new();\r\n        let mut inner_map = HashMap::new();\r\n        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);\r\n        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));\r\n\r\n        assert_eq!(\r\n            parse_value(\"{ outer { 10 nil } }\"),\r\n            Ok((\"\", Value::Map(expected_map2)))\r\n        );\r\n\r\n        // Test invalid key type\r\n        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key\r\n        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key\r\n\r\n        // Test uneven number of elements\r\n        assert!(parse_value(\"{ :a 1 :b }\").is_err());\r\n        assert!(parse_value(\"{ :a }\").is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_value_literals() {\r\n        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));\r\n        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));\r\n        assert_eq!(\r\n            parse_value(\"\\t -99 \\n\"),\r\n            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))\r\n        );\r\n        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));\r\n        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));\r\n        assert_eq!(\r\n            parse_value(r#\" \"hello \\n world\" \"#),\r\n            Ok((\"\", Value::String(\"hello \\n world\".to_string())))\r\n        );\r\n        // Test order sensitivity\r\n        assert_eq!(\r\n            parse_value(\"123\"), // Should be Int\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float\r\n        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float\r\n        assert_eq!(\r\n            parse_value(\"  my-symbol  \"),\r\n            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\" :a-keyword? \"),\r\n            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))\r\n        );\r\n\r\n        // Test order sensitivity again\r\n        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol\r\n        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol\r\n        assert_eq!(\r\n            parse_value(\"123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        ); // Not a symbol\r\n        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_value_collections() {\r\n        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));\r\n        // This assertion should now pass as parse_float won't consume \"1\"\r\n        assert_eq!(\r\n            parse_value(\" [ 1 ] \"),\r\n            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))\r\n        );\r\n        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));\r\n        assert_eq!(\r\n            parse_value(\"( [ :a ] { } ) \"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),\r\n                    Value::Map(HashMap::new()),\r\n                ])\r\n            ))\r\n        );\r\n        // Add a test with floats inside collections\r\n        // Using helper method to extract value for comparison\r\n        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;\r\n        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_expr_literal() {\r\n        assert_eq!(\r\n            parse_expr(\" 12345 \"),\r\n            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" false\"),\r\n            Ok((\"\", Expr::Literal(Value::Bool(false))))\r\n        );\r\n        // Using if let to handle the result and avoid unreachable pattern warning\r\n        let parse_result = parse_expr(\" -inf \");\r\n        assert!(\r\n            parse_result.is_ok(),\r\n            \"Parsing '-inf' failed\"\r\n        );\r\n        if let Ok((_, parsed_expr)) = parse_result {\r\n            let expected_value = Value::Float(f64::NEG_INFINITY);\r\n            match parsed_expr {\r\n                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),\r\n                // This branch might be unreachable if parse_expr only returns Expr::Literal\r\n                #[allow(unreachable_patterns)]\r\n                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),\r\n            }\r\n        }\r\n        assert_eq!(\r\n            parse_expr(r#\" \"string\" \"#),\r\n            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" some_symbol \"),\r\n            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" :keyword123 \"),\r\n            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" (1 2) \"),\r\n            Ok((\r\n                \"\",\r\n                Expr::Literal(Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap())\r\n                ]))\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" [ :a ] \"),\r\n            Ok((\r\n                \"\",\r\n                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))\r\n            ))\r\n        );\r\n        let mut expected_map = HashMap::new();\r\n        expected_map.insert(\r\n            MapKey::String(\"key\".to_string()),\r\n            Value::Int(100.to_bigint().unwrap()),\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" { \\\"key\\\" 100 } \"),\r\n            Ok((\"\", Expr::Literal(Value::Map(expected_map))))\r\n        );\r\n    }\r\n\r\n    // New tests for parsing comments\r\n    #[test]\r\n    fn test_parse_with_comments() {\r\n        // Comments before value\r\n        assert_eq!(\r\n            parse_value(\"; this is a comment\\n 123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        // Comments after value\r\n        assert_eq!(\r\n            parse_value(\"true ; another comment\"),\r\n            Ok((\"\", Value::Bool(true)))\r\n        );\r\n        // Comments surrounding value\r\n        assert_eq!(\r\n            parse_value(\"; comment before\\n nil ; comment after\"),\r\n            Ok((\"\", Value::Nil))\r\n        );\r\n        // Comments inside list\r\n        assert_eq!(\r\n            parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap()),\r\n                ])\r\n            ))\r\n        );\r\n        // Comments inside vector\r\n        assert_eq!(\r\n            parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"),\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Keyword(\"a\".to_string()),\r\n                    Value::Keyword(\"b\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        // Comments inside map\r\n        let mut expected_map = HashMap::new();\r\n        expected_map.insert(\r\n            MapKey::String(\"key\".to_string()),\r\n            Value::Int(1.to_bigint().unwrap()),\r\n        );\r\n        expected_map.insert(MapKey::Keyword(\"another\".to_string()), Value::Bool(false));\r\n        assert_eq!(\r\n            parse_value(\"{ \\\"key\\\" ; map key \\n 1 ; map value \\n :another false ; next pair \\n }\"),\r\n            Ok((\"\", Value::Map(expected_map)))\r\n        );\r\n        // Comment within a string (should be part of the string)\r\n        assert_eq!(\r\n            parse_value(r#\"\"a string ; with a comment inside\"\"#),\r\n            Ok((\r\n                \"\",\r\n                Value::String(\"a string ; with a comment inside\".to_string())\r\n            ))\r\n        );\r\n        // Multiple comments and whitespace\r\n        assert_eq!(\r\n            parse_value(\"  ; comment 1 \\n   ( ; comment 2 \\n 1 \\n ; comment 3 \\n ) ; comment 4 \"),\r\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))\r\n        );\r\n        // Empty input with comments\r\n        assert!(parse_value(\"; only comment\").is_err()); // Expecting a value, not just comment\r\n        assert!(parse_value(\" ; ; ; \").is_err()); // Expecting a value\r\n\r\n        // Test with parse_expr\r\n        assert_eq!(\r\n            parse_expr(\"; comment before expr\\n 42\"),\r\n            Ok((\"\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_comment_only_input() {\r\n        // Test cases where the input contains only comments or whitespace and comments\r\n        let result = parse_value(\"; just a comment\");\r\n        assert!(\r\n            result.is_err(),\r\n            \"Parsing only a comment should fail when expecting a value\"\r\n        );\r\n\r\n        let result = parse_value(\"  ; comment with leading space \\n ; another comment \");\r\n        assert!(\r\n            result.is_err(),\r\n            \"Parsing only comments and whitespace should fail\"\r\n        );\r\n\r\n        // Ensure parse_expr also handles this correctly\r\n        let result_expr = parse_expr(\"; comment for expr\");\r\n        assert!(\r\n            result_expr.is_err(),\r\n            \"parse_expr should fail on comment-only input\"\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_comment_at_eof() {\r\n        // Test parsing a value followed immediately by EOF after a comment\r\n        assert_eq!(\r\n            parse_value(\"123 ; comment at end\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"(1 2) ; list comment\"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap())\r\n                ])\r\n            ))\r\n        );\r\n    }\r\n}\r\n\r\n// Helper method added to Value for testing convenience (optional)\r\nimpl Value {\r\n    fn get_vector(&self) -> Option<&Vec<Value>> {\r\n        match self {\r\n            Value::Vector(v) => Some(v),\r\n            _ => None,\r\n        }\r\n    }\r\n}\n```",
                                          "references": [],
                                          "lineBreakBefore": true
                                        }
                                      ],
                                      "references": []
                                    }
                                  ],
                                  "references": []
                                },
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "priority": 1,
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "</file_after_edit>",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 2,
                              "priority": 9007199254740991,
                              "text": "\n",
                              "lineBreakBefore": false
                            }
                          ],
                          "references": []
                        }
                      ],
                      "references": []
                    }
                  }
                }
              ]
            }
          },
          "modelMessageId": "3c892dbf-833a-4399-89d7-fadb05fe645e",
          "responseId": "f8eba13a-2441-4003-afa9-c8a5438b9521",
          "sessionId": "ac71aae9-8aee-46b8-be3b-a00a6bc25bf3",
          "agentId": "github.copilot.editsAgent"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editsAgent",
        "description": "Edit files in your workspace in agent mode",
        "when": "config.chat.agent.enabled && !chatAgentModeDisallowed",
        "metadata": {
          "themeIcon": {
            "id": "tools"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "welcomeMessageContent": {
            "icon": {
              "id": "copilot-large"
            },
            "title": "Edit with Copilot",
            "message": {
              "value": "Ask Copilot to edit your files in [agent mode](https://aka.ms/vscode-copilot-agent). Copilot will automatically use multiple requests to pick files to edit, run terminal commands, and iterate on errors.\n\nCopilot is powered by AI, so mistakes are possible. Review output carefully before use.",
              "supportThemeIcons": false,
              "supportHtml": false,
              "uris": {
                "https://aka.ms/vscode-copilot-agent": {
                  "$mid": 1,
                  "external": "https://aka.ms/vscode-copilot-agent",
                  "path": "/vscode-copilot-agent",
                  "scheme": "https",
                  "authority": "aka.ms"
                }
              }
            }
          }
        },
        "name": "agent",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "isToolsAgent": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\.github\\copilot-instructions.md",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "path": "/h:/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1745098044099
    },
    {
      "requestId": "request_73ddd201-d770-4ed6-9e58-5b03b56fc7dc",
      "message": {
        "text": "correct this test \"parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),\"",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 64
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 65
            },
            "text": "correct this test \"parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),\"",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": [
          {
            "id": "copilot_getTerminalLastCommand",
            "name": "Terminal Last Command",
            "fullName": "Terminal Last Command",
            "icon": {
              "id": "terminal"
            },
            "isTool": true
          },
          {
            "id": "vscode.implicit.selection",
            "name": "file:parser.rs",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
                "_sep": 1,
                "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 788,
                "startColumn": 13,
                "endLineNumber": 788,
                "endColumn": 57,
                "selectionStartLineNumber": 788,
                "selectionStartColumn": 13,
                "positionLineNumber": 788,
                "positionColumn": 57
              }
            },
            "isFile": true,
            "modelDescription": "User's active selection"
          }
        ]
      },
      "response": [
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Getting last terminal command",
          "pastTenseMessage": "Got last terminal command",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "43928480-e037-4310-8fee-1c4f06756197"
        },
        {
          "value": "Okay, I see the failing test `parser::tests::test_parse_with_comments` in the output you provided (#attachment).\n\n**Analysis:**\n\nThe specific failure occurs when parsing the list `(1 ; item 1\\n 2 ; item 2\\n )`. The error message `Err(Error(Error { input: \"(1 ; item 1\\n 2 ; item 2\\n )\", code: TakeWhileMN }))` suggests the parser failed unexpectedly while trying to parse the list content.\n\nLooking at the parser logic for lists (`parse_list_internal`):\n```rust\n// ... inside parse_list_internal ...\n            ws(separated_list0(\n                multispace1,          // Separator handles space BETWEEN elements <--- PROBLEM HERE\n                parse_value_internal, // Element parser\n            )),\n// ...\n```\nThe `separated_list0` combinator uses `multispace1` as the separator between elements. This means it expects *only* one or more whitespace characters between list items (like `1` and `2`). However, in the failing test case, the separator is ` ; item 1\\n ` (space, comment, newline, space), which `multispace1` cannot parse completely.\n\n**Motivation:**\n\nThe separator logic needs to be updated to handle not just whitespace but also comments between collection elements (lists, vectors, map entries). We already have the `ws_or_comment1` parser which handles one or more whitespace characters *or* comments.\n\n**Steps:**\n\n1.  Modify `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` to use `ws_or_comment1` as the separator in their respective `separated_list0` calls instead of `multispace1`.\n2.  This will allow comments and whitespace to exist freely between elements in lists, vectors, and maps.\n\nLet's apply the fix.\n\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "b0ca9605-e08e-4f8b-9474-40f9f78a4d4c"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "ba0d110e-c98c-42d7-8d10-4ff254c036f1"
        },
        {
          "kind": "undoStop",
          "id": "75afe193-d54f-4bc0-8df4-fd9a8752f65b"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // Keep ws around opening delimiter\n            ws(separated_list0(\n                ws_or_comment1,       // Use ws_or_comment1 as separator\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\n            )),\n            char(')'), // Keep ws around closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // Keep ws around opening delimiter\n            ws(separated_list0(\n                ws_or_comment1,       // Use ws_or_comment1 as separator\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\n            )),\n            char(']'), // Keep ws around closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n\n// Parser for Map Entries: key value - WITHOUT outer ws\nfn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {\n    map_res(\n        separated_pair(\n            parse_value_internal, // Key parser\n            ws_or_comment1,       // Use ws_or_comment1 as separator\n            parse_value_internal, // Value parser without surrounding ws\n        ),\n        |(k, v)| {\n            k.into_map_key()\n                .ok_or(\"Invalid map key type\")\n                .map(|map_key| (map_key, v))\n        },\n    )(input)\n}\n\n// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws\nfn parse_map_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('{')), // No ws wrapper\n            ws(separated_list0(ws_or_comment1, parse_map_entry_internal)), // Use ws_or_comment1 as separator\n            char('}'), // No ws wrapper\n        ),\n        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),\n    )(input)\n}\n\n// ... existing code ...\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    // Removed unused line_ending, multispace0",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace1, none_of, not_line_ending},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, many1, separated_list0}, // Added many1",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, separated_pair, tuple},",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for single-line comments starting with ;",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "fn parse_comment<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "    recognize(preceded(char(';'), opt(not_line_ending)))(input)",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for zero or more whitespace characters or comments",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "fn ws_or_comment0<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "    recognize(many0(alt((multispace1, parse_comment))))(input)",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for one or more whitespace characters or comments",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn ws_or_comment1<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace OR comments",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(ws_or_comment0, inner, ws_or_comment0) // Use ws_or_comment0",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ws_or_comment1,       // Use ws_or_comment1 as separator",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            )),",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            char(')'), // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ws_or_comment1,       // Use ws_or_comment1 as separator",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            )),",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            char(']'), // Keep ws around closing delimiter",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        separated_pair(",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            parse_value_internal, // Key parser",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "            ws_or_comment1,       // Use ws_or_comment1 as separator",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            parse_value_internal, // Value parser without surrounding ws",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "            ws(char('{')), // No ws wrapper",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(separated_list0(ws_or_comment1, parse_map_entry_internal)), // Use ws_or_comment1 as separator",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            char('}'), // No ws wrapper",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_list_internal(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 111
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ]\"),",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_vector_internal(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 761,
                  "startColumn": 1,
                  "endLineNumber": 761,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 762,
                  "startColumn": 1,
                  "endLineNumber": 762,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 763,
                  "startColumn": 1,
                  "endLineNumber": 763,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 764,
                  "startColumn": 1,
                  "endLineNumber": 764,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 765,
                  "startColumn": 1,
                  "endLineNumber": 765,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 766,
                  "startColumn": 1,
                  "endLineNumber": 766,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    // New tests for parsing comments",
                "range": {
                  "startLineNumber": 767,
                  "startColumn": 1,
                  "endLineNumber": 767,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 768,
                  "startColumn": 1,
                  "endLineNumber": 768,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_with_comments() {",
                "range": {
                  "startLineNumber": 769,
                  "startColumn": 1,
                  "endLineNumber": 769,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        // Comments before value",
                "range": {
                  "startLineNumber": 770,
                  "startColumn": 1,
                  "endLineNumber": 770,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 771,
                  "startColumn": 1,
                  "endLineNumber": 771,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"; this is a comment\\n 123\"),",
                "range": {
                  "startLineNumber": 772,
                  "startColumn": 1,
                  "endLineNumber": 772,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 773,
                  "startColumn": 1,
                  "endLineNumber": 773,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 774,
                  "startColumn": 1,
                  "endLineNumber": 774,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        // Comments after value",
                "range": {
                  "startLineNumber": 775,
                  "startColumn": 1,
                  "endLineNumber": 775,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 776,
                  "startColumn": 1,
                  "endLineNumber": 776,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"true ; another comment\"),",
                "range": {
                  "startLineNumber": 777,
                  "startColumn": 1,
                  "endLineNumber": 777,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Bool(true)))",
                "range": {
                  "startLineNumber": 778,
                  "startColumn": 1,
                  "endLineNumber": 778,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 779,
                  "startColumn": 1,
                  "endLineNumber": 779,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        // Comments surrounding value",
                "range": {
                  "startLineNumber": 780,
                  "startColumn": 1,
                  "endLineNumber": 780,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 781,
                  "startColumn": 1,
                  "endLineNumber": 781,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"; comment before\\n nil ; comment after\"),",
                "range": {
                  "startLineNumber": 782,
                  "startColumn": 1,
                  "endLineNumber": 782,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Nil))",
                "range": {
                  "startLineNumber": 783,
                  "startColumn": 1,
                  "endLineNumber": 783,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 784,
                  "startColumn": 1,
                  "endLineNumber": 784,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        // Comments inside list",
                "range": {
                  "startLineNumber": 785,
                  "startColumn": 1,
                  "endLineNumber": 785,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 786,
                  "startColumn": 1,
                  "endLineNumber": 786,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),",
                "range": {
                  "startLineNumber": 787,
                  "startColumn": 1,
                  "endLineNumber": 787,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 788,
                  "startColumn": 1,
                  "endLineNumber": 788,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 789,
                  "startColumn": 1,
                  "endLineNumber": 789,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 790,
                  "startColumn": 1,
                  "endLineNumber": 790,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 791,
                  "startColumn": 1,
                  "endLineNumber": 791,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 792,
                  "startColumn": 1,
                  "endLineNumber": 792,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 793,
                  "startColumn": 1,
                  "endLineNumber": 793,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 794,
                  "startColumn": 1,
                  "endLineNumber": 794,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 795,
                  "startColumn": 1,
                  "endLineNumber": 795,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        // Comments inside vector",
                "range": {
                  "startLineNumber": 796,
                  "startColumn": 1,
                  "endLineNumber": 796,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 797,
                  "startColumn": 1,
                  "endLineNumber": 797,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"),",
                "range": {
                  "startLineNumber": 798,
                  "startColumn": 1,
                  "endLineNumber": 798,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 799,
                  "startColumn": 1,
                  "endLineNumber": 799,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 800,
                  "startColumn": 1,
                  "endLineNumber": 800,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 801,
                  "startColumn": 1,
                  "endLineNumber": 801,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 802,
                  "startColumn": 1,
                  "endLineNumber": 802,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Keyword(\"b\".to_string()),",
                "range": {
                  "startLineNumber": 803,
                  "startColumn": 1,
                  "endLineNumber": 803,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 804,
                  "startColumn": 1,
                  "endLineNumber": 804,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 805,
                  "startColumn": 1,
                  "endLineNumber": 805,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 806,
                  "startColumn": 1,
                  "endLineNumber": 806,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        // Comments inside map",
                "range": {
                  "startLineNumber": 807,
                  "startColumn": 1,
                  "endLineNumber": 807,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 808,
                  "startColumn": 1,
                  "endLineNumber": 808,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 809,
                  "startColumn": 1,
                  "endLineNumber": 809,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 810,
                  "startColumn": 1,
                  "endLineNumber": 810,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 811,
                  "startColumn": 1,
                  "endLineNumber": 811,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 812,
                  "startColumn": 1,
                  "endLineNumber": 812,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(MapKey::Keyword(\"another\".to_string()), Value::Bool(false));",
                "range": {
                  "startLineNumber": 813,
                  "startColumn": 1,
                  "endLineNumber": 813,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 814,
                  "startColumn": 1,
                  "endLineNumber": 814,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ \\\"key\\\" ; map key \\n 1 ; map value \\n :another false ; next pair \\n }\"),",
                "range": {
                  "startLineNumber": 815,
                  "startColumn": 1,
                  "endLineNumber": 815,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map)))",
                "range": {
                  "startLineNumber": 816,
                  "startColumn": 1,
                  "endLineNumber": 816,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 817,
                  "startColumn": 1,
                  "endLineNumber": 817,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        // Comment within a string (should be part of the string)",
                "range": {
                  "startLineNumber": 818,
                  "startColumn": 1,
                  "endLineNumber": 818,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 819,
                  "startColumn": 1,
                  "endLineNumber": 819,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\"\"a string ; with a comment inside\"\"#),",
                "range": {
                  "startLineNumber": 820,
                  "startColumn": 1,
                  "endLineNumber": 820,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 821,
                  "startColumn": 1,
                  "endLineNumber": 821,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 822,
                  "startColumn": 1,
                  "endLineNumber": 822,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Value::String(\"a string ; with a comment inside\".to_string())",
                "range": {
                  "startLineNumber": 823,
                  "startColumn": 1,
                  "endLineNumber": 823,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 824,
                  "startColumn": 1,
                  "endLineNumber": 824,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 825,
                  "startColumn": 1,
                  "endLineNumber": 825,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        // Multiple comments and whitespace",
                "range": {
                  "startLineNumber": 826,
                  "startColumn": 1,
                  "endLineNumber": 826,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 827,
                  "startColumn": 1,
                  "endLineNumber": 827,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  ; comment 1 \\n   ( ; comment 2 \\n 1 \\n ; comment 3 \\n ) ; comment 4 \"),",
                "range": {
                  "startLineNumber": 828,
                  "startColumn": 1,
                  "endLineNumber": 828,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 829,
                  "startColumn": 1,
                  "endLineNumber": 829,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 830,
                  "startColumn": 1,
                  "endLineNumber": 830,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        // Empty input with comments",
                "range": {
                  "startLineNumber": 831,
                  "startColumn": 1,
                  "endLineNumber": 831,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"; only comment\").is_err()); // Expecting a value, not just comment",
                "range": {
                  "startLineNumber": 832,
                  "startColumn": 1,
                  "endLineNumber": 832,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\" ; ; ; \").is_err()); // Expecting a value",
                "range": {
                  "startLineNumber": 833,
                  "startColumn": 1,
                  "endLineNumber": 833,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 834,
                  "startColumn": 1,
                  "endLineNumber": 834,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Test with parse_expr",
                "range": {
                  "startLineNumber": 835,
                  "startColumn": 1,
                  "endLineNumber": 835,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 836,
                  "startColumn": 1,
                  "endLineNumber": 836,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\"; comment before expr\\n 42\"),",
                "range": {
                  "startLineNumber": 837,
                  "startColumn": 1,
                  "endLineNumber": 837,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 838,
                  "startColumn": 1,
                  "endLineNumber": 838,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 839,
                  "startColumn": 1,
                  "endLineNumber": 839,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 840,
                  "startColumn": 1,
                  "endLineNumber": 840,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 841,
                  "startColumn": 1,
                  "endLineNumber": 841,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 842,
                  "startColumn": 1,
                  "endLineNumber": 842,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_comment_only_input() {",
                "range": {
                  "startLineNumber": 843,
                  "startColumn": 1,
                  "endLineNumber": 843,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        // Test cases where the input contains only comments or whitespace and comments",
                "range": {
                  "startLineNumber": 844,
                  "startColumn": 1,
                  "endLineNumber": 844,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        let result = parse_value(\"; just a comment\");",
                "range": {
                  "startLineNumber": 845,
                  "startColumn": 1,
                  "endLineNumber": 845,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "        assert!(",
                "range": {
                  "startLineNumber": 846,
                  "startColumn": 1,
                  "endLineNumber": 846,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            result.is_err(),",
                "range": {
                  "startLineNumber": 847,
                  "startColumn": 1,
                  "endLineNumber": 847,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            \"Parsing only a comment should fail when expecting a value\"",
                "range": {
                  "startLineNumber": 848,
                  "startColumn": 1,
                  "endLineNumber": 848,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 849,
                  "startColumn": 1,
                  "endLineNumber": 849,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 850,
                  "startColumn": 1,
                  "endLineNumber": 850,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let result = parse_value(\"  ; comment with leading space \\n ; another comment \");",
                "range": {
                  "startLineNumber": 851,
                  "startColumn": 1,
                  "endLineNumber": 851,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert!(",
                "range": {
                  "startLineNumber": 852,
                  "startColumn": 1,
                  "endLineNumber": 852,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "            result.is_err(),",
                "range": {
                  "startLineNumber": 853,
                  "startColumn": 1,
                  "endLineNumber": 853,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            \"Parsing only comments and whitespace should fail\"",
                "range": {
                  "startLineNumber": 854,
                  "startColumn": 1,
                  "endLineNumber": 854,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 855,
                  "startColumn": 1,
                  "endLineNumber": 855,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 856,
                  "startColumn": 1,
                  "endLineNumber": 856,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Ensure parse_expr also handles this correctly",
                "range": {
                  "startLineNumber": 857,
                  "startColumn": 1,
                  "endLineNumber": 857,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let result_expr = parse_expr(\"; comment for expr\");",
                "range": {
                  "startLineNumber": 858,
                  "startColumn": 1,
                  "endLineNumber": 858,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        assert!(",
                "range": {
                  "startLineNumber": 859,
                  "startColumn": 1,
                  "endLineNumber": 859,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            result_expr.is_err(),",
                "range": {
                  "startLineNumber": 860,
                  "startColumn": 1,
                  "endLineNumber": 860,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            \"parse_expr should fail on comment-only input\"",
                "range": {
                  "startLineNumber": 861,
                  "startColumn": 1,
                  "endLineNumber": 861,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 862,
                  "startColumn": 1,
                  "endLineNumber": 862,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 863,
                  "startColumn": 1,
                  "endLineNumber": 863,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 864,
                  "startColumn": 1,
                  "endLineNumber": 864,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 865,
                  "startColumn": 1,
                  "endLineNumber": 865,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    fn test_comment_at_eof() {",
                "range": {
                  "startLineNumber": 866,
                  "startColumn": 1,
                  "endLineNumber": 866,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        // Test parsing a value followed immediately by EOF after a comment",
                "range": {
                  "startLineNumber": 867,
                  "startColumn": 1,
                  "endLineNumber": 867,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 868,
                  "startColumn": 1,
                  "endLineNumber": 868,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123 ; comment at end\"),",
                "range": {
                  "startLineNumber": 869,
                  "startColumn": 1,
                  "endLineNumber": 869,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 870,
                  "startColumn": 1,
                  "endLineNumber": 870,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 871,
                  "startColumn": 1,
                  "endLineNumber": 871,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 872,
                  "startColumn": 1,
                  "endLineNumber": 872,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 2) ; list comment\"),",
                "range": {
                  "startLineNumber": 873,
                  "startColumn": 1,
                  "endLineNumber": 873,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 874,
                  "startColumn": 1,
                  "endLineNumber": 874,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 875,
                  "startColumn": 1,
                  "endLineNumber": 875,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 876,
                  "startColumn": 1,
                  "endLineNumber": 876,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 877,
                  "startColumn": 1,
                  "endLineNumber": 877,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 878,
                  "startColumn": 1,
                  "endLineNumber": 878,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 879,
                  "startColumn": 1,
                  "endLineNumber": 879,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 880,
                  "startColumn": 1,
                  "endLineNumber": 880,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 881,
                  "startColumn": 1,
                  "endLineNumber": 881,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 882,
                  "startColumn": 1,
                  "endLineNumber": 882,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 883,
                  "startColumn": 1,
                  "endLineNumber": 883,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 884,
                  "startColumn": 1,
                  "endLineNumber": 884,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 885,
                  "startColumn": 1,
                  "endLineNumber": 885,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 886,
                  "startColumn": 1,
                  "endLineNumber": 886,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 887,
                  "startColumn": 1,
                  "endLineNumber": 887,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 888,
                  "startColumn": 1,
                  "endLineNumber": 888,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 889,
                  "startColumn": 1,
                  "endLineNumber": 889,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 890,
                  "startColumn": 1,
                  "endLineNumber": 890,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 891,
                  "startColumn": 1,
                  "endLineNumber": 891,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 892,
                  "startColumn": 1,
                  "endLineNumber": 892,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 893,
                  "startColumn": 1,
                  "endLineNumber": 893,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 894,
                  "startColumn": 1,
                  "endLineNumber": 894,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 894,
                  "startColumn": 1,
                  "endLineNumber": 896,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "Okay, I see the test `test_parse_with_comments` failed.\n\n**Analysis:**\n\nThe failure occurred specifically on the assertion `assert_eq!(parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"), ...)`. The error message `Err(Error(Error { input: \"(1 ; item 1\\n 2 ; item 2\\n )\", code: TakeWhileMN }))` indicates that the parser failed while processing the input within the list. Looking at the code, the `separated_list0` combinator used inside `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` likely still uses a separator that only consumes whitespace (`multispace1`), not comments. While the `ws` helper function was updated to handle comments *around* elements, the separator *between* elements was not.\n\n**Motivation:**\n\nTo fix this, the separator logic within the collection parsers needs to be updated to recognize comments in addition to whitespace. We should use the `ws_or_comment1` parser (which handles one or more whitespace characters *or* comments) as the separator.\n\n**Steps:**\n\n1.  I will modify the `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` functions in ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "inlineReference",
          "inlineReference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          }
        },
        {
          "value": ".\n2.  Inside the `separated_list0` calls within these functions, I will replace the existing separator (likely `multispace1` or `ws(multispace1)`) with `ws_or_comment1`.\n3.  I will also update the separator in the `separated_pair` call within `parse_map_entry_internal` to use `ws_or_comment1`.\n\nThis change will allow comments like `; item 1` to be correctly consumed between elements in collections.\n\nI have applied the necessary changes to ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "inlineReference",
          "inlineReference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          }
        },
        {
          "value": ". Please run `cargo test` again to verify the fix.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        }
      ],
      "responseId": "response_97ce777e-0a45-41f8-8dca-d6838475e2f7",
      "result": {
        "timings": {
          "firstProgress": 17956,
          "totalElapsed": 61160
        },
        "metadata": {
          "edits": {
            "workingSet": [],
            "promptInstructions": [],
            "request": "Above is the result of calling one or more tools. The user can see the results of the insert_edit_into_file tool, so you don't need to explain them. But the user can't see the results of other tools, so you should explain them to the user if referencing them in your answer. Continue from where you left off if needed without repeating yourself.",
            "response": "Okay, I see the test `test_parse_with_comments` failed.\n\n**Analysis:**\n\nThe failure occurred specifically on the assertion `assert_eq!(parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"), ...)`. The error message `Err(Error(Error { input: \"(1 ; item 1\\n 2 ; item 2\\n )\", code: TakeWhileMN }))` indicates that the parser failed while processing the input within the list. Looking at the code, the `separated_list0` combinator used inside `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` likely still uses a separator that only consumes whitespace (`multispace1`), not comments. While the `ws` helper function was updated to handle comments *around* elements, the separator *between* elements was not.\n\n**Motivation:**\n\nTo fix this, the separator logic within the collection parsers needs to be updated to recognize comments in addition to whitespace. We should use the `ws_or_comment1` parser (which handles one or more whitespace characters *or* comments) as the separator.\n\n**Steps:**\n\n1.  I will modify the `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` functions in `acl_compiler/src/parser.rs`.\n2.  Inside the `separated_list0` calls within these functions, I will replace the existing separator (likely `multispace1` or `ws(multispace1)`) with `ws_or_comment1`.\n3.  I will also update the separator in the `separated_pair` call within `parse_map_entry_internal` to use `ws_or_comment1`.\n\nThis change will allow comments like `; item 1` to be correctly consumed between elements in collections.\n\nI have applied the necessary changes to `acl_compiler/src/parser.rs`. Please run `cargo test` again to verify the fix."
          },
          "codeBlocks": [],
          "messages": [
            {
              "role": "user",
              "content": "correct this test \"parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),\""
            },
            {
              "role": "assistant",
              "content": "Okay, I see the test `test_parse_with_comments` failed.\n\n**Analysis:**\n\nThe failure occurred specifically on the assertion `assert_eq!(parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"), ...)`. The error message `Err(Error(Error { input: \"(1 ; item 1\\n 2 ; item 2\\n )\", code: TakeWhileMN }))` indicates that the parser failed while processing the input within the list. Looking at the code, the `separated_list0` combinator used inside `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` likely still uses a separator that only consumes whitespace (`multispace1`), not comments. While the `ws` helper function was updated to handle comments *around* elements, the separator *between* elements was not.\n\n**Motivation:**\n\nTo fix this, the separator logic within the collection parsers needs to be updated to recognize comments in addition to whitespace. We should use the `ws_or_comment1` parser (which handles one or more whitespace characters *or* comments) as the separator.\n\n**Steps:**\n\n1.  I will modify the `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` functions in `acl_compiler/src/parser.rs`.\n2.  Inside the `separated_list0` calls within these functions, I will replace the existing separator (likely `multispace1` or `ws(multispace1)`) with `ws_or_comment1`.\n3.  I will also update the separator in the `separated_pair` call within `parse_map_entry_internal` to use `ws_or_comment1`.\n\nThis change will allow comments like `; item 1` to be correctly consumed between elements in collections.\n\nI have applied the necessary changes to `acl_compiler/src/parser.rs`. Please run `cargo test` again to verify the fix."
            }
          ],
          "toolCallRounds": [
            {
              "toolCalls": [
                {
                  "name": "insert_edit_into_file",
                  "arguments": "{\"code\":\"// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\\nfn parse_list_internal(input: \\u0026str) -\\u003e IResult\\u003c\\u0026str, Value\\u003e {\\n    map(\\n        delimited(\\n            ws(char('(')), // Keep ws around opening delimiter\\n            ws(separated_list0(\\n                ws_or_comment1,       // Use ws_or_comment1 as separator\\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\\n            )),\\n            char(')'), // Keep ws around closing delimiter\\n        ),\\n        Value::List,\\n    )(input)\\n}\\n\\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\\nfn parse_vector_internal(input: \\u0026str) -\\u003e IResult\\u003c\\u0026str, Value\\u003e {\\n    map(\\n        delimited(\\n            ws(char('[')), // Keep ws around opening delimiter\\n            ws(separated_list0(\\n                ws_or_comment1,       // Use ws_or_comment1 as separator\\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\\n            )),\\n            char(']'), // Keep ws around closing delimiter\\n        ),\\n        Value::Vector,\\n    )(input)\\n}\\n\\n// Parser for Map Entries: key value - WITHOUT outer ws\\nfn parse_map_entry_internal(input: \\u0026str) -\\u003e IResult\\u003c\\u0026str, (MapKey, Value)\\u003e {\\n    map_res(\\n        separated_pair(\\n            parse_value_internal, // Key parser\\n            ws_or_comment1,       // Use ws_or_comment1 as separator\\n            parse_value_internal, // Value parser without surrounding ws\\n        ),\\n        |(k, v)| {\\n            k.into_map_key()\\n                .ok_or(\\\"Invalid map key type\\\")\\n                .map(|map_key| (map_key, v))\\n        },\\n    )(input)\\n}\\n\\n// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws\\nfn parse_map_internal(input: \\u0026str) -\\u003e IResult\\u003c\\u0026str, Value\\u003e {\\n    map(\\n        delimited(\\n            ws(char('{')), // No ws wrapper\\n            ws(separated_list0(ws_or_comment1, parse_map_entry_internal)), // Use ws_or_comment1 as separator\\n            char('}'), // No ws wrapper\\n        ),\\n        |entries: Vec\\u003c(MapKey, Value)\\u003e| Value::Map(entries.into_iter().collect::\\u003cHashMap\\u003c_, _\\u003e\\u003e()),\\n    )(input)\\n}\\n\\n// ... existing code ...\",\"explanation\":\"Update separators in list, vector, and map parsers to use `ws_or_comment1` instead of `multispace1` to allow comments between elements.\",\"filePath\":\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\"}",
                  "id": "call_MHxxZWwxcVhlb0hhVzl4YWRtRVA__vscode-1745091772389"
                }
              ],
              "toolInputRetry": 0,
              "response": "Okay, I see the failing test `parser::tests::test_parse_with_comments` in the output you provided (#attachment).\n\n**Analysis:**\n\nThe specific failure occurs when parsing the list `(1 ; item 1\\n 2 ; item 2\\n )`. The error message `Err(Error(Error { input: \"(1 ; item 1\\n 2 ; item 2\\n )\", code: TakeWhileMN }))` suggests the parser failed unexpectedly while trying to parse the list content.\n\nLooking at the parser logic for lists (`parse_list_internal`):\n```rust\n// ... inside parse_list_internal ...\n            ws(separated_list0(\n                multispace1,          // Separator handles space BETWEEN elements <--- PROBLEM HERE\n                parse_value_internal, // Element parser\n            )),\n// ...\n```\nThe `separated_list0` combinator uses `multispace1` as the separator between elements. This means it expects *only* one or more whitespace characters between list items (like `1` and `2`). However, in the failing test case, the separator is ` ; item 1\\n ` (space, comment, newline, space), which `multispace1` cannot parse completely.\n\n**Motivation:**\n\nThe separator logic needs to be updated to handle not just whitespace but also comments between collection elements (lists, vectors, map entries). We already have the `ws_or_comment1` parser which handles one or more whitespace characters *or* comments.\n\n**Steps:**\n\n1.  Modify `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` to use `ws_or_comment1` as the separator in their respective `separated_list0` calls instead of `multispace1`.\n2.  This will allow comments and whitespace to exist freely between elements in lists, vectors, and maps.\n\nLet's apply the fix.\n\n"
            },
            {
              "toolCalls": [],
              "toolInputRetry": 0,
              "response": "Okay, I see the test `test_parse_with_comments` failed.\n\n**Analysis:**\n\nThe failure occurred specifically on the assertion `assert_eq!(parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"), ...)`. The error message `Err(Error(Error { input: \"(1 ; item 1\\n 2 ; item 2\\n )\", code: TakeWhileMN }))` indicates that the parser failed while processing the input within the list. Looking at the code, the `separated_list0` combinator used inside `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` likely still uses a separator that only consumes whitespace (`multispace1`), not comments. While the `ws` helper function was updated to handle comments *around* elements, the separator *between* elements was not.\n\n**Motivation:**\n\nTo fix this, the separator logic within the collection parsers needs to be updated to recognize comments in addition to whitespace. We should use the `ws_or_comment1` parser (which handles one or more whitespace characters *or* comments) as the separator.\n\n**Steps:**\n\n1.  I will modify the `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` functions in `acl_compiler/src/parser.rs`.\n2.  Inside the `separated_list0` calls within these functions, I will replace the existing separator (likely `multispace1` or `ws(multispace1)`) with `ws_or_comment1`.\n3.  I will also update the separator in the `separated_pair` call within `parse_map_entry_internal` to use `ws_or_comment1`.\n\nThis change will allow comments like `; item 1` to be correctly consumed between elements in collections.\n\nI have applied the necessary changes to `acl_compiler/src/parser.rs`. Please run `cargo test` again to verify the fix."
            }
          ],
          "toolCallResults": {
            "call_MHxxZWwxcVhlb0hhVzl4YWRtRVA__vscode-1745091772389": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 22,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "<file_after_edit path=\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\">\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "This is the new state of the file after the edit. Base future edits off of this file, no need to read it again, unless a terminal command may have changed it.",
                                  "lineBreakBefore": false
                                },
                                {
                                  "type": 1,
                                  "ctor": 2,
                                  "children": [
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "```rust\nuse nom::{\r\n    branch::alt,\r\n    // Removed is_not\r\n    bytes::complete::{tag, take_while, take_while1, take_while_m_n},\r\n    // Removed unused line_ending, multispace0\r\n    character::complete::{char, multispace1, none_of, not_line_ending},\r\n    combinator::{map, map_res, opt, recognize, value},\r\n    error::ParseError,\r\n    multi::{many0, many1, separated_list0}, // Added many1\r\n    sequence::{delimited, pair, preceded, separated_pair, tuple},\r\n    IResult,\r\n};\r\nuse num_bigint::BigInt;\r\nuse std::collections::HashMap;\r\nuse std::str::FromStr;\r\n\r\nuse crate::ast::{Expr, MapKey, Value}; // Added MapKey\r\n\r\n// Parser for single-line comments starting with ;\r\nfn parse_comment<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\r\n    recognize(preceded(char(';'), opt(not_line_ending)))(input)\r\n}\r\n\r\n// Parser for zero or more whitespace characters or comments\r\nfn ws_or_comment0<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\r\n    recognize(many0(alt((multispace1, parse_comment))))(input)\r\n}\r\n\r\n// Parser for one or more whitespace characters or comments\r\nfn ws_or_comment1<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\r\n    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here\r\n}\r\n\r\n// Helper function to consume whitespace OR comments\r\nfn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>\r\nwhere\r\n    F: FnMut(&'a str) -> IResult<&'a str, O, E>,\r\n{\r\n    delimited(ws_or_comment0, inner, ws_or_comment0) // Use ws_or_comment0\r\n}\r\n\r\n// Parser for Nil\r\nfn parse_nil(input: &str) -> IResult<&str, Value> {\r\n    map(tag(\"nil\"), |_| Value::Nil)(input)\r\n}\r\n\r\n// Parser for Booleans\r\nfn parse_bool(input: &str) -> IResult<&str, Value> {\r\n    alt((\r\n        value(Value::Bool(true), tag(\"true\")),\r\n        value(Value::Bool(false), tag(\"false\")),\r\n    ))(input)\r\n}\r\n\r\n// Parser for Integers (Ensure it doesn't parse floats)\r\nfn parse_int(input: &str) -> IResult<&str, Value> {\r\n    // Use recognize first to capture the potential integer part\r\n    let (remaining, recognized) =\r\n        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;\r\n\r\n    // Check the character immediately after the recognized part in the original input\r\n    match remaining.chars().next() {\r\n        // If the next char indicates a float, fail parsing the integer\r\n        Some('.') | Some('e') | Some('E') => {\r\n            Err(nom::Err::Error(nom::error::Error::new(\r\n                input,\r\n                nom::error::ErrorKind::Verify,\r\n            ))) // Indicate verification failure\r\n        }\r\n        // Otherwise, proceed to convert the recognized part to BigInt\r\n        _ => {\r\n            match BigInt::from_str(recognized) {\r\n                Ok(val) => Ok((remaining, Value::Int(val))),\r\n                Err(_) => Err(nom::Err::Error(nom::error::Error::new(\r\n                    recognized,\r\n                    nom::error::ErrorKind::MapRes,\r\n                ))), // Error during BigInt conversion\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Parser for Floats (recognizes the pattern first)\r\n// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan\r\n// *** Must contain '.' or 'e'/'E' to distinguish from integers ***\r\n\r\n// Helper parser for standard float patterns (excluding inf/nan)\r\nfn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {\r\n    recognize(pair(\r\n        opt(alt((char('+'), char('-')))), // Optional sign\r\n        alt((\r\n            // Case 1: Digits + '.' + Optional Digits + Optional Exponent\r\n            recognize(tuple((\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                char('.'),\r\n                take_while(|c: char| c.is_digit(10)), // Optional digits after dot\r\n                opt(tuple((\r\n                    // Optional exponent\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                ))),\r\n            ))),\r\n            // Case 2: '.' + Digits + Optional Exponent\r\n            recognize(tuple((\r\n                char('.'),\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                opt(tuple((\r\n                    // Optional exponent\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                ))),\r\n            ))),\r\n            // Case 3: Digits + Exponent (No decimal point)\r\n            recognize(tuple((\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                // Exponent MUST be present here\r\n                tuple((\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                )),\r\n            ))),\r\n        )),\r\n    ))(input)\r\n}\r\n\r\nfn parse_float(input: &str) -> IResult<&str, Value> {\r\n    map_res(\r\n        alt((\r\n            // Handle inf, -inf, nan first as they are distinct patterns\r\n            tag(\"inf\"),\r\n            tag(\"-inf\"),\r\n            tag(\"+inf\"),\r\n            tag(\"nan\"),\r\n            // Use the helper for standard float patterns\r\n            parse_standard_float_pattern,\r\n        )),\r\n        |s: &str| {\r\n            // Same mapping logic as before\r\n            match s {\r\n                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),\r\n                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),\r\n                \"nan\" => Ok(Value::Float(f64::NAN)),\r\n                _ => s.parse::<f64>().map(Value::Float),\r\n            }\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Helper for parsing a single escaped character\r\nfn parse_escape_sequence(input: &str) -> IResult<&str, char> {\r\n    preceded(\r\n        char('\\\\'),\r\n        alt((\r\n            value('\\\\', tag(\"\\\\\")),\r\n            value('\\\"', tag(\"\\\"\")),\r\n            value('\\n', tag(\"n\")),\r\n            value('\\r', tag(\"r\")),\r\n            value('\\t', tag(\"t\")),\r\n            // TODO: Add more escapes like unicode? \\u{...}\r\n        )),\r\n    )(input)\r\n}\r\n\r\n// Helper for parsing a single non-escape, non-quote character\r\nfn parse_normal_char(input: &str) -> IResult<&str, char> {\r\n    none_of(\"\\\\\\\"\")(input)\r\n}\r\n\r\n// Parser for string content (handles escapes)\r\nfn parse_string_content(input: &str) -> IResult<&str, String> {\r\n    map(\r\n        many0(alt((parse_escape_sequence, parse_normal_char))),\r\n        |chars: Vec<char>| chars.into_iter().collect(),\r\n    )(input)\r\n}\r\n\r\n// Parser for Strings using the manual content parser\r\nfn parse_string(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            char('\"'),\r\n            parse_string_content, // Use the new content parser\r\n            char('\"'),\r\n        ),\r\n        Value::String,\r\n    )(input)\r\n}\r\n\r\n// Parser for Symbols / Keywords\r\n// Must not be nil, true, false, or a number.\r\n// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.\r\n// Continues with non-quote, non-paren/bracket/brace, non-whitespace.\r\nfn is_symbol_start_char(c: char) -> bool {\r\n    // Exclude digits from starting characters\r\n    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)\r\n}\r\n\r\nfn is_symbol_char(c: char) -> bool {\r\n    // Allow digits inside, but not at the start (handled by is_symbol_start_char)\r\n    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)\r\n}\r\n\r\nfn parse_symbol(input: &str) -> IResult<&str, Value> {\r\n    map_res(\r\n        recognize(tuple((\r\n            take_while_m_n(1, 1, is_symbol_start_char),\r\n            take_while(is_symbol_char),\r\n        ))),\r\n        |s: &str| {\r\n            // Check if it's a reserved keyword or number pattern that failed other parsers\r\n            match s {\r\n                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool\r\n                _ => {\r\n                    // Basic check to prevent parsing numbers as symbols\r\n                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')\r\n                        && s.parse::<f64>().is_ok()\r\n                    {\r\n                        Err(\"Numeric literal used as symbol\")\r\n                    } else {\r\n                        Ok(Value::Symbol(s.to_string()))\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Parser for Keywords (e.g., :my-keyword)\r\nfn parse_keyword(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        preceded(\r\n            char(':'),\r\n            // Use the updated symbol character rules\r\n            recognize(tuple((\r\n                take_while_m_n(1, 1, is_symbol_start_char),\r\n                take_while(is_symbol_char),\r\n            ))),\r\n        ),\r\n        |s: &str| Value::Keyword(s.to_string()),\r\n    )(input)\r\n}\r\n\r\n// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\r\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('(')), // Keep ws around opening delimiter\r\n            ws(separated_list0(\r\n                ws_or_comment1,       // Use ws_or_comment1 as separator\r\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\r\n            )),\r\n            char(')'), // Keep ws around closing delimiter\r\n        ),\r\n        Value::List,\r\n    )(input)\r\n}\r\n\r\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\r\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('[')), // Keep ws around opening delimiter\r\n            ws(separated_list0(\r\n                ws_or_comment1,       // Use ws_or_comment1 as separator\r\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\r\n            )),\r\n            char(']'), // Keep ws around closing delimiter\r\n        ),\r\n        Value::Vector,\r\n    )(input)\r\n}\r\n\r\n// Parser for Map Entries: key value - WITHOUT outer ws\r\nfn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {\r\n    map_res(\r\n        separated_pair(\r\n            parse_value_internal, // Key parser\r\n            ws_or_comment1,       // Use ws_or_comment1 as separator\r\n            parse_value_internal, // Value parser without surrounding ws\r\n        ),\r\n        |(k, v)| {\r\n            k.into_map_key()\r\n                .ok_or(\"Invalid map key type\")\r\n                .map(|map_key| (map_key, v))\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws\r\nfn parse_map_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('{')), // No ws wrapper\r\n            ws(separated_list0(ws_or_comment1, parse_map_entry_internal)), // Use ws_or_comment1 as separator\r\n            char('}'), // No ws wrapper\r\n        ),\r\n        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),\r\n    )(input)\r\n}\r\n\r\n// Define the actual recursive parser function\r\nfn parse_value_internal(input: &str) -> IResult<&str, Value> {\r\n    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value\r\n    alt((\r\n        parse_list_internal, // Use internal versions\r\n        parse_vector_internal,\r\n        parse_map_internal,\r\n        parse_nil,\r\n        parse_bool,\r\n        parse_float,\r\n        parse_int,\r\n        parse_string,\r\n        parse_keyword,\r\n        parse_symbol,\r\n    ))(input)\r\n}\r\n\r\n// Top-level parser for a single value/expression, handles outer whitespace\r\npub fn parse_value(input: &str) -> IResult<&str, Value> {\r\n    ws(parse_value_internal)(input) // Add ws wrapper here at the top level\r\n}\r\n\r\n// Top-level parser (for now, just parses a single value into an Expr)\r\npub fn parse_expr(input: &str) -> IResult<&str, Expr> {\r\n    // Use the top-level parse_value which handles outer whitespace\r\n    map(parse_value, Expr::Literal)(input)\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use num_bigint::ToBigInt;\r\n    use std::collections::HashMap;\r\n\r\n    // Helper for float comparison, especially NaNs\r\n    fn assert_float_eq(v1: &Value, v2: &Value) {\r\n        match (v1, v2) {\r\n            (Value::Float(f1), Value::Float(f2)) => {\r\n                if f1.is_nan() && f2.is_nan() {\r\n                    // NaNs are equal in this context\r\n                } else {\r\n                    assert_eq!(f1, f2);\r\n                }\r\n            }\r\n            _ => panic!(\"Expected two Float values\"),\r\n        }\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_nil() {\r\n        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));\r\n        assert!(parse_nil(\"Nil\").is_err());\r\n        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_bool() {\r\n        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));\r\n        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));\r\n        assert!(parse_bool(\"True\").is_err());\r\n        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_int() {\r\n        assert_eq!(\r\n            parse_int(\"123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(\r\n            parse_int(\"-45\"),\r\n            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));\r\n        // Still consumes only digits, leaving trailing chars\r\n        assert_eq!(\r\n            parse_int(\"123a\"),\r\n            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert!(parse_int(\"abc\").is_err());\r\n        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent\r\n                                              // These assertions should now pass\r\n        assert!(parse_int(\"1.2\").is_err());\r\n        assert!(parse_int(\"1e5\").is_err());\r\n        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_float() {\r\n        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));\r\n        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));\r\n        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot\r\n        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot\r\n        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent\r\n        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent\r\n        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));\r\n        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));\r\n        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));\r\n        assert_float_eq(\r\n            &parse_float(\"-inf\").unwrap().1,\r\n            &Value::Float(f64::NEG_INFINITY),\r\n        );\r\n        assert_float_eq(\r\n            &parse_float(\"+inf\").unwrap().1,\r\n            &Value::Float(f64::INFINITY),\r\n        );\r\n        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));\r\n        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"\r\n        assert!(parse_float(\".\").is_err());\r\n        assert!(parse_float(\"e5\").is_err());\r\n        // Ensure it doesn't consume integers meant for parse_int\r\n        assert!(parse_float(\"123\").is_err()); // No dot or exponent\r\n        assert!(parse_float(\"-45\").is_err()); // No dot or exponent\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_string() {\r\n        // This should finally pass\r\n        assert_eq!(\r\n            parse_string(r#\"\"\"\"#),\r\n            Ok((\"\", Value::String(\"\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"hello\"\"#),\r\n            Ok((\"\", Value::String(\"hello\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"hello world\"\"#),\r\n            Ok((\"\", Value::String(\"hello world\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),\r\n            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))\r\n        );\r\n        assert!(parse_string(r#\"\"unterminated\"#).is_err());\r\n        assert!(parse_string(r#\"no quotes\"#).is_err());\r\n        // This should still fail as '\\e' is not a valid escape sequence here\r\n        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_symbol() {\r\n        assert_eq!(\r\n            parse_symbol(\"abc\"),\r\n            Ok((\"\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"a-b_c?\"),\r\n            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))\r\n        );\r\n        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));\r\n        assert_eq!(\r\n            parse_symbol(\"set!\"),\r\n            Ok((\"\", Value::Symbol(\"set!\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"valid.symbol#1\"),\r\n            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"a1\"),\r\n            Ok((\"\", Value::Symbol(\"a1\".to_string())))\r\n        );\r\n\r\n        // Should not parse keywords or numbers\r\n        assert!(parse_symbol(\"nil\").is_err());\r\n        assert!(parse_symbol(\"true\").is_err());\r\n        assert!(parse_symbol(\"false\").is_err());\r\n        assert!(parse_symbol(\"123\").is_err());\r\n        assert!(parse_symbol(\"-45\").is_err());\r\n        assert!(parse_symbol(\"1.23\").is_err());\r\n        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword\r\n\r\n        // Test partial consumption\r\n        assert_eq!(\r\n            parse_symbol(\"abc def\"),\r\n            Ok((\" def\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"abc)\"),\r\n            Ok((\")\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n\r\n        // Invalid start characters\r\n        assert!(parse_symbol(\".dotstart\").is_err());\r\n        assert!(parse_symbol(\"#hashstart\").is_err());\r\n        assert!(parse_symbol(\":colonstart\").is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_keyword() {\r\n        assert_eq!(\r\n            parse_keyword(\":abc\"),\r\n            Ok((\"\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":a-b_c?\"),\r\n            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":+\"),\r\n            Ok((\"\", Value::Keyword(\"+\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":set!\"),\r\n            Ok((\"\", Value::Keyword(\"set!\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":valid.keyword#1\"),\r\n            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":a1\"), // Digit allowed inside\r\n            Ok((\"\", Value::Keyword(\"a1\".to_string())))\r\n        );\r\n\r\n        // Invalid keywords\r\n        assert!(parse_keyword(\"abc\").is_err()); // Missing colon\r\n        assert!(parse_keyword(\":\").is_err()); // Colon only\r\n                                              // This assertion should now pass\r\n        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon\r\n        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon\r\n\r\n        // Test partial consumption\r\n        assert_eq!(\r\n            parse_keyword(\":abc def\"),\r\n            Ok((\" def\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":abc)\"),\r\n            Ok((\")\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_list() {\r\n        // Use the public parse_value or parse_list_internal directly?\r\n        // Tests should ideally use the public interface if possible.\r\n        // Let's test parse_value with list input.\r\n        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));\r\n        assert_eq!(\r\n            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Bool(true),\r\n                    Value::String(\"hello\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value\r\n            Ok((\r\n                \"\", // parse_value consumes all surrounding whitespace\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::List(vec![\r\n                        Value::Int(2.to_bigint().unwrap()),\r\n                        Value::Int(3.to_bigint().unwrap()),\r\n                    ]),\r\n                    Value::Nil,\r\n                ])\r\n            ))\r\n        );\r\n        assert!(parse_value(\"(1 2\").is_err()); // Unclosed\r\n        assert!(parse_list_internal(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_vector() {\r\n        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));\r\n        assert_eq!(\r\n            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Bool(true),\r\n                    Value::String(\"hello\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"[ 1 [ 2 3 ] nil ]\"),\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Vector(vec![\r\n                        Value::Int(2.to_bigint().unwrap()),\r\n                        Value::Int(3.to_bigint().unwrap()),\r\n                    ]),\r\n                    Value::Nil,\r\n                ])\r\n            ))\r\n        );\r\n        assert!(parse_value(\"[1 2\").is_err()); // Unclosed\r\n        assert!(parse_vector_internal(\"(1 2)\").is_err()); // Wrong brackets\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_map() {\r\n        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));\r\n\r\n        let mut expected_map1 = HashMap::new();\r\n        expected_map1.insert(\r\n            MapKey::Keyword(\"a\".to_string()),\r\n            Value::Int(1.to_bigint().unwrap()),\r\n        );\r\n        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));\r\n\r\n        assert_eq!(\r\n            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value\r\n            Ok((\"\", Value::Map(expected_map1)))\r\n        );\r\n\r\n        let mut expected_map2 = HashMap::new();\r\n        let mut inner_map = HashMap::new();\r\n        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);\r\n        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));\r\n\r\n        assert_eq!(\r\n            parse_value(\"{ outer { 10 nil } }\"),\r\n            Ok((\"\", Value::Map(expected_map2)))\r\n        );\r\n\r\n        // Test invalid key type\r\n        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key\r\n        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key\r\n\r\n        // Test uneven number of elements\r\n        assert!(parse_value(\"{ :a 1 :b }\").is_err());\r\n        assert!(parse_value(\"{ :a }\").is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_value_literals() {\r\n        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));\r\n        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));\r\n        assert_eq!(\r\n            parse_value(\"\\t -99 \\n\"),\r\n            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))\r\n        );\r\n        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));\r\n        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));\r\n        assert_eq!(\r\n            parse_value(r#\" \"hello \\n world\" \"#),\r\n            Ok((\"\", Value::String(\"hello \\n world\".to_string())))\r\n        );\r\n        // Test order sensitivity\r\n        assert_eq!(\r\n            parse_value(\"123\"), // Should be Int\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float\r\n        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float\r\n        assert_eq!(\r\n            parse_value(\"  my-symbol  \"),\r\n            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\" :a-keyword? \"),\r\n            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))\r\n        );\r\n\r\n        // Test order sensitivity again\r\n        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol\r\n        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol\r\n        assert_eq!(\r\n            parse_value(\"123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        ); // Not a symbol\r\n        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_value_collections() {\r\n        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));\r\n        // This assertion should now pass as parse_float won't consume \"1\"\r\n        assert_eq!(\r\n            parse_value(\" [ 1 ] \"),\r\n            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))\r\n        );\r\n        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));\r\n        assert_eq!(\r\n            parse_value(\"( [ :a ] { } ) \"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),\r\n                    Value::Map(HashMap::new()),\r\n                ])\r\n            ))\r\n        );\r\n        // Add a test with floats inside collections\r\n        // Using helper method to extract value for comparison\r\n        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;\r\n        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_expr_literal() {\r\n        assert_eq!(\r\n            parse_expr(\" 12345 \"),\r\n            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" false\"),\r\n            Ok((\"\", Expr::Literal(Value::Bool(false))))\r\n        );\r\n        // Using if let to handle the result and avoid unreachable pattern warning\r\n        let parse_result = parse_expr(\" -inf \");\r\n        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");\r\n        if let Ok((_, parsed_expr)) = parse_result {\r\n            let expected_value = Value::Float(f64::NEG_INFINITY);\r\n            match parsed_expr {\r\n                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),\r\n                // This branch might be unreachable if parse_expr only returns Expr::Literal\r\n                #[allow(unreachable_patterns)]\r\n                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),\r\n            }\r\n        }\r\n        assert_eq!(\r\n            parse_expr(r#\" \"string\" \"#),\r\n            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" some_symbol \"),\r\n            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" :keyword123 \"),\r\n            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" (1 2) \"),\r\n            Ok((\r\n                \"\",\r\n                Expr::Literal(Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap())\r\n                ]))\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" [ :a ] \"),\r\n            Ok((\r\n                \"\",\r\n                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))\r\n            ))\r\n        );\r\n        let mut expected_map = HashMap::new();\r\n        expected_map.insert(\r\n            MapKey::String(\"key\".to_string()),\r\n            Value::Int(100.to_bigint().unwrap()),\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" { \\\"key\\\" 100 } \"),\r\n            Ok((\"\", Expr::Literal(Value::Map(expected_map))))\r\n        );\r\n    }\r\n\r\n    // New tests for parsing comments\r\n    #[test]\r\n    fn test_parse_with_comments() {\r\n        // Comments before value\r\n        assert_eq!(\r\n            parse_value(\"; this is a comment\\n 123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        // Comments after value\r\n        assert_eq!(\r\n            parse_value(\"true ; another comment\"),\r\n            Ok((\"\", Value::Bool(true)))\r\n        );\r\n        // Comments surrounding value\r\n        assert_eq!(\r\n            parse_value(\"; comment before\\n nil ; comment after\"),\r\n            Ok((\"\", Value::Nil))\r\n        );\r\n        // Comments inside list\r\n        assert_eq!(\r\n            parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap()),\r\n                ])\r\n            ))\r\n        );\r\n        // Comments inside vector\r\n        assert_eq!(\r\n            parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"),\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Keyword(\"a\".to_string()),\r\n                    Value::Keyword(\"b\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        // Comments inside map\r\n        let mut expected_map = HashMap::new();\r\n        expected_map.insert(\r\n            MapKey::String(\"key\".to_string()),\r\n            Value::Int(1.to_bigint().unwrap()),\r\n        );\r\n        expected_map.insert(MapKey::Keyword(\"another\".to_string()), Value::Bool(false));\r\n        assert_eq!(\r\n            parse_value(\"{ \\\"key\\\" ; map key \\n 1 ; map value \\n :another false ; next pair \\n }\"),\r\n            Ok((\"\", Value::Map(expected_map)))\r\n        );\r\n        // Comment within a string (should be part of the string)\r\n        assert_eq!(\r\n            parse_value(r#\"\"a string ; with a comment inside\"\"#),\r\n            Ok((\r\n                \"\",\r\n                Value::String(\"a string ; with a comment inside\".to_string())\r\n            ))\r\n        );\r\n        // Multiple comments and whitespace\r\n        assert_eq!(\r\n            parse_value(\"  ; comment 1 \\n   ( ; comment 2 \\n 1 \\n ; comment 3 \\n ) ; comment 4 \"),\r\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))\r\n        );\r\n        // Empty input with comments\r\n        assert!(parse_value(\"; only comment\").is_err()); // Expecting a value, not just comment\r\n        assert!(parse_value(\" ; ; ; \").is_err()); // Expecting a value\r\n\r\n        // Test with parse_expr\r\n        assert_eq!(\r\n            parse_expr(\"; comment before expr\\n 42\"),\r\n            Ok((\"\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_comment_only_input() {\r\n        // Test cases where the input contains only comments or whitespace and comments\r\n        let result = parse_value(\"; just a comment\");\r\n        assert!(\r\n            result.is_err(),\r\n            \"Parsing only a comment should fail when expecting a value\"\r\n        );\r\n\r\n        let result = parse_value(\"  ; comment with leading space \\n ; another comment \");\r\n        assert!(\r\n            result.is_err(),\r\n            \"Parsing only comments and whitespace should fail\"\r\n        );\r\n\r\n        // Ensure parse_expr also handles this correctly\r\n        let result_expr = parse_expr(\"; comment for expr\");\r\n        assert!(\r\n            result_expr.is_err(),\r\n            \"parse_expr should fail on comment-only input\"\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_comment_at_eof() {\r\n        // Test parsing a value followed immediately by EOF after a comment\r\n        assert_eq!(\r\n            parse_value(\"123 ; comment at end\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"(1 2) ; list comment\"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap())\r\n                ])\r\n            ))\r\n        );\r\n    }\r\n}\r\n\r\n// Helper method added to Value for testing convenience (optional)\r\nimpl Value {\r\n    fn get_vector(&self) -> Option<&Vec<Value>> {\r\n        match self {\r\n            Value::Vector(v) => Some(v),\r\n            _ => None,\r\n        }\r\n    }\r\n}\n```",
                                          "references": [],
                                          "lineBreakBefore": true
                                        }
                                      ],
                                      "references": []
                                    }
                                  ],
                                  "references": []
                                },
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "priority": 1,
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "</file_after_edit>",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 2,
                              "priority": 9007199254740991,
                              "text": "\n",
                              "lineBreakBefore": false
                            }
                          ],
                          "references": []
                        }
                      ],
                      "references": []
                    }
                  }
                }
              ]
            }
          },
          "modelMessageId": "7f05998c-15ed-477d-8804-cd6ecd6bf3e9",
          "responseId": "5b6d85dd-f473-4d17-b282-af886f5673f0",
          "sessionId": "ac71aae9-8aee-46b8-be3b-a00a6bc25bf3",
          "agentId": "github.copilot.editsAgent"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editsAgent",
        "description": "Edit files in your workspace in agent mode",
        "when": "config.chat.agent.enabled && !chatAgentModeDisallowed",
        "metadata": {
          "themeIcon": {
            "id": "tools"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "welcomeMessageContent": {
            "icon": {
              "id": "copilot-large"
            },
            "title": "Edit with Copilot",
            "message": {
              "value": "Ask Copilot to edit your files in [agent mode](https://aka.ms/vscode-copilot-agent). Copilot will automatically use multiple requests to pick files to edit, run terminal commands, and iterate on errors.\n\nCopilot is powered by AI, so mistakes are possible. Review output carefully before use.",
              "supportThemeIcons": false,
              "supportHtml": false,
              "uris": {
                "https://aka.ms/vscode-copilot-agent": {
                  "$mid": 1,
                  "external": "https://aka.ms/vscode-copilot-agent",
                  "path": "/vscode-copilot-agent",
                  "scheme": "https",
                  "authority": "aka.ms"
                }
              }
            }
          }
        },
        "name": "agent",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "isToolsAgent": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\.github\\copilot-instructions.md",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "path": "/h:/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1745098318355
    },
    {
      "requestId": "request_ee4a9768-c9e9-4ac6-8677-e564ed232ef8",
      "message": {
        "text": "correct this test parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\")",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 69
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 70
            },
            "text": "correct this test parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\")",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": [
          {
            "id": "copilot_getTerminalLastCommand",
            "name": "Terminal Last Command",
            "fullName": "Terminal Last Command",
            "icon": {
              "id": "terminal"
            },
            "isTool": true
          },
          {
            "id": "vscode.implicit.selection",
            "name": "file:parser.rs",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
                "_sep": 1,
                "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 798,
                "startColumn": 13,
                "endLineNumber": 798,
                "endColumn": 64,
                "selectionStartLineNumber": 798,
                "selectionStartColumn": 13,
                "positionLineNumber": 798,
                "positionColumn": 64
              }
            },
            "isFile": true,
            "modelDescription": "User's active selection"
          }
        ]
      },
      "response": [
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Getting last terminal command",
          "pastTenseMessage": "Got last terminal command",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "1d6d3d86-41b1-4827-a213-f1e12380017a"
        },
        {
          "value": "**Analysis:**\n\n1.  The user provided the output of `cargo test` (#attachment), which shows that the test `parser::tests::test_parse_with_comments` is failing.\n2.  The specific failing assertion within that test is related to parsing a vector with comments between elements: `parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\")`.\n3.  The error message is `left: Err(Error(Error { input: \"[ :a ; keyword a \\n :b ; keyword b ]\", code: TakeWhileMN }))`. The `TakeWhileMN` error code usually originates from parsers that expect a minimum number of characters matching a condition, such as `take_while_m_n`. This combinator is used in our `parse_symbol` and `parse_keyword` functions.\n4.  The previous change correctly updated the *separator* in `separated_list0` to `ws_or_comment1`, allowing comments *between* elements. However, the failure persists.\n5.  Let's re-examine the structure of `parse_vector_internal`:\n    ```rust\n    delimited(\n        ws(char('[')), // Consumes ws/comment before '[' and after '['\n        ws(separated_list0( // Consumes ws/comment before list and after list\n            ws_or_comment1,       // Separator consumes ws/comment between elements\n            parse_value_internal, // Element parser\n        )),\n        char(']') // Expects ']' immediately after the list content + trailing ws/comment\n    )\n    ```\n6.  The issue might be the nested `ws` around `separated_list0`. Let's trace the input `[ :a ; keyword a \\n :b ; keyword b ]`:\n    *   `ws(char('['))` consumes up to and including the space after `[`. Remaining: `:a ; keyword a \\n :b ; keyword b ]`.\n    *   `ws(separated_list0(...))` starts.\n        *   The outer `ws` consumes nothing initially.\n        *   `separated_list0` parses `:a`. Remaining: ` ; keyword a \\n :b ; keyword b ]`.\n        *   Separator `ws_or_comment1` consumes ` ; keyword a \\n `. Remaining: `:b ; keyword b ]`.\n        *   `separated_list0` parses `:b`. Remaining: ` ; keyword b ]`.\n        *   Separator `ws_or_comment1` consumes ` ; keyword b `. Remaining: `]`.\n        *   `separated_list0` finishes, returning the list `[:a, :b]`. Remaining input for `separated_list0` is `]`.\n        *   The outer `ws` consumes trailing whitespace/comments (none in this case) from the remaining `]`. It still leaves `]`.\n    *   Finally, `char(']')` is called on the remaining `]`. It consumes `]` and succeeds.\n\n7.  The trace suggests the logic *should* work. However, the `TakeWhileMN` error persists. Let's reconsider the structure. Perhaps the `ws` around `separated_list0` is too greedy or interacts poorly. An alternative structure is to only apply `ws` around the delimiters and let the separator handle the space *between* elements.\n\n**Motivation:**\n\nThe current parsing structure for collections, while seemingly correct in tracing, still leads to a failure when parsing keywords within a vector interspersed with comments. The nested `ws` combinator around `separated_list0` might be causing an unexpected interaction. To simplify the whitespace and comment handling, I will refactor the collection parsers (`parse_list_internal`, `parse_vector_internal`, `parse_map_internal`) to apply `ws` only to the opening and closing delimiters, relying solely on the `ws_or_comment1` separator provided to `separated_list0` to handle the space and comments *between* elements.\n\n**Steps:**\n\n1.  Modify `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` in ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "inlineReference",
          "inlineReference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          }
        },
        {
          "value": ".\n2.  Remove the `ws()` wrapper from the `separated_list0(...)` call (the middle argument of `delimited`).\n3.  Add a `ws()` wrapper around the closing delimiter parser (`char(')')`, `char(']')`, `char('}')`) (the third argument of `delimited`).\n\nThis ensures whitespace/comments are handled:\n*   Before the opening delimiter (by `ws(char('('))`).\n*   Between elements (by the `ws_or_comment1` separator).\n*   Before the closing delimiter (by `ws(char(')'))`).\n\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "819fe17a-01d9-4b5a-9cdc-735d84962a14"
        },
        {
          "kind": "toolInvocationSerialized",
          "presentation": "hidden",
          "invocationMessage": "Using \"Edit File\"",
          "isConfirmed": true,
          "isComplete": true,
          "toolCallId": "fc9945fa-d0e3-490a-a31a-a93ad85575df"
        },
        {
          "kind": "undoStop",
          "id": "c559f43a-79a2-4191-a1b5-607a6b7f9f5c"
        },
        {
          "value": "\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "isEdit": true
        },
        {
          "value": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('(')), // Keep ws around opening delimiter\n            separated_list0(\n                ws_or_comment1,       // Use ws_or_comment1 as separator\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\n            ),\n            ws(char(')')), // Apply ws to closing delimiter\n        ),\n        Value::List,\n    )(input)\n}\n\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('[')), // Keep ws around opening delimiter\n            separated_list0(\n                ws_or_comment1,       // Use ws_or_comment1 as separator\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\n            ),\n            ws(char(']')), // Apply ws to closing delimiter\n        ),\n        Value::Vector,\n    )(input)\n}\n\n// ... existing code ...\n\n// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws\nfn parse_map_internal(input: &str) -> IResult<&str, Value> {\n    map(\n        delimited(\n            ws(char('{')), // Keep ws around opening delimiter\n            separated_list0(ws_or_comment1, parse_map_entry_internal), // Use ws_or_comment1 as separator\n            ws(char('}')), // Apply ws to closing delimiter\n        ),\n        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),\n    )(input)\n}\n\n// ... existing code ...\n````\n",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "use nom::{",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    branch::alt,",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "    // Removed is_not",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    bytes::complete::{tag, take_while, take_while1, take_while_m_n},",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "    // Removed unused line_ending, multispace0",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    character::complete::{char, multispace1, none_of, not_line_ending},",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    combinator::{map, map_res, opt, recognize, value},",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    error::ParseError,",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    multi::{many0, many1, separated_list0}, // Added many1",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    sequence::{delimited, pair, preceded, separated_pair, tuple},",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "    IResult,",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "};",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 3
                }
              }
            ],
            [
              {
                "text": "use num_bigint::BigInt;",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "use std::str::FromStr;",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "use crate::ast::{Expr, MapKey, Value}; // Added MapKey",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for single-line comments starting with ;",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "fn parse_comment<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "    recognize(preceded(char(';'), opt(not_line_ending)))(input)",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for zero or more whitespace characters or comments",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "fn ws_or_comment0<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "    recognize(many0(alt((multispace1, parse_comment))))(input)",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for one or more whitespace characters or comments",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn ws_or_comment1<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper function to consume whitespace OR comments",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "fn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "where",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "    F: FnMut(&'a str) -> IResult<&'a str, O, E>,",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "{",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "    delimited(ws_or_comment0, inner, ws_or_comment0) // Use ws_or_comment0",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Nil",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "fn parse_nil(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    map(tag(\"nil\"), |_| Value::Nil)(input)",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Booleans",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "fn parse_bool(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(true), tag(\"true\")),",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        value(Value::Bool(false), tag(\"false\")),",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Integers (Ensure it doesn't parse floats)",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_int(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    // Use recognize first to capture the potential integer part",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "    let (remaining, recognized) =",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Check the character immediately after the recognized part in the original input",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "    match remaining.chars().next() {",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        // If the next char indicates a float, fail parsing the integer",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        Some('.') | Some('e') | Some('E') => {",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                input,",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                nom::error::ErrorKind::Verify,",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            ))) // Indicate verification failure",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        // Otherwise, proceed to convert the recognized part to BigInt",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        _ => {",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "            match BigInt::from_str(recognized) {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                Ok(val) => Ok((remaining, Value::Int(val))),",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "                Err(_) => Err(nom::Err::Error(nom::error::Error::new(",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                    recognized,",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                    nom::error::ErrorKind::MapRes,",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "                ))), // Error during BigInt conversion",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Floats (recognizes the pattern first)",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "// *** Must contain '.' or 'e'/'E' to distinguish from integers ***",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper parser for standard float patterns (excluding inf/nan)",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "    recognize(pair(",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        opt(alt((char('+'), char('-')))), // Optional sign",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Case 1: Digits + '.' + Optional Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while(|c: char| c.is_digit(10)), // Optional digits after dot",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 2: '.' + Digits + Optional Exponent",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                char('.'),",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                opt(tuple((",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "                    // Optional exponent",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                ))),",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            // Case 3: Digits + Exponent (No decimal point)",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                // Exponent MUST be present here",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                tuple((",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    alt((char('e'), char('E'))),",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "                    opt(alt((char('+'), char('-')))),",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                    take_while1(|c: char| c.is_digit(10)),",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "                )),",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_float(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            // Handle inf, -inf, nan first as they are distinct patterns",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "            tag(\"inf\"),",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            tag(\"-inf\"),",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"+inf\"),",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            tag(\"nan\"),",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            // Use the helper for standard float patterns",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            parse_standard_float_pattern,",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Same mapping logic as before",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "                \"nan\" => Ok(Value::Float(f64::NAN)),",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                _ => s.parse::<f64>().map(Value::Float),",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single escaped character",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "fn parse_escape_sequence(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    preceded(",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        char('\\\\'),",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        alt((",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            value('\\\\', tag(\"\\\\\")),",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\\"', tag(\"\\\"\")),",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            value('\\n', tag(\"n\")),",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\r', tag(\"r\")),",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            value('\\t', tag(\"t\")),",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            // TODO: Add more escapes like unicode? \\u{...}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        )),",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper for parsing a single non-escape, non-quote character",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "fn parse_normal_char(input: &str) -> IResult<&str, char> {",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "    none_of(\"\\\\\\\"\")(input)",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for string content (handles escapes)",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_string_content(input: &str) -> IResult<&str, String> {",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        many0(alt((parse_escape_sequence, parse_normal_char))),",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        |chars: Vec<char>| chars.into_iter().collect(),",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Strings using the manual content parser",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "fn parse_string(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            parse_string_content, // Use the new content parser",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "            char('\"'),",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::String,",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Symbols / Keywords",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "// Must not be nil, true, false, or a number.",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "// Continues with non-quote, non-paren/bracket/brace, non-whitespace.",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_start_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "    // Exclude digits from starting characters",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn is_symbol_char(c: char) -> bool {",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "    // Allow digits inside, but not at the start (handled by is_symbol_start_char)",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "fn parse_symbol(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        recognize(tuple((",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "            take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "            take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        ))),",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        |s: &str| {",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            // Check if it's a reserved keyword or number pattern that failed other parsers",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            match s {",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 135
                }
              }
            ],
            [
              {
                "text": "                _ => {",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "                    // Basic check to prevent parsing numbers as symbols",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "                        && s.parse::<f64>().is_ok()",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "                    {",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                        Err(\"Numeric literal used as symbol\")",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "                    } else {",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                        Ok(Value::Symbol(s.to_string()))",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "                    }",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Keywords (e.g., :my-keyword)",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "fn parse_keyword(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        preceded(",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            char(':'),",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "            // Use the updated symbol character rules",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            recognize(tuple((",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "                take_while_m_n(1, 1, is_symbol_start_char),",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                take_while(is_symbol_char),",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            ))),",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |s: &str| Value::Keyword(s.to_string()),",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "fn parse_list_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('(')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ws_or_comment1,       // Use ws_or_comment1 as separator",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            ws(char(')')), // Apply ws to closing delimiter",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::List,",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "fn parse_vector_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('[')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "            separated_list0(",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ws_or_comment1,       // Use ws_or_comment1 as separator",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "                parse_value_internal, // Element parser itself doesn't consume surrounding ws",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 94
                }
              }
            ],
            [
              {
                "text": "            ),",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 16
                }
              }
            ],
            [
              {
                "text": "            ws(char(']')), // Apply ws to closing delimiter",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        Value::Vector,",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Map Entries: key value - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "fn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "    map_res(",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "        separated_pair(",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "            parse_value_internal, // Key parser",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "            ws_or_comment1,       // Use ws_or_comment1 as separator",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "            parse_value_internal, // Value parser without surrounding ws",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |(k, v)| {",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            k.into_map_key()",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "                .ok_or(\"Invalid map key type\")",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                .map(|map_key| (map_key, v))",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        },",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "fn parse_map_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "    map(",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 9
                }
              }
            ],
            [
              {
                "text": "        delimited(",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ws(char('{')), // Keep ws around opening delimiter",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "            separated_list0(ws_or_comment1, parse_map_entry_internal), // Use ws_or_comment1 as separator",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 110
                }
              }
            ],
            [
              {
                "text": "            ws(char('}')), // Apply ws to closing delimiter",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 92
                }
              }
            ],
            [
              {
                "text": "        ),",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "    )(input)",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Define the actual recursive parser function",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "fn parse_value_internal(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "    alt((",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        parse_list_internal, // Use internal versions",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        parse_vector_internal,",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        parse_map_internal,",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        parse_nil,",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_bool,",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "        parse_float,",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "        parse_int,",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "        parse_string,",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "        parse_keyword,",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        parse_symbol,",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 22
                }
              }
            ],
            [
              {
                "text": "    ))(input)",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser for a single value/expression, handles outer whitespace",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "pub fn parse_value(input: &str) -> IResult<&str, Value> {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "    ws(parse_value_internal)(input) // Add ws wrapper here at the top level",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Top-level parser (for now, just parses a single value into an Expr)",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "pub fn parse_expr(input: &str) -> IResult<&str, Expr> {",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "    // Use the top-level parse_value which handles outer whitespace",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    map(parse_value, Expr::Literal)(input)",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "#[cfg(test)]",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "mod tests {",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    use super::*;",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "    use num_bigint::ToBigInt;",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "    use std::collections::HashMap;",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // Helper for float comparison, especially NaNs",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "    fn assert_float_eq(v1: &Value, v2: &Value) {",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        match (v1, v2) {",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            (Value::Float(f1), Value::Float(f2)) => {",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                if f1.is_nan() && f2.is_nan() {",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    // NaNs are equal in this context",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "                } else {",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "                    assert_eq!(f1, f2);",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                }",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 18
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "            _ => panic!(\"Expected two Float values\"),",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_nil() {",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"Nil\").is_err());",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_bool() {",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 69
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"True\").is_err());",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_int() {",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123\"),",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"-45\"),",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        // Still consumes only digits, leaving trailing chars",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_int(\"123a\"),",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"abc\").is_err());",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "                                              // These assertions should now pass",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.2\").is_err());",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1e5\").is_err());",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_float() {",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 95
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 101
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 87
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"-inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::NEG_INFINITY),",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 25
                }
              }
            ],
            [
              {
                "text": "            &parse_float(\"+inf\").unwrap().1,",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            &Value::Float(f64::INFINITY),",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\".\").is_err());",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"e5\").is_err());",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "        // Ensure it doesn't consume integers meant for parse_int",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"123\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_float(\"-45\").is_err()); // No dot or exponent",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_string() {",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        // This should finally pass",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"\"\"#),",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"\".to_string())))",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 52
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello\"\"#),",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello\".to_string())))",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"hello world\"\"#),",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello world\".to_string())))",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"unterminated\"#).is_err());",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"no quotes\"#).is_err());",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        // This should still fail as '\\e' is not a valid escape sequence here",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_symbol() {",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc\"),",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a-b_c?\"),",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"set!\"),",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"valid.symbol#1\"),",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"a1\"),",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Should not parse keywords or numbers",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"nil\").is_err());",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"true\").is_err());",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"false\").is_err());",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"123\").is_err());",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"-45\").is_err());",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"1.23\").is_err());",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 79
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc def\"),",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_symbol(\"abc)\"),",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Symbol(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid start characters",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\".dotstart\").is_err());",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\"#hashstart\").is_err());",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_symbol(\":colonstart\").is_err());",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_keyword() {",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc\"),",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a-b_c?\"),",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":+\"),",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"+\".to_string())))",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":set!\"),",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"set!\".to_string())))",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":valid.keyword#1\"),",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":a1\"), // Digit allowed inside",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 58
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a1\".to_string())))",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Invalid keywords",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\"abc\").is_err()); // Missing colon",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":\").is_err()); // Colon only",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                                              // This assertion should now pass",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test partial consumption",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc def\"),",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "            Ok((\" def\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_keyword(\":abc)\"),",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\")\", Value::Keyword(\"abc\".to_string())))",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_list() {",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        // Use the public parse_value or parse_list_internal directly?",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // Tests should ideally use the public interface if possible.",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        // Let's test parse_value with list input.",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\", // parse_value consumes all surrounding whitespace",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::List(vec![",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"(1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_list_internal(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 111
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_vector() {",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 68
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Bool(true),",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "                    Value::String(\"hello\".to_string()),",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ 1 [ 2 3 ] nil ]\"),",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                        Value::Int(3.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "                    ]),",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 24
                }
              }
            ],
            [
              {
                "text": "                    Value::Nil,",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"[1 2\").is_err()); // Unclosed",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_vector_internal(\"(1 2)\").is_err()); // Wrong brackets",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_map() {",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 26
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 77
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map1 = HashMap::new();",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 30
                }
              }
            ],
            [
              {
                "text": "            MapKey::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 82
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map1)))",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map2 = HashMap::new();",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        let mut inner_map = HashMap::new();",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ outer { 10 nil } }\"),",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map2)))",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test invalid key type",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1,
                  "endLineNumber": 634,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test uneven number of elements",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1,
                  "endLineNumber": 635,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a 1 :b }\").is_err());",
                "range": {
                  "startLineNumber": 636,
                  "startColumn": 1,
                  "endLineNumber": 636,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"{ :a }\").is_err());",
                "range": {
                  "startLineNumber": 637,
                  "startColumn": 1,
                  "endLineNumber": 637,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 638,
                  "startColumn": 1,
                  "endLineNumber": 638,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 639,
                  "startColumn": 1,
                  "endLineNumber": 639,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 640,
                  "startColumn": 1,
                  "endLineNumber": 640,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_literals() {",
                "range": {
                  "startLineNumber": 641,
                  "startColumn": 1,
                  "endLineNumber": 641,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));",
                "range": {
                  "startLineNumber": 642,
                  "startColumn": 1,
                  "endLineNumber": 642,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));",
                "range": {
                  "startLineNumber": 643,
                  "startColumn": 1,
                  "endLineNumber": 643,
                  "endColumn": 70
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 644,
                  "startColumn": 1,
                  "endLineNumber": 644,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"\\t -99 \\n\"),",
                "range": {
                  "startLineNumber": 645,
                  "startColumn": 1,
                  "endLineNumber": 645,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 646,
                  "startColumn": 1,
                  "endLineNumber": 646,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 647,
                  "startColumn": 1,
                  "endLineNumber": 647,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));",
                "range": {
                  "startLineNumber": 648,
                  "startColumn": 1,
                  "endLineNumber": 648,
                  "endColumn": 81
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));",
                "range": {
                  "startLineNumber": 649,
                  "startColumn": 1,
                  "endLineNumber": 649,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 650,
                  "startColumn": 1,
                  "endLineNumber": 650,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\" \"hello \\n world\" \"#),",
                "range": {
                  "startLineNumber": 651,
                  "startColumn": 1,
                  "endLineNumber": 651,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::String(\"hello \\n world\".to_string())))",
                "range": {
                  "startLineNumber": 652,
                  "startColumn": 1,
                  "endLineNumber": 652,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 653,
                  "startColumn": 1,
                  "endLineNumber": 653,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity",
                "range": {
                  "startLineNumber": 654,
                  "startColumn": 1,
                  "endLineNumber": 654,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 655,
                  "startColumn": 1,
                  "endLineNumber": 655,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"), // Should be Int",
                "range": {
                  "startLineNumber": 656,
                  "startColumn": 1,
                  "endLineNumber": 656,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 657,
                  "startColumn": 1,
                  "endLineNumber": 657,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 658,
                  "startColumn": 1,
                  "endLineNumber": 658,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float",
                "range": {
                  "startLineNumber": 659,
                  "startColumn": 1,
                  "endLineNumber": 659,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float",
                "range": {
                  "startLineNumber": 660,
                  "startColumn": 1,
                  "endLineNumber": 660,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 661,
                  "startColumn": 1,
                  "endLineNumber": 661,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  my-symbol  \"),",
                "range": {
                  "startLineNumber": 662,
                  "startColumn": 1,
                  "endLineNumber": 662,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))",
                "range": {
                  "startLineNumber": 663,
                  "startColumn": 1,
                  "endLineNumber": 663,
                  "endColumn": 61
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 664,
                  "startColumn": 1,
                  "endLineNumber": 664,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 665,
                  "startColumn": 1,
                  "endLineNumber": 665,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" :a-keyword? \"),",
                "range": {
                  "startLineNumber": 666,
                  "startColumn": 1,
                  "endLineNumber": 666,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))",
                "range": {
                  "startLineNumber": 667,
                  "startColumn": 1,
                  "endLineNumber": 667,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 668,
                  "startColumn": 1,
                  "endLineNumber": 668,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 669,
                  "startColumn": 1,
                  "endLineNumber": 669,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test order sensitivity again",
                "range": {
                  "startLineNumber": 670,
                  "startColumn": 1,
                  "endLineNumber": 670,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol",
                "range": {
                  "startLineNumber": 671,
                  "startColumn": 1,
                  "endLineNumber": 671,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol",
                "range": {
                  "startLineNumber": 672,
                  "startColumn": 1,
                  "endLineNumber": 672,
                  "endColumn": 86
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 673,
                  "startColumn": 1,
                  "endLineNumber": 673,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123\"),",
                "range": {
                  "startLineNumber": 674,
                  "startColumn": 1,
                  "endLineNumber": 674,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 675,
                  "startColumn": 1,
                  "endLineNumber": 675,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        ); // Not a symbol",
                "range": {
                  "startLineNumber": 676,
                  "startColumn": 1,
                  "endLineNumber": 676,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol",
                "range": {
                  "startLineNumber": 677,
                  "startColumn": 1,
                  "endLineNumber": 677,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 678,
                  "startColumn": 1,
                  "endLineNumber": 678,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 679,
                  "startColumn": 1,
                  "endLineNumber": 679,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 680,
                  "startColumn": 1,
                  "endLineNumber": 680,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_value_collections() {",
                "range": {
                  "startLineNumber": 681,
                  "startColumn": 1,
                  "endLineNumber": 681,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));",
                "range": {
                  "startLineNumber": 682,
                  "startColumn": 1,
                  "endLineNumber": 682,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "        // This assertion should now pass as parse_float won't consume \"1\"",
                "range": {
                  "startLineNumber": 683,
                  "startColumn": 1,
                  "endLineNumber": 683,
                  "endColumn": 75
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 684,
                  "startColumn": 1,
                  "endLineNumber": 684,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\" [ 1 ] \"),",
                "range": {
                  "startLineNumber": 685,
                  "startColumn": 1,
                  "endLineNumber": 685,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 686,
                  "startColumn": 1,
                  "endLineNumber": 686,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 687,
                  "startColumn": 1,
                  "endLineNumber": 687,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));",
                "range": {
                  "startLineNumber": 688,
                  "startColumn": 1,
                  "endLineNumber": 688,
                  "endColumn": 80
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 689,
                  "startColumn": 1,
                  "endLineNumber": 689,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"( [ :a ] { } ) \"),",
                "range": {
                  "startLineNumber": 690,
                  "startColumn": 1,
                  "endLineNumber": 690,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 691,
                  "startColumn": 1,
                  "endLineNumber": 691,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 692,
                  "startColumn": 1,
                  "endLineNumber": 692,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 693,
                  "startColumn": 1,
                  "endLineNumber": 693,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),",
                "range": {
                  "startLineNumber": 694,
                  "startColumn": 1,
                  "endLineNumber": 694,
                  "endColumn": 74
                }
              }
            ],
            [
              {
                "text": "                    Value::Map(HashMap::new()),",
                "range": {
                  "startLineNumber": 695,
                  "startColumn": 1,
                  "endLineNumber": 695,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 696,
                  "startColumn": 1,
                  "endLineNumber": 696,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 697,
                  "startColumn": 1,
                  "endLineNumber": 697,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 698,
                  "startColumn": 1,
                  "endLineNumber": 698,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Add a test with floats inside collections",
                "range": {
                  "startLineNumber": 699,
                  "startColumn": 1,
                  "endLineNumber": 699,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "        // Using helper method to extract value for comparison",
                "range": {
                  "startLineNumber": 700,
                  "startColumn": 1,
                  "endLineNumber": 700,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;",
                "range": {
                  "startLineNumber": 701,
                  "startColumn": 1,
                  "endLineNumber": 701,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));",
                "range": {
                  "startLineNumber": 702,
                  "startColumn": 1,
                  "endLineNumber": 702,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 703,
                  "startColumn": 1,
                  "endLineNumber": 703,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 704,
                  "startColumn": 1,
                  "endLineNumber": 704,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 705,
                  "startColumn": 1,
                  "endLineNumber": 705,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_expr_literal() {",
                "range": {
                  "startLineNumber": 706,
                  "startColumn": 1,
                  "endLineNumber": 706,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 707,
                  "startColumn": 1,
                  "endLineNumber": 707,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" 12345 \"),",
                "range": {
                  "startLineNumber": 708,
                  "startColumn": 1,
                  "endLineNumber": 708,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 709,
                  "startColumn": 1,
                  "endLineNumber": 709,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 710,
                  "startColumn": 1,
                  "endLineNumber": 710,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 711,
                  "startColumn": 1,
                  "endLineNumber": 711,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" false\"),",
                "range": {
                  "startLineNumber": 712,
                  "startColumn": 1,
                  "endLineNumber": 712,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Bool(false))))",
                "range": {
                  "startLineNumber": 713,
                  "startColumn": 1,
                  "endLineNumber": 713,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 714,
                  "startColumn": 1,
                  "endLineNumber": 714,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Using if let to handle the result and avoid unreachable pattern warning",
                "range": {
                  "startLineNumber": 715,
                  "startColumn": 1,
                  "endLineNumber": 715,
                  "endColumn": 83
                }
              }
            ],
            [
              {
                "text": "        let parse_result = parse_expr(\" -inf \");",
                "range": {
                  "startLineNumber": 716,
                  "startColumn": 1,
                  "endLineNumber": 716,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");",
                "range": {
                  "startLineNumber": 717,
                  "startColumn": 1,
                  "endLineNumber": 717,
                  "endColumn": 64
                }
              }
            ],
            [
              {
                "text": "        if let Ok((_, parsed_expr)) = parse_result {",
                "range": {
                  "startLineNumber": 718,
                  "startColumn": 1,
                  "endLineNumber": 718,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "            let expected_value = Value::Float(f64::NEG_INFINITY);",
                "range": {
                  "startLineNumber": 719,
                  "startColumn": 1,
                  "endLineNumber": 719,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            match parsed_expr {",
                "range": {
                  "startLineNumber": 720,
                  "startColumn": 1,
                  "endLineNumber": 720,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),",
                "range": {
                  "startLineNumber": 721,
                  "startColumn": 1,
                  "endLineNumber": 721,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "                // This branch might be unreachable if parse_expr only returns Expr::Literal",
                "range": {
                  "startLineNumber": 722,
                  "startColumn": 1,
                  "endLineNumber": 722,
                  "endColumn": 93
                }
              }
            ],
            [
              {
                "text": "                #[allow(unreachable_patterns)]",
                "range": {
                  "startLineNumber": 723,
                  "startColumn": 1,
                  "endLineNumber": 723,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),",
                "range": {
                  "startLineNumber": 724,
                  "startColumn": 1,
                  "endLineNumber": 724,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 725,
                  "startColumn": 1,
                  "endLineNumber": 725,
                  "endColumn": 14
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 726,
                  "startColumn": 1,
                  "endLineNumber": 726,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 727,
                  "startColumn": 1,
                  "endLineNumber": 727,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(r#\" \"string\" \"#),",
                "range": {
                  "startLineNumber": 728,
                  "startColumn": 1,
                  "endLineNumber": 728,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))",
                "range": {
                  "startLineNumber": 729,
                  "startColumn": 1,
                  "endLineNumber": 729,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 730,
                  "startColumn": 1,
                  "endLineNumber": 730,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 731,
                  "startColumn": 1,
                  "endLineNumber": 731,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" some_symbol \"),",
                "range": {
                  "startLineNumber": 732,
                  "startColumn": 1,
                  "endLineNumber": 732,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))",
                "range": {
                  "startLineNumber": 733,
                  "startColumn": 1,
                  "endLineNumber": 733,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 734,
                  "startColumn": 1,
                  "endLineNumber": 734,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 735,
                  "startColumn": 1,
                  "endLineNumber": 735,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" :keyword123 \"),",
                "range": {
                  "startLineNumber": 736,
                  "startColumn": 1,
                  "endLineNumber": 736,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))",
                "range": {
                  "startLineNumber": 737,
                  "startColumn": 1,
                  "endLineNumber": 737,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 738,
                  "startColumn": 1,
                  "endLineNumber": 738,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 739,
                  "startColumn": 1,
                  "endLineNumber": 739,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" (1 2) \"),",
                "range": {
                  "startLineNumber": 740,
                  "startColumn": 1,
                  "endLineNumber": 740,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 741,
                  "startColumn": 1,
                  "endLineNumber": 741,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 742,
                  "startColumn": 1,
                  "endLineNumber": 742,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::List(vec![",
                "range": {
                  "startLineNumber": 743,
                  "startColumn": 1,
                  "endLineNumber": 743,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 744,
                  "startColumn": 1,
                  "endLineNumber": 744,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 745,
                  "startColumn": 1,
                  "endLineNumber": 745,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ]))",
                "range": {
                  "startLineNumber": 746,
                  "startColumn": 1,
                  "endLineNumber": 746,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 747,
                  "startColumn": 1,
                  "endLineNumber": 747,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 748,
                  "startColumn": 1,
                  "endLineNumber": 748,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 749,
                  "startColumn": 1,
                  "endLineNumber": 749,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" [ :a ] \"),",
                "range": {
                  "startLineNumber": 750,
                  "startColumn": 1,
                  "endLineNumber": 750,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 751,
                  "startColumn": 1,
                  "endLineNumber": 751,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 752,
                  "startColumn": 1,
                  "endLineNumber": 752,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))",
                "range": {
                  "startLineNumber": 753,
                  "startColumn": 1,
                  "endLineNumber": 753,
                  "endColumn": 84
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 754,
                  "startColumn": 1,
                  "endLineNumber": 754,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 755,
                  "startColumn": 1,
                  "endLineNumber": 755,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 756,
                  "startColumn": 1,
                  "endLineNumber": 756,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 757,
                  "startColumn": 1,
                  "endLineNumber": 757,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 758,
                  "startColumn": 1,
                  "endLineNumber": 758,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(100.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 759,
                  "startColumn": 1,
                  "endLineNumber": 759,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 760,
                  "startColumn": 1,
                  "endLineNumber": 760,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 761,
                  "startColumn": 1,
                  "endLineNumber": 761,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\" { \\\"key\\\" 100 } \"),",
                "range": {
                  "startLineNumber": 762,
                  "startColumn": 1,
                  "endLineNumber": 762,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Map(expected_map))))",
                "range": {
                  "startLineNumber": 763,
                  "startColumn": 1,
                  "endLineNumber": 763,
                  "endColumn": 62
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 764,
                  "startColumn": 1,
                  "endLineNumber": 764,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 765,
                  "startColumn": 1,
                  "endLineNumber": 765,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 766,
                  "startColumn": 1,
                  "endLineNumber": 766,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    // New tests for parsing comments",
                "range": {
                  "startLineNumber": 767,
                  "startColumn": 1,
                  "endLineNumber": 767,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 768,
                  "startColumn": 1,
                  "endLineNumber": 768,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_with_comments() {",
                "range": {
                  "startLineNumber": 769,
                  "startColumn": 1,
                  "endLineNumber": 769,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "        // Comments before value",
                "range": {
                  "startLineNumber": 770,
                  "startColumn": 1,
                  "endLineNumber": 770,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 771,
                  "startColumn": 1,
                  "endLineNumber": 771,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"; this is a comment\\n 123\"),",
                "range": {
                  "startLineNumber": 772,
                  "startColumn": 1,
                  "endLineNumber": 772,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 773,
                  "startColumn": 1,
                  "endLineNumber": 773,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 774,
                  "startColumn": 1,
                  "endLineNumber": 774,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Comments after value",
                "range": {
                  "startLineNumber": 775,
                  "startColumn": 1,
                  "endLineNumber": 775,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 776,
                  "startColumn": 1,
                  "endLineNumber": 776,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"true ; another comment\"),",
                "range": {
                  "startLineNumber": 777,
                  "startColumn": 1,
                  "endLineNumber": 777,
                  "endColumn": 51
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Bool(true)))",
                "range": {
                  "startLineNumber": 778,
                  "startColumn": 1,
                  "endLineNumber": 778,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 779,
                  "startColumn": 1,
                  "endLineNumber": 779,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Comments surrounding value",
                "range": {
                  "startLineNumber": 780,
                  "startColumn": 1,
                  "endLineNumber": 780,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 781,
                  "startColumn": 1,
                  "endLineNumber": 781,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"; comment before\\n nil ; comment after\"),",
                "range": {
                  "startLineNumber": 782,
                  "startColumn": 1,
                  "endLineNumber": 782,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Nil))",
                "range": {
                  "startLineNumber": 783,
                  "startColumn": 1,
                  "endLineNumber": 783,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 784,
                  "startColumn": 1,
                  "endLineNumber": 784,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Comments inside list",
                "range": {
                  "startLineNumber": 785,
                  "startColumn": 1,
                  "endLineNumber": 785,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 786,
                  "startColumn": 1,
                  "endLineNumber": 786,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),",
                "range": {
                  "startLineNumber": 787,
                  "startColumn": 1,
                  "endLineNumber": 787,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 788,
                  "startColumn": 1,
                  "endLineNumber": 788,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 789,
                  "startColumn": 1,
                  "endLineNumber": 789,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 790,
                  "startColumn": 1,
                  "endLineNumber": 790,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 791,
                  "startColumn": 1,
                  "endLineNumber": 791,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 792,
                  "startColumn": 1,
                  "endLineNumber": 792,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 793,
                  "startColumn": 1,
                  "endLineNumber": 793,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 794,
                  "startColumn": 1,
                  "endLineNumber": 794,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 795,
                  "startColumn": 1,
                  "endLineNumber": 795,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Comments inside vector",
                "range": {
                  "startLineNumber": 796,
                  "startColumn": 1,
                  "endLineNumber": 796,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 797,
                  "startColumn": 1,
                  "endLineNumber": 797,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"),",
                "range": {
                  "startLineNumber": 798,
                  "startColumn": 1,
                  "endLineNumber": 798,
                  "endColumn": 65
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 799,
                  "startColumn": 1,
                  "endLineNumber": 799,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 800,
                  "startColumn": 1,
                  "endLineNumber": 800,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::Vector(vec![",
                "range": {
                  "startLineNumber": 801,
                  "startColumn": 1,
                  "endLineNumber": 801,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "                    Value::Keyword(\"a\".to_string()),",
                "range": {
                  "startLineNumber": 802,
                  "startColumn": 1,
                  "endLineNumber": 802,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                    Value::Keyword(\"b\".to_string()),",
                "range": {
                  "startLineNumber": 803,
                  "startColumn": 1,
                  "endLineNumber": 803,
                  "endColumn": 53
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 804,
                  "startColumn": 1,
                  "endLineNumber": 804,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 805,
                  "startColumn": 1,
                  "endLineNumber": 805,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 806,
                  "startColumn": 1,
                  "endLineNumber": 806,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Comments inside map",
                "range": {
                  "startLineNumber": 807,
                  "startColumn": 1,
                  "endLineNumber": 807,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        let mut expected_map = HashMap::new();",
                "range": {
                  "startLineNumber": 808,
                  "startColumn": 1,
                  "endLineNumber": 808,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(",
                "range": {
                  "startLineNumber": 809,
                  "startColumn": 1,
                  "endLineNumber": 809,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            MapKey::String(\"key\".to_string()),",
                "range": {
                  "startLineNumber": 810,
                  "startColumn": 1,
                  "endLineNumber": 810,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "            Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 811,
                  "startColumn": 1,
                  "endLineNumber": 811,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 812,
                  "startColumn": 1,
                  "endLineNumber": 812,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        expected_map.insert(MapKey::Keyword(\"another\".to_string()), Value::Bool(false));",
                "range": {
                  "startLineNumber": 813,
                  "startColumn": 1,
                  "endLineNumber": 813,
                  "endColumn": 89
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 814,
                  "startColumn": 1,
                  "endLineNumber": 814,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"{ \\\"key\\\" ; map key \\n 1 ; map value \\n :another false ; next pair \\n }\"),",
                "range": {
                  "startLineNumber": 815,
                  "startColumn": 1,
                  "endLineNumber": 815,
                  "endColumn": 100
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Map(expected_map)))",
                "range": {
                  "startLineNumber": 816,
                  "startColumn": 1,
                  "endLineNumber": 816,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 817,
                  "startColumn": 1,
                  "endLineNumber": 817,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Comment within a string (should be part of the string)",
                "range": {
                  "startLineNumber": 818,
                  "startColumn": 1,
                  "endLineNumber": 818,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 819,
                  "startColumn": 1,
                  "endLineNumber": 819,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(r#\"\"a string ; with a comment inside\"\"#),",
                "range": {
                  "startLineNumber": 820,
                  "startColumn": 1,
                  "endLineNumber": 820,
                  "endColumn": 66
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 821,
                  "startColumn": 1,
                  "endLineNumber": 821,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 822,
                  "startColumn": 1,
                  "endLineNumber": 822,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::String(\"a string ; with a comment inside\".to_string())",
                "range": {
                  "startLineNumber": 823,
                  "startColumn": 1,
                  "endLineNumber": 823,
                  "endColumn": 78
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 824,
                  "startColumn": 1,
                  "endLineNumber": 824,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 825,
                  "startColumn": 1,
                  "endLineNumber": 825,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Multiple comments and whitespace",
                "range": {
                  "startLineNumber": 826,
                  "startColumn": 1,
                  "endLineNumber": 826,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 827,
                  "startColumn": 1,
                  "endLineNumber": 827,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"  ; comment 1 \\n   ( ; comment 2 \\n 1 \\n ; comment 3 \\n ) ; comment 4 \"),",
                "range": {
                  "startLineNumber": 828,
                  "startColumn": 1,
                  "endLineNumber": 828,
                  "endColumn": 99
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))",
                "range": {
                  "startLineNumber": 829,
                  "startColumn": 1,
                  "endLineNumber": 829,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 830,
                  "startColumn": 1,
                  "endLineNumber": 830,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        // Empty input with comments",
                "range": {
                  "startLineNumber": 831,
                  "startColumn": 1,
                  "endLineNumber": 831,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\"; only comment\").is_err()); // Expecting a value, not just comment",
                "range": {
                  "startLineNumber": 832,
                  "startColumn": 1,
                  "endLineNumber": 832,
                  "endColumn": 96
                }
              }
            ],
            [
              {
                "text": "        assert!(parse_value(\" ; ; ; \").is_err()); // Expecting a value",
                "range": {
                  "startLineNumber": 833,
                  "startColumn": 1,
                  "endLineNumber": 833,
                  "endColumn": 71
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 834,
                  "startColumn": 1,
                  "endLineNumber": 834,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Test with parse_expr",
                "range": {
                  "startLineNumber": 835,
                  "startColumn": 1,
                  "endLineNumber": 835,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 836,
                  "startColumn": 1,
                  "endLineNumber": 836,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_expr(\"; comment before expr\\n 42\"),",
                "range": {
                  "startLineNumber": 837,
                  "startColumn": 1,
                  "endLineNumber": 837,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))",
                "range": {
                  "startLineNumber": 838,
                  "startColumn": 1,
                  "endLineNumber": 838,
                  "endColumn": 73
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 839,
                  "startColumn": 1,
                  "endLineNumber": 839,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 840,
                  "startColumn": 1,
                  "endLineNumber": 840,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 841,
                  "startColumn": 1,
                  "endLineNumber": 841,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 842,
                  "startColumn": 1,
                  "endLineNumber": 842,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_parse_comment_only_input() {",
                "range": {
                  "startLineNumber": 843,
                  "startColumn": 1,
                  "endLineNumber": 843,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "        // Test cases where the input contains only comments or whitespace and comments",
                "range": {
                  "startLineNumber": 844,
                  "startColumn": 1,
                  "endLineNumber": 844,
                  "endColumn": 88
                }
              }
            ],
            [
              {
                "text": "        let result = parse_value(\"; just a comment\");",
                "range": {
                  "startLineNumber": 845,
                  "startColumn": 1,
                  "endLineNumber": 845,
                  "endColumn": 54
                }
              }
            ],
            [
              {
                "text": "        assert!(",
                "range": {
                  "startLineNumber": 846,
                  "startColumn": 1,
                  "endLineNumber": 846,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            result.is_err(),",
                "range": {
                  "startLineNumber": 847,
                  "startColumn": 1,
                  "endLineNumber": 847,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            \"Parsing only a comment should fail when expecting a value\"",
                "range": {
                  "startLineNumber": 848,
                  "startColumn": 1,
                  "endLineNumber": 848,
                  "endColumn": 72
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 849,
                  "startColumn": 1,
                  "endLineNumber": 849,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 850,
                  "startColumn": 1,
                  "endLineNumber": 850,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        let result = parse_value(\"  ; comment with leading space \\n ; another comment \");",
                "range": {
                  "startLineNumber": 851,
                  "startColumn": 1,
                  "endLineNumber": 851,
                  "endColumn": 90
                }
              }
            ],
            [
              {
                "text": "        assert!(",
                "range": {
                  "startLineNumber": 852,
                  "startColumn": 1,
                  "endLineNumber": 852,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            result.is_err(),",
                "range": {
                  "startLineNumber": 853,
                  "startColumn": 1,
                  "endLineNumber": 853,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "            \"Parsing only comments and whitespace should fail\"",
                "range": {
                  "startLineNumber": 854,
                  "startColumn": 1,
                  "endLineNumber": 854,
                  "endColumn": 63
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 855,
                  "startColumn": 1,
                  "endLineNumber": 855,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 856,
                  "startColumn": 1,
                  "endLineNumber": 856,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "        // Ensure parse_expr also handles this correctly",
                "range": {
                  "startLineNumber": 857,
                  "startColumn": 1,
                  "endLineNumber": 857,
                  "endColumn": 57
                }
              }
            ],
            [
              {
                "text": "        let result_expr = parse_expr(\"; comment for expr\");",
                "range": {
                  "startLineNumber": 858,
                  "startColumn": 1,
                  "endLineNumber": 858,
                  "endColumn": 60
                }
              }
            ],
            [
              {
                "text": "        assert!(",
                "range": {
                  "startLineNumber": 859,
                  "startColumn": 1,
                  "endLineNumber": 859,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "            result_expr.is_err(),",
                "range": {
                  "startLineNumber": 860,
                  "startColumn": 1,
                  "endLineNumber": 860,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "            \"parse_expr should fail on comment-only input\"",
                "range": {
                  "startLineNumber": 861,
                  "startColumn": 1,
                  "endLineNumber": 861,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 862,
                  "startColumn": 1,
                  "endLineNumber": 862,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 863,
                  "startColumn": 1,
                  "endLineNumber": 863,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 864,
                  "startColumn": 1,
                  "endLineNumber": 864,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "    #[test]",
                "range": {
                  "startLineNumber": 865,
                  "startColumn": 1,
                  "endLineNumber": 865,
                  "endColumn": 12
                }
              }
            ],
            [
              {
                "text": "    fn test_comment_at_eof() {",
                "range": {
                  "startLineNumber": 866,
                  "startColumn": 1,
                  "endLineNumber": 866,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "        // Test parsing a value followed immediately by EOF after a comment",
                "range": {
                  "startLineNumber": 867,
                  "startColumn": 1,
                  "endLineNumber": 867,
                  "endColumn": 76
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 868,
                  "startColumn": 1,
                  "endLineNumber": 868,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"123 ; comment at end\"),",
                "range": {
                  "startLineNumber": 869,
                  "startColumn": 1,
                  "endLineNumber": 869,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((\"\", Value::Int(123.to_bigint().unwrap())))",
                "range": {
                  "startLineNumber": 870,
                  "startColumn": 1,
                  "endLineNumber": 870,
                  "endColumn": 59
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 871,
                  "startColumn": 1,
                  "endLineNumber": 871,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "        assert_eq!(",
                "range": {
                  "startLineNumber": 872,
                  "startColumn": 1,
                  "endLineNumber": 872,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "            parse_value(\"(1 2) ; list comment\"),",
                "range": {
                  "startLineNumber": 873,
                  "startColumn": 1,
                  "endLineNumber": 873,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "            Ok((",
                "range": {
                  "startLineNumber": 874,
                  "startColumn": 1,
                  "endLineNumber": 874,
                  "endColumn": 17
                }
              }
            ],
            [
              {
                "text": "                \"\",",
                "range": {
                  "startLineNumber": 875,
                  "startColumn": 1,
                  "endLineNumber": 875,
                  "endColumn": 20
                }
              }
            ],
            [
              {
                "text": "                Value::List(vec![",
                "range": {
                  "startLineNumber": 876,
                  "startColumn": 1,
                  "endLineNumber": 876,
                  "endColumn": 34
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(1.to_bigint().unwrap()),",
                "range": {
                  "startLineNumber": 877,
                  "startColumn": 1,
                  "endLineNumber": 877,
                  "endColumn": 56
                }
              }
            ],
            [
              {
                "text": "                    Value::Int(2.to_bigint().unwrap())",
                "range": {
                  "startLineNumber": 878,
                  "startColumn": 1,
                  "endLineNumber": 878,
                  "endColumn": 55
                }
              }
            ],
            [
              {
                "text": "                ])",
                "range": {
                  "startLineNumber": 879,
                  "startColumn": 1,
                  "endLineNumber": 879,
                  "endColumn": 19
                }
              }
            ],
            [
              {
                "text": "            ))",
                "range": {
                  "startLineNumber": 880,
                  "startColumn": 1,
                  "endLineNumber": 880,
                  "endColumn": 15
                }
              }
            ],
            [
              {
                "text": "        );",
                "range": {
                  "startLineNumber": 881,
                  "startColumn": 1,
                  "endLineNumber": 881,
                  "endColumn": 11
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 882,
                  "startColumn": 1,
                  "endLineNumber": 882,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 883,
                  "startColumn": 1,
                  "endLineNumber": 883,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 884,
                  "startColumn": 1,
                  "endLineNumber": 884,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "// Helper method added to Value for testing convenience (optional)",
                "range": {
                  "startLineNumber": 885,
                  "startColumn": 1,
                  "endLineNumber": 885,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "impl Value {",
                "range": {
                  "startLineNumber": 886,
                  "startColumn": 1,
                  "endLineNumber": 886,
                  "endColumn": 13
                }
              }
            ],
            [
              {
                "text": "    fn get_vector(&self) -> Option<&Vec<Value>> {",
                "range": {
                  "startLineNumber": 887,
                  "startColumn": 1,
                  "endLineNumber": 887,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "        match self {",
                "range": {
                  "startLineNumber": 888,
                  "startColumn": 1,
                  "endLineNumber": 888,
                  "endColumn": 21
                }
              }
            ],
            [
              {
                "text": "            Value::Vector(v) => Some(v),",
                "range": {
                  "startLineNumber": 889,
                  "startColumn": 1,
                  "endLineNumber": 889,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "            _ => None,",
                "range": {
                  "startLineNumber": 890,
                  "startColumn": 1,
                  "endLineNumber": 890,
                  "endColumn": 23
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 891,
                  "startColumn": 1,
                  "endLineNumber": 891,
                  "endColumn": 10
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 892,
                  "startColumn": 1,
                  "endLineNumber": 892,
                  "endColumn": 6
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 893,
                  "startColumn": 1,
                  "endLineNumber": 893,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 894,
                  "startColumn": 1,
                  "endLineNumber": 894,
                  "endColumn": 1
                }
              }
            ],
            []
          ],
          "done": true
        },
        {
          "value": "**Analysis:**\n\nYou are right, the test `test_parse_with_comments` is still failing, specifically on the vector parsing assertion: `assert_eq!(parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"), ...)`. The error message `Err(Error(Error { input: \"[ :a ; keyword a \\n :b ; keyword b ]\", code: TakeWhileMN }))` suggests a problem occurred while trying to parse a specific number of characters, likely within the keyword parser (`:a` or `:b`) or potentially in the whitespace/comment consumption logic between elements.\n\nLooking at the structure used in the previous fix for collection parsers like `parse_vector_internal`:\n`delimited( ws(char('[')), ws(separated_list0(ws_or_comment1, parse_value_internal)), char(']') )`\n\nThere's a potential issue here:\n1.  `ws(char('['))` consumes the opening bracket and any immediately following whitespace/comments.\n2.  `ws(separated_list0(...))` *also* consumes whitespace/comments before the first element and after the last element (because `ws` wraps the whole list parser).\n3.  `ws_or_comment1` consumes whitespace/comments *between* elements.\n4.  `char(']')` consumes the closing bracket.\n\nThe `ws()` wrapper around `separated_list0` might be redundant or interfere with the `ws_or_comment1` separator, especially concerning whitespace/comments after the last element but before the closing bracket.\n\nA potentially cleaner structure is:\n`delimited( ws(char('[')), separated_list0(ws_or_comment1, parse_value_internal), ws(char(']')) )`\n\nHere:\n1.  `ws(char('['))` handles the opening bracket and space/comments after it.\n2.  `separated_list0` handles the elements, using `ws_or_comment1` strictly for separation *between* them.\n3.  `ws(char(']'))` handles the closing bracket and any space/comments *before* it.\n\n**Motivation:**\n\nTo simplify the whitespace and comment handling within collections and resolve the potential conflict/redundancy, I will refactor the internal list, vector, and map parsers to use the second structure described above. This places the whitespace/comment handling (`ws`) explicitly around the delimiters, leaving `separated_list0` to focus solely on elements and their separators (`ws_or_comment1`).\n\n**Steps:**\n\n1.  I will modify `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` in ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        },
        {
          "kind": "inlineReference",
          "inlineReference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\acl_compiler\\src\\parser.rs",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "path": "/h:/workspaces/mandubian/lang_ai/acl_compiler/src/parser.rs",
            "scheme": "file"
          }
        },
        {
          "value": ".\n2.  In each function, I will remove the `ws()` wrapper from the `separated_list0` call (the middle argument of `delimited`).\n3.  I will add the `ws()` wrapper around the closing delimiter parser (`char(')')`, `char(']')`, or `char('}')`) (the third argument of `delimited`).\n\nI have applied these changes. Please run `cargo test` again.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/h:/workspaces/mandubian/lang_ai/",
            "scheme": "file"
          }
        }
      ],
      "responseId": "response_13fbe5e2-663d-4204-b7a1-3b468e1d22e2",
      "result": {
        "timings": {
          "firstProgress": 43311,
          "totalElapsed": 89862
        },
        "metadata": {
          "edits": {
            "workingSet": [],
            "promptInstructions": [],
            "request": "Above is the result of calling one or more tools. The user can see the results of the insert_edit_into_file tool, so you don't need to explain them. But the user can't see the results of other tools, so you should explain them to the user if referencing them in your answer. Continue from where you left off if needed without repeating yourself.",
            "response": "**Analysis:**\n\nYou are right, the test `test_parse_with_comments` is still failing, specifically on the vector parsing assertion: `assert_eq!(parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"), ...)`. The error message `Err(Error(Error { input: \"[ :a ; keyword a \\n :b ; keyword b ]\", code: TakeWhileMN }))` suggests a problem occurred while trying to parse a specific number of characters, likely within the keyword parser (`:a` or `:b`) or potentially in the whitespace/comment consumption logic between elements.\n\nLooking at the structure used in the previous fix for collection parsers like `parse_vector_internal`:\n`delimited( ws(char('[')), ws(separated_list0(ws_or_comment1, parse_value_internal)), char(']') )`\n\nThere's a potential issue here:\n1.  `ws(char('['))` consumes the opening bracket and any immediately following whitespace/comments.\n2.  `ws(separated_list0(...))` *also* consumes whitespace/comments before the first element and after the last element (because `ws` wraps the whole list parser).\n3.  `ws_or_comment1` consumes whitespace/comments *between* elements.\n4.  `char(']')` consumes the closing bracket.\n\nThe `ws()` wrapper around `separated_list0` might be redundant or interfere with the `ws_or_comment1` separator, especially concerning whitespace/comments after the last element but before the closing bracket.\n\nA potentially cleaner structure is:\n`delimited( ws(char('[')), separated_list0(ws_or_comment1, parse_value_internal), ws(char(']')) )`\n\nHere:\n1.  `ws(char('['))` handles the opening bracket and space/comments after it.\n2.  `separated_list0` handles the elements, using `ws_or_comment1` strictly for separation *between* them.\n3.  `ws(char(']'))` handles the closing bracket and any space/comments *before* it.\n\n**Motivation:**\n\nTo simplify the whitespace and comment handling within collections and resolve the potential conflict/redundancy, I will refactor the internal list, vector, and map parsers to use the second structure described above. This places the whitespace/comment handling (`ws`) explicitly around the delimiters, leaving `separated_list0` to focus solely on elements and their separators (`ws_or_comment1`).\n\n**Steps:**\n\n1.  I will modify `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` in `acl_compiler/src/parser.rs`.\n2.  In each function, I will remove the `ws()` wrapper from the `separated_list0` call (the middle argument of `delimited`).\n3.  I will add the `ws()` wrapper around the closing delimiter parser (`char(')')`, `char(']')`, or `char('}')`) (the third argument of `delimited`).\n\nI have applied these changes. Please run `cargo test` again."
          },
          "codeBlocks": [],
          "messages": [
            {
              "role": "user",
              "content": "correct this test parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\")"
            },
            {
              "role": "assistant",
              "content": "**Analysis:**\n\nYou are right, the test `test_parse_with_comments` is still failing, specifically on the vector parsing assertion: `assert_eq!(parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"), ...)`. The error message `Err(Error(Error { input: \"[ :a ; keyword a \\n :b ; keyword b ]\", code: TakeWhileMN }))` suggests a problem occurred while trying to parse a specific number of characters, likely within the keyword parser (`:a` or `:b`) or potentially in the whitespace/comment consumption logic between elements.\n\nLooking at the structure used in the previous fix for collection parsers like `parse_vector_internal`:\n`delimited( ws(char('[')), ws(separated_list0(ws_or_comment1, parse_value_internal)), char(']') )`\n\nThere's a potential issue here:\n1.  `ws(char('['))` consumes the opening bracket and any immediately following whitespace/comments.\n2.  `ws(separated_list0(...))` *also* consumes whitespace/comments before the first element and after the last element (because `ws` wraps the whole list parser).\n3.  `ws_or_comment1` consumes whitespace/comments *between* elements.\n4.  `char(']')` consumes the closing bracket.\n\nThe `ws()` wrapper around `separated_list0` might be redundant or interfere with the `ws_or_comment1` separator, especially concerning whitespace/comments after the last element but before the closing bracket.\n\nA potentially cleaner structure is:\n`delimited( ws(char('[')), separated_list0(ws_or_comment1, parse_value_internal), ws(char(']')) )`\n\nHere:\n1.  `ws(char('['))` handles the opening bracket and space/comments after it.\n2.  `separated_list0` handles the elements, using `ws_or_comment1` strictly for separation *between* them.\n3.  `ws(char(']'))` handles the closing bracket and any space/comments *before* it.\n\n**Motivation:**\n\nTo simplify the whitespace and comment handling within collections and resolve the potential conflict/redundancy, I will refactor the internal list, vector, and map parsers to use the second structure described above. This places the whitespace/comment handling (`ws`) explicitly around the delimiters, leaving `separated_list0` to focus solely on elements and their separators (`ws_or_comment1`).\n\n**Steps:**\n\n1.  I will modify `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` in `acl_compiler/src/parser.rs`.\n2.  In each function, I will remove the `ws()` wrapper from the `separated_list0` call (the middle argument of `delimited`).\n3.  I will add the `ws()` wrapper around the closing delimiter parser (`char(')')`, `char(']')`, or `char('}')`) (the third argument of `delimited`).\n\nI have applied these changes. Please run `cargo test` again."
            }
          ],
          "toolCallRounds": [
            {
              "toolCalls": [
                {
                  "name": "insert_edit_into_file",
                  "arguments": "{\"code\":\"// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\\nfn parse_list_internal(input: \\u0026str) -\\u003e IResult\\u003c\\u0026str, Value\\u003e {\\n    map(\\n        delimited(\\n            ws(char('(')), // Keep ws around opening delimiter\\n            separated_list0(\\n                ws_or_comment1,       // Use ws_or_comment1 as separator\\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\\n            ),\\n            ws(char(')')), // Apply ws to closing delimiter\\n        ),\\n        Value::List,\\n    )(input)\\n}\\n\\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\\nfn parse_vector_internal(input: \\u0026str) -\\u003e IResult\\u003c\\u0026str, Value\\u003e {\\n    map(\\n        delimited(\\n            ws(char('[')), // Keep ws around opening delimiter\\n            separated_list0(\\n                ws_or_comment1,       // Use ws_or_comment1 as separator\\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\\n            ),\\n            ws(char(']')), // Apply ws to closing delimiter\\n        ),\\n        Value::Vector,\\n    )(input)\\n}\\n\\n// ... existing code ...\\n\\n// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws\\nfn parse_map_internal(input: \\u0026str) -\\u003e IResult\\u003c\\u0026str, Value\\u003e {\\n    map(\\n        delimited(\\n            ws(char('{')), // Keep ws around opening delimiter\\n            separated_list0(ws_or_comment1, parse_map_entry_internal), // Use ws_or_comment1 as separator\\n            ws(char('}')), // Apply ws to closing delimiter\\n        ),\\n        |entries: Vec\\u003c(MapKey, Value)\\u003e| Value::Map(entries.into_iter().collect::\\u003cHashMap\\u003c_, _\\u003e\\u003e()),\\n    )(input)\\n}\\n\\n// ... existing code ...\",\"explanation\":\"Refactor collection parsers (list, vector, map) to remove the `ws` wrapper around `separated_list0` and apply it to the closing delimiter instead. This simplifies whitespace/comment handling.\",\"filePath\":\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\"}",
                  "id": "call_MHxkQUxYcTAzM2RPNFAwOU54eWE__vscode-1745091772390"
                }
              ],
              "toolInputRetry": 0,
              "response": "**Analysis:**\n\n1.  The user provided the output of `cargo test` (#attachment), which shows that the test `parser::tests::test_parse_with_comments` is failing.\n2.  The specific failing assertion within that test is related to parsing a vector with comments between elements: `parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\")`.\n3.  The error message is `left: Err(Error(Error { input: \"[ :a ; keyword a \\n :b ; keyword b ]\", code: TakeWhileMN }))`. The `TakeWhileMN` error code usually originates from parsers that expect a minimum number of characters matching a condition, such as `take_while_m_n`. This combinator is used in our `parse_symbol` and `parse_keyword` functions.\n4.  The previous change correctly updated the *separator* in `separated_list0` to `ws_or_comment1`, allowing comments *between* elements. However, the failure persists.\n5.  Let's re-examine the structure of `parse_vector_internal`:\n    ```rust\n    delimited(\n        ws(char('[')), // Consumes ws/comment before '[' and after '['\n        ws(separated_list0( // Consumes ws/comment before list and after list\n            ws_or_comment1,       // Separator consumes ws/comment between elements\n            parse_value_internal, // Element parser\n        )),\n        char(']') // Expects ']' immediately after the list content + trailing ws/comment\n    )\n    ```\n6.  The issue might be the nested `ws` around `separated_list0`. Let's trace the input `[ :a ; keyword a \\n :b ; keyword b ]`:\n    *   `ws(char('['))` consumes up to and including the space after `[`. Remaining: `:a ; keyword a \\n :b ; keyword b ]`.\n    *   `ws(separated_list0(...))` starts.\n        *   The outer `ws` consumes nothing initially.\n        *   `separated_list0` parses `:a`. Remaining: ` ; keyword a \\n :b ; keyword b ]`.\n        *   Separator `ws_or_comment1` consumes ` ; keyword a \\n `. Remaining: `:b ; keyword b ]`.\n        *   `separated_list0` parses `:b`. Remaining: ` ; keyword b ]`.\n        *   Separator `ws_or_comment1` consumes ` ; keyword b `. Remaining: `]`.\n        *   `separated_list0` finishes, returning the list `[:a, :b]`. Remaining input for `separated_list0` is `]`.\n        *   The outer `ws` consumes trailing whitespace/comments (none in this case) from the remaining `]`. It still leaves `]`.\n    *   Finally, `char(']')` is called on the remaining `]`. It consumes `]` and succeeds.\n\n7.  The trace suggests the logic *should* work. However, the `TakeWhileMN` error persists. Let's reconsider the structure. Perhaps the `ws` around `separated_list0` is too greedy or interacts poorly. An alternative structure is to only apply `ws` around the delimiters and let the separator handle the space *between* elements.\n\n**Motivation:**\n\nThe current parsing structure for collections, while seemingly correct in tracing, still leads to a failure when parsing keywords within a vector interspersed with comments. The nested `ws` combinator around `separated_list0` might be causing an unexpected interaction. To simplify the whitespace and comment handling, I will refactor the collection parsers (`parse_list_internal`, `parse_vector_internal`, `parse_map_internal`) to apply `ws` only to the opening and closing delimiters, relying solely on the `ws_or_comment1` separator provided to `separated_list0` to handle the space and comments *between* elements.\n\n**Steps:**\n\n1.  Modify `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` in `acl_compiler/src/parser.rs`.\n2.  Remove the `ws()` wrapper from the `separated_list0(...)` call (the middle argument of `delimited`).\n3.  Add a `ws()` wrapper around the closing delimiter parser (`char(')')`, `char(']')`, `char('}')`) (the third argument of `delimited`).\n\nThis ensures whitespace/comments are handled:\n*   Before the opening delimiter (by `ws(char('('))`).\n*   Between elements (by the `ws_or_comment1` separator).\n*   Before the closing delimiter (by `ws(char(')'))`).\n\n"
            },
            {
              "toolCalls": [],
              "toolInputRetry": 0,
              "response": "**Analysis:**\n\nYou are right, the test `test_parse_with_comments` is still failing, specifically on the vector parsing assertion: `assert_eq!(parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"), ...)`. The error message `Err(Error(Error { input: \"[ :a ; keyword a \\n :b ; keyword b ]\", code: TakeWhileMN }))` suggests a problem occurred while trying to parse a specific number of characters, likely within the keyword parser (`:a` or `:b`) or potentially in the whitespace/comment consumption logic between elements.\n\nLooking at the structure used in the previous fix for collection parsers like `parse_vector_internal`:\n`delimited( ws(char('[')), ws(separated_list0(ws_or_comment1, parse_value_internal)), char(']') )`\n\nThere's a potential issue here:\n1.  `ws(char('['))` consumes the opening bracket and any immediately following whitespace/comments.\n2.  `ws(separated_list0(...))` *also* consumes whitespace/comments before the first element and after the last element (because `ws` wraps the whole list parser).\n3.  `ws_or_comment1` consumes whitespace/comments *between* elements.\n4.  `char(']')` consumes the closing bracket.\n\nThe `ws()` wrapper around `separated_list0` might be redundant or interfere with the `ws_or_comment1` separator, especially concerning whitespace/comments after the last element but before the closing bracket.\n\nA potentially cleaner structure is:\n`delimited( ws(char('[')), separated_list0(ws_or_comment1, parse_value_internal), ws(char(']')) )`\n\nHere:\n1.  `ws(char('['))` handles the opening bracket and space/comments after it.\n2.  `separated_list0` handles the elements, using `ws_or_comment1` strictly for separation *between* them.\n3.  `ws(char(']'))` handles the closing bracket and any space/comments *before* it.\n\n**Motivation:**\n\nTo simplify the whitespace and comment handling within collections and resolve the potential conflict/redundancy, I will refactor the internal list, vector, and map parsers to use the second structure described above. This places the whitespace/comment handling (`ws`) explicitly around the delimiters, leaving `separated_list0` to focus solely on elements and their separators (`ws_or_comment1`).\n\n**Steps:**\n\n1.  I will modify `parse_list_internal`, `parse_vector_internal`, and `parse_map_internal` in `acl_compiler/src/parser.rs`.\n2.  In each function, I will remove the `ws()` wrapper from the `separated_list0` call (the middle argument of `delimited`).\n3.  I will add the `ws()` wrapper around the closing delimiter parser (`char(')')`, `char(']')`, or `char('}')`) (the third argument of `delimited`).\n\nI have applied these changes. Please run `cargo test` again."
            }
          ],
          "toolCallResults": {
            "call_MHxkQUxYcTAzM2RPNFAwOU54eWE__vscode-1745091772390": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 22,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "<file_after_edit path=\"h:\\\\workspaces\\\\mandubian\\\\lang_ai\\\\acl_compiler\\\\src\\\\parser.rs\">\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "This is the new state of the file after the edit. Base future edits off of this file, no need to read it again, unless a terminal command may have changed it.",
                                  "lineBreakBefore": false
                                },
                                {
                                  "type": 1,
                                  "ctor": 2,
                                  "children": [
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "children": [
                                        {
                                          "type": 2,
                                          "priority": 9007199254740991,
                                          "text": "```rust\nuse nom::{\r\n    branch::alt,\r\n    // Removed is_not\r\n    bytes::complete::{tag, take_while, take_while1, take_while_m_n},\r\n    // Removed unused line_ending, multispace0\r\n    character::complete::{char, multispace1, none_of, not_line_ending},\r\n    combinator::{map, map_res, opt, recognize, value},\r\n    error::ParseError,\r\n    multi::{many0, many1, separated_list0}, // Added many1\r\n    sequence::{delimited, pair, preceded, separated_pair, tuple},\r\n    IResult,\r\n};\r\nuse num_bigint::BigInt;\r\nuse std::collections::HashMap;\r\nuse std::str::FromStr;\r\n\r\nuse crate::ast::{Expr, MapKey, Value}; // Added MapKey\r\n\r\n// Parser for single-line comments starting with ;\r\nfn parse_comment<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\r\n    recognize(preceded(char(';'), opt(not_line_ending)))(input)\r\n}\r\n\r\n// Parser for zero or more whitespace characters or comments\r\nfn ws_or_comment0<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\r\n    recognize(many0(alt((multispace1, parse_comment))))(input)\r\n}\r\n\r\n// Parser for one or more whitespace characters or comments\r\nfn ws_or_comment1<'a, E: ParseError<&'a str>>(input: &'a str) -> IResult<&'a str, &'a str, E> {\r\n    recognize(many1(alt((multispace1, parse_comment))))(input) // Use many1 here\r\n}\r\n\r\n// Helper function to consume whitespace OR comments\r\nfn ws<'a, F, O, E: ParseError<&'a str>>(inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, O, E>\r\nwhere\r\n    F: FnMut(&'a str) -> IResult<&'a str, O, E>,\r\n{\r\n    delimited(ws_or_comment0, inner, ws_or_comment0) // Use ws_or_comment0\r\n}\r\n\r\n// Parser for Nil\r\nfn parse_nil(input: &str) -> IResult<&str, Value> {\r\n    map(tag(\"nil\"), |_| Value::Nil)(input)\r\n}\r\n\r\n// Parser for Booleans\r\nfn parse_bool(input: &str) -> IResult<&str, Value> {\r\n    alt((\r\n        value(Value::Bool(true), tag(\"true\")),\r\n        value(Value::Bool(false), tag(\"false\")),\r\n    ))(input)\r\n}\r\n\r\n// Parser for Integers (Ensure it doesn't parse floats)\r\nfn parse_int(input: &str) -> IResult<&str, Value> {\r\n    // Use recognize first to capture the potential integer part\r\n    let (remaining, recognized) =\r\n        recognize(pair(opt(char('-')), take_while1(|c: char| c.is_digit(10))))(input)?;\r\n\r\n    // Check the character immediately after the recognized part in the original input\r\n    match remaining.chars().next() {\r\n        // If the next char indicates a float, fail parsing the integer\r\n        Some('.') | Some('e') | Some('E') => {\r\n            Err(nom::Err::Error(nom::error::Error::new(\r\n                input,\r\n                nom::error::ErrorKind::Verify,\r\n            ))) // Indicate verification failure\r\n        }\r\n        // Otherwise, proceed to convert the recognized part to BigInt\r\n        _ => {\r\n            match BigInt::from_str(recognized) {\r\n                Ok(val) => Ok((remaining, Value::Int(val))),\r\n                Err(_) => Err(nom::Err::Error(nom::error::Error::new(\r\n                    recognized,\r\n                    nom::error::ErrorKind::MapRes,\r\n                ))), // Error during BigInt conversion\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Parser for Floats (recognizes the pattern first)\r\n// Handles forms like: 1.23, -0.5, 1., .5, 1e5, 1.2e-3, -inf, +inf, nan\r\n// *** Must contain '.' or 'e'/'E' to distinguish from integers ***\r\n\r\n// Helper parser for standard float patterns (excluding inf/nan)\r\nfn parse_standard_float_pattern(input: &str) -> IResult<&str, &str> {\r\n    recognize(pair(\r\n        opt(alt((char('+'), char('-')))), // Optional sign\r\n        alt((\r\n            // Case 1: Digits + '.' + Optional Digits + Optional Exponent\r\n            recognize(tuple((\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                char('.'),\r\n                take_while(|c: char| c.is_digit(10)), // Optional digits after dot\r\n                opt(tuple((\r\n                    // Optional exponent\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                ))),\r\n            ))),\r\n            // Case 2: '.' + Digits + Optional Exponent\r\n            recognize(tuple((\r\n                char('.'),\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                opt(tuple((\r\n                    // Optional exponent\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                ))),\r\n            ))),\r\n            // Case 3: Digits + Exponent (No decimal point)\r\n            recognize(tuple((\r\n                take_while1(|c: char| c.is_digit(10)),\r\n                // Exponent MUST be present here\r\n                tuple((\r\n                    alt((char('e'), char('E'))),\r\n                    opt(alt((char('+'), char('-')))),\r\n                    take_while1(|c: char| c.is_digit(10)),\r\n                )),\r\n            ))),\r\n        )),\r\n    ))(input)\r\n}\r\n\r\nfn parse_float(input: &str) -> IResult<&str, Value> {\r\n    map_res(\r\n        alt((\r\n            // Handle inf, -inf, nan first as they are distinct patterns\r\n            tag(\"inf\"),\r\n            tag(\"-inf\"),\r\n            tag(\"+inf\"),\r\n            tag(\"nan\"),\r\n            // Use the helper for standard float patterns\r\n            parse_standard_float_pattern,\r\n        )),\r\n        |s: &str| {\r\n            // Same mapping logic as before\r\n            match s {\r\n                \"inf\" | \"+inf\" => Ok(Value::Float(f64::INFINITY)),\r\n                \"-inf\" => Ok(Value::Float(f64::NEG_INFINITY)),\r\n                \"nan\" => Ok(Value::Float(f64::NAN)),\r\n                _ => s.parse::<f64>().map(Value::Float),\r\n            }\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Helper for parsing a single escaped character\r\nfn parse_escape_sequence(input: &str) -> IResult<&str, char> {\r\n    preceded(\r\n        char('\\\\'),\r\n        alt((\r\n            value('\\\\', tag(\"\\\\\")),\r\n            value('\\\"', tag(\"\\\"\")),\r\n            value('\\n', tag(\"n\")),\r\n            value('\\r', tag(\"r\")),\r\n            value('\\t', tag(\"t\")),\r\n            // TODO: Add more escapes like unicode? \\u{...}\r\n        )),\r\n    )(input)\r\n}\r\n\r\n// Helper for parsing a single non-escape, non-quote character\r\nfn parse_normal_char(input: &str) -> IResult<&str, char> {\r\n    none_of(\"\\\\\\\"\")(input)\r\n}\r\n\r\n// Parser for string content (handles escapes)\r\nfn parse_string_content(input: &str) -> IResult<&str, String> {\r\n    map(\r\n        many0(alt((parse_escape_sequence, parse_normal_char))),\r\n        |chars: Vec<char>| chars.into_iter().collect(),\r\n    )(input)\r\n}\r\n\r\n// Parser for Strings using the manual content parser\r\nfn parse_string(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            char('\"'),\r\n            parse_string_content, // Use the new content parser\r\n            char('\"'),\r\n        ),\r\n        Value::String,\r\n    )(input)\r\n}\r\n\r\n// Parser for Symbols / Keywords\r\n// Must not be nil, true, false, or a number.\r\n// Starts with non-digit, non-colon, non-quote, non-paren/bracket/brace, non-whitespace.\r\n// Continues with non-quote, non-paren/bracket/brace, non-whitespace.\r\nfn is_symbol_start_char(c: char) -> bool {\r\n    // Exclude digits from starting characters\r\n    c.is_alphabetic() || \"*+!-_?><=/~@$%^&\".contains(c)\r\n}\r\n\r\nfn is_symbol_char(c: char) -> bool {\r\n    // Allow digits inside, but not at the start (handled by is_symbol_start_char)\r\n    is_symbol_start_char(c) || c.is_digit(10) || \".#:\".contains(c)\r\n}\r\n\r\nfn parse_symbol(input: &str) -> IResult<&str, Value> {\r\n    map_res(\r\n        recognize(tuple((\r\n            take_while_m_n(1, 1, is_symbol_start_char),\r\n            take_while(is_symbol_char),\r\n        ))),\r\n        |s: &str| {\r\n            // Check if it's a reserved keyword or number pattern that failed other parsers\r\n            match s {\r\n                \"nil\" | \"true\" | \"false\" => Err(\"Reserved keyword used as symbol\"), // Should have been parsed by parse_nil/parse_bool\r\n                _ => {\r\n                    // Basic check to prevent parsing numbers as symbols\r\n                    if s.chars().all(|c| c.is_digit(10) || c == '-' || c == '.')\r\n                        && s.parse::<f64>().is_ok()\r\n                    {\r\n                        Err(\"Numeric literal used as symbol\")\r\n                    } else {\r\n                        Ok(Value::Symbol(s.to_string()))\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Parser for Keywords (e.g., :my-keyword)\r\nfn parse_keyword(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        preceded(\r\n            char(':'),\r\n            // Use the updated symbol character rules\r\n            recognize(tuple((\r\n                take_while_m_n(1, 1, is_symbol_start_char),\r\n                take_while(is_symbol_char),\r\n            ))),\r\n        ),\r\n        |s: &str| Value::Keyword(s.to_string()),\r\n    )(input)\r\n}\r\n\r\n// Parser for Lists: (item1 item2 ...) - WITHOUT outer ws\r\nfn parse_list_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('(')), // Keep ws around opening delimiter\r\n            separated_list0(\r\n                ws_or_comment1,       // Use ws_or_comment1 as separator\r\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\r\n            ),\r\n            ws(char(')')), // Apply ws to closing delimiter\r\n        ),\r\n        Value::List,\r\n    )(input)\r\n}\r\n\r\n// Parser for Vectors: [item1 item2 ...] - WITHOUT outer ws\r\nfn parse_vector_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('[')), // Keep ws around opening delimiter\r\n            separated_list0(\r\n                ws_or_comment1,       // Use ws_or_comment1 as separator\r\n                parse_value_internal, // Element parser itself doesn't consume surrounding ws\r\n            ),\r\n            ws(char(']')), // Apply ws to closing delimiter\r\n        ),\r\n        Value::Vector,\r\n    )(input)\r\n}\r\n\r\n// Parser for Map Entries: key value - WITHOUT outer ws\r\nfn parse_map_entry_internal(input: &str) -> IResult<&str, (MapKey, Value)> {\r\n    map_res(\r\n        separated_pair(\r\n            parse_value_internal, // Key parser\r\n            ws_or_comment1,       // Use ws_or_comment1 as separator\r\n            parse_value_internal, // Value parser without surrounding ws\r\n        ),\r\n        |(k, v)| {\r\n            k.into_map_key()\r\n                .ok_or(\"Invalid map key type\")\r\n                .map(|map_key| (map_key, v))\r\n        },\r\n    )(input)\r\n}\r\n\r\n// Parser for Maps: {key1 val1 key2 val2 ...} - WITHOUT outer ws\r\nfn parse_map_internal(input: &str) -> IResult<&str, Value> {\r\n    map(\r\n        delimited(\r\n            ws(char('{')), // Keep ws around opening delimiter\r\n            separated_list0(ws_or_comment1, parse_map_entry_internal), // Use ws_or_comment1 as separator\r\n            ws(char('}')), // Apply ws to closing delimiter\r\n        ),\r\n        |entries: Vec<(MapKey, Value)>| Value::Map(entries.into_iter().collect::<HashMap<_, _>>()),\r\n    )(input)\r\n}\r\n\r\n// Define the actual recursive parser function\r\nfn parse_value_internal(input: &str) -> IResult<&str, Value> {\r\n    // NO ws here - handled by ws() calls in collection parsers or top-level parse_value\r\n    alt((\r\n        parse_list_internal, // Use internal versions\r\n        parse_vector_internal,\r\n        parse_map_internal,\r\n        parse_nil,\r\n        parse_bool,\r\n        parse_float,\r\n        parse_int,\r\n        parse_string,\r\n        parse_keyword,\r\n        parse_symbol,\r\n    ))(input)\r\n}\r\n\r\n// Top-level parser for a single value/expression, handles outer whitespace\r\npub fn parse_value(input: &str) -> IResult<&str, Value> {\r\n    ws(parse_value_internal)(input) // Add ws wrapper here at the top level\r\n}\r\n\r\n// Top-level parser (for now, just parses a single value into an Expr)\r\npub fn parse_expr(input: &str) -> IResult<&str, Expr> {\r\n    // Use the top-level parse_value which handles outer whitespace\r\n    map(parse_value, Expr::Literal)(input)\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use num_bigint::ToBigInt;\r\n    use std::collections::HashMap;\r\n\r\n    // Helper for float comparison, especially NaNs\r\n    fn assert_float_eq(v1: &Value, v2: &Value) {\r\n        match (v1, v2) {\r\n            (Value::Float(f1), Value::Float(f2)) => {\r\n                if f1.is_nan() && f2.is_nan() {\r\n                    // NaNs are equal in this context\r\n                } else {\r\n                    assert_eq!(f1, f2);\r\n                }\r\n            }\r\n            _ => panic!(\"Expected two Float values\"),\r\n        }\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_nil() {\r\n        assert_eq!(parse_nil(\"nil\"), Ok((\"\", Value::Nil)));\r\n        assert!(parse_nil(\"Nil\").is_err());\r\n        assert!(parse_nil(\"nil \").is_ok()); // Consumes only \"nil\"\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_bool() {\r\n        assert_eq!(parse_bool(\"true\"), Ok((\"\", Value::Bool(true))));\r\n        assert_eq!(parse_bool(\"false\"), Ok((\"\", Value::Bool(false))));\r\n        assert!(parse_bool(\"True\").is_err());\r\n        assert!(parse_bool(\"falsey\").is_ok()); // Consumes only \"false\"\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_int() {\r\n        assert_eq!(\r\n            parse_int(\"123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(\r\n            parse_int(\"-45\"),\r\n            Ok((\"\", Value::Int((-45).to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(parse_int(\"0\"), Ok((\"\", Value::Int(0.to_bigint().unwrap()))));\r\n        // Still consumes only digits, leaving trailing chars\r\n        assert_eq!(\r\n            parse_int(\"123a\"),\r\n            Ok((\"a\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert!(parse_int(\"abc\").is_err());\r\n        assert!(parse_int(\"- 123\").is_err()); // '-' must be adjacent\r\n                                              // These assertions should now pass\r\n        assert!(parse_int(\"1.2\").is_err());\r\n        assert!(parse_int(\"1e5\").is_err());\r\n        assert!(parse_int(\"1.e5\").is_err()); // Should fail because of '.'\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_float() {\r\n        assert_float_eq(&parse_float(\"1.23\").unwrap().1, &Value::Float(1.23));\r\n        assert_float_eq(&parse_float(\"-0.5\").unwrap().1, &Value::Float(-0.5));\r\n        assert_float_eq(&parse_float(\"1.\").unwrap().1, &Value::Float(1.0)); // Ends with dot\r\n        assert_float_eq(&parse_float(\".5\").unwrap().1, &Value::Float(0.5)); // Starts with dot\r\n        assert_float_eq(&parse_float(\"1e5\").unwrap().1, &Value::Float(1e5)); // Has exponent\r\n        assert_float_eq(&parse_float(\"1.0e5\").unwrap().1, &Value::Float(1.0e5)); // Dot and exponent\r\n        assert_float_eq(&parse_float(\"1.2E-3\").unwrap().1, &Value::Float(1.2e-3));\r\n        assert_float_eq(&parse_float(\"-1.2e+3\").unwrap().1, &Value::Float(-1.2e3));\r\n        assert_float_eq(&parse_float(\"inf\").unwrap().1, &Value::Float(f64::INFINITY));\r\n        assert_float_eq(\r\n            &parse_float(\"-inf\").unwrap().1,\r\n            &Value::Float(f64::NEG_INFINITY),\r\n        );\r\n        assert_float_eq(\r\n            &parse_float(\"+inf\").unwrap().1,\r\n            &Value::Float(f64::INFINITY),\r\n        );\r\n        assert_float_eq(&parse_float(\"nan\").unwrap().1, &Value::Float(f64::NAN));\r\n        assert!(parse_float(\"1.23a\").is_ok()); // Consumes only \"1.23\"\r\n        assert!(parse_float(\".\").is_err());\r\n        assert!(parse_float(\"e5\").is_err());\r\n        // Ensure it doesn't consume integers meant for parse_int\r\n        assert!(parse_float(\"123\").is_err()); // No dot or exponent\r\n        assert!(parse_float(\"-45\").is_err()); // No dot or exponent\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_string() {\r\n        // This should finally pass\r\n        assert_eq!(\r\n            parse_string(r#\"\"\"\"#),\r\n            Ok((\"\", Value::String(\"\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"hello\"\"#),\r\n            Ok((\"\", Value::String(\"hello\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"hello world\"\"#),\r\n            Ok((\"\", Value::String(\"hello world\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_string(r#\"\"with\\\"escapes\\n\\t\\\\\"\"#),\r\n            Ok((\"\", Value::String(\"with\\\"escapes\\n\\t\\\\\".to_string())))\r\n        );\r\n        assert!(parse_string(r#\"\"unterminated\"#).is_err());\r\n        assert!(parse_string(r#\"no quotes\"#).is_err());\r\n        // This should still fail as '\\e' is not a valid escape sequence here\r\n        assert!(parse_string(r#\"\"invalid\\escape\"\"#).is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_symbol() {\r\n        assert_eq!(\r\n            parse_symbol(\"abc\"),\r\n            Ok((\"\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"a-b_c?\"),\r\n            Ok((\"\", Value::Symbol(\"a-b_c?\".to_string())))\r\n        );\r\n        assert_eq!(parse_symbol(\"+\"), Ok((\"\", Value::Symbol(\"+\".to_string()))));\r\n        assert_eq!(\r\n            parse_symbol(\"set!\"),\r\n            Ok((\"\", Value::Symbol(\"set!\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"valid.symbol#1\"),\r\n            Ok((\"\", Value::Symbol(\"valid.symbol#1\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"a1\"),\r\n            Ok((\"\", Value::Symbol(\"a1\".to_string())))\r\n        );\r\n\r\n        // Should not parse keywords or numbers\r\n        assert!(parse_symbol(\"nil\").is_err());\r\n        assert!(parse_symbol(\"true\").is_err());\r\n        assert!(parse_symbol(\"false\").is_err());\r\n        assert!(parse_symbol(\"123\").is_err());\r\n        assert!(parse_symbol(\"-45\").is_err());\r\n        assert!(parse_symbol(\"1.23\").is_err());\r\n        assert!(parse_symbol(\":keyword\").is_err()); // Colon indicates keyword\r\n\r\n        // Test partial consumption\r\n        assert_eq!(\r\n            parse_symbol(\"abc def\"),\r\n            Ok((\" def\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_symbol(\"abc)\"),\r\n            Ok((\")\", Value::Symbol(\"abc\".to_string())))\r\n        );\r\n\r\n        // Invalid start characters\r\n        assert!(parse_symbol(\".dotstart\").is_err());\r\n        assert!(parse_symbol(\"#hashstart\").is_err());\r\n        assert!(parse_symbol(\":colonstart\").is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_keyword() {\r\n        assert_eq!(\r\n            parse_keyword(\":abc\"),\r\n            Ok((\"\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":a-b_c?\"),\r\n            Ok((\"\", Value::Keyword(\"a-b_c?\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":+\"),\r\n            Ok((\"\", Value::Keyword(\"+\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":set!\"),\r\n            Ok((\"\", Value::Keyword(\"set!\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":valid.keyword#1\"),\r\n            Ok((\"\", Value::Keyword(\"valid.keyword#1\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":a1\"), // Digit allowed inside\r\n            Ok((\"\", Value::Keyword(\"a1\".to_string())))\r\n        );\r\n\r\n        // Invalid keywords\r\n        assert!(parse_keyword(\"abc\").is_err()); // Missing colon\r\n        assert!(parse_keyword(\":\").is_err()); // Colon only\r\n                                              // This assertion should now pass\r\n        assert!(parse_keyword(\":123\").is_err()); // Starts with digit after colon\r\n        assert!(parse_keyword(\":.abc\").is_err()); // Starts with dot after colon\r\n\r\n        // Test partial consumption\r\n        assert_eq!(\r\n            parse_keyword(\":abc def\"),\r\n            Ok((\" def\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_keyword(\":abc)\"),\r\n            Ok((\")\", Value::Keyword(\"abc\".to_string())))\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_list() {\r\n        // Use the public parse_value or parse_list_internal directly?\r\n        // Tests should ideally use the public interface if possible.\r\n        // Let's test parse_value with list input.\r\n        assert_eq!(parse_value(\"()\"), Ok((\"\", Value::List(vec![]))));\r\n        assert_eq!(\r\n            parse_value(\"(1 true \\\"hello\\\")\"), // Test with parse_value\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Bool(true),\r\n                    Value::String(\"hello\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"( 1 ( 2 3 ) nil )\"), // Test with parse_value\r\n            Ok((\r\n                \"\", // parse_value consumes all surrounding whitespace\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::List(vec![\r\n                        Value::Int(2.to_bigint().unwrap()),\r\n                        Value::Int(3.to_bigint().unwrap()),\r\n                    ]),\r\n                    Value::Nil,\r\n                ])\r\n            ))\r\n        );\r\n        assert!(parse_value(\"(1 2\").is_err()); // Unclosed\r\n        assert!(parse_list_internal(\"[1 2]\").is_err()); // Wrong brackets (parse_value tries parse_list first)\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_vector() {\r\n        assert_eq!(parse_value(\"[]\"), Ok((\"\", Value::Vector(vec![]))));\r\n        assert_eq!(\r\n            parse_value(\"[ 1 true \\\"hello\\\" ]\"), // Use parse_value\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Bool(true),\r\n                    Value::String(\"hello\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"[ 1 [ 2 3 ] nil ]\"),\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Vector(vec![\r\n                        Value::Int(2.to_bigint().unwrap()),\r\n                        Value::Int(3.to_bigint().unwrap()),\r\n                    ]),\r\n                    Value::Nil,\r\n                ])\r\n            ))\r\n        );\r\n        assert!(parse_value(\"[1 2\").is_err()); // Unclosed\r\n        assert!(parse_vector_internal(\"(1 2)\").is_err()); // Wrong brackets\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_map() {\r\n        assert_eq!(parse_value(\"{}\"), Ok((\"\", Value::Map(HashMap::new()))));\r\n\r\n        let mut expected_map1 = HashMap::new();\r\n        expected_map1.insert(\r\n            MapKey::Keyword(\"a\".to_string()),\r\n            Value::Int(1.to_bigint().unwrap()),\r\n        );\r\n        expected_map1.insert(MapKey::String(\"b\".to_string()), Value::Bool(true));\r\n\r\n        assert_eq!(\r\n            parse_value(\"{ :a 1 \\\"b\\\" true }\"), // Use parse_value\r\n            Ok((\"\", Value::Map(expected_map1)))\r\n        );\r\n\r\n        let mut expected_map2 = HashMap::new();\r\n        let mut inner_map = HashMap::new();\r\n        inner_map.insert(MapKey::Int(10.to_bigint().unwrap()), Value::Nil);\r\n        expected_map2.insert(MapKey::Symbol(\"outer\".to_string()), Value::Map(inner_map));\r\n\r\n        assert_eq!(\r\n            parse_value(\"{ outer { 10 nil } }\"),\r\n            Ok((\"\", Value::Map(expected_map2)))\r\n        );\r\n\r\n        // Test invalid key type\r\n        assert!(parse_value(\"{ [1 2] 3 }\").is_err()); // Vector cannot be a key\r\n        assert!(parse_value(\"{ 1.5 true }\").is_err()); // Float cannot be a key\r\n\r\n        // Test uneven number of elements\r\n        assert!(parse_value(\"{ :a 1 :b }\").is_err());\r\n        assert!(parse_value(\"{ :a }\").is_err());\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_value_literals() {\r\n        assert_eq!(parse_value(\"  nil  \"), Ok((\"\", Value::Nil)));\r\n        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true))));\r\n        assert_eq!(\r\n            parse_value(\"\\t -99 \\n\"),\r\n            Ok((\"\", Value::Int((-99).to_bigint().unwrap())))\r\n        );\r\n        assert_float_eq(&parse_value(\" 1.23 \").unwrap().1, &Value::Float(1.23));\r\n        assert_float_eq(&parse_value(\" nan \").unwrap().1, &Value::Float(f64::NAN));\r\n        assert_eq!(\r\n            parse_value(r#\" \"hello \\n world\" \"#),\r\n            Ok((\"\", Value::String(\"hello \\n world\".to_string())))\r\n        );\r\n        // Test order sensitivity\r\n        assert_eq!(\r\n            parse_value(\"123\"), // Should be Int\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_float_eq(&parse_value(\"123.0\").unwrap().1, &Value::Float(123.0)); // Should be Float\r\n        assert_float_eq(&parse_value(\"1e3\").unwrap().1, &Value::Float(1000.0)); // Should be Float\r\n        assert_eq!(\r\n            parse_value(\"  my-symbol  \"),\r\n            Ok((\"\", Value::Symbol(\"my-symbol\".to_string())))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\" :a-keyword? \"),\r\n            Ok((\"\", Value::Keyword(\"a-keyword?\".to_string())))\r\n        );\r\n\r\n        // Test order sensitivity again\r\n        assert_eq!(parse_value(\"nil\"), Ok((\"\", Value::Nil))); // Not a symbol\r\n        assert_eq!(parse_value(\"true\"), Ok((\"\", Value::Bool(true)))); // Not a symbol\r\n        assert_eq!(\r\n            parse_value(\"123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        ); // Not a symbol\r\n        assert_float_eq(&parse_value(\"1.0\").unwrap().1, &Value::Float(1.0)); // Not a symbol\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_value_collections() {\r\n        assert_eq!(parse_value(\"() \"), Ok((\"\", Value::List(vec![]))));\r\n        // This assertion should now pass as parse_float won't consume \"1\"\r\n        assert_eq!(\r\n            parse_value(\" [ 1 ] \"),\r\n            Ok((\"\", Value::Vector(vec![Value::Int(1.to_bigint().unwrap())])))\r\n        );\r\n        assert_eq!(parse_value(\" { } \"), Ok((\"\", Value::Map(HashMap::new()))));\r\n        assert_eq!(\r\n            parse_value(\"( [ :a ] { } ) \"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Vector(vec![Value::Keyword(\"a\".to_string())]),\r\n                    Value::Map(HashMap::new()),\r\n                ])\r\n            ))\r\n        );\r\n        // Add a test with floats inside collections\r\n        // Using helper method to extract value for comparison\r\n        let parsed_vec = parse_value(\"[ 1.5 ]\").unwrap().1;\r\n        assert_float_eq(&parsed_vec.get_vector().unwrap()[0], &Value::Float(1.5));\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_expr_literal() {\r\n        assert_eq!(\r\n            parse_expr(\" 12345 \"),\r\n            Ok((\"\", Expr::Literal(Value::Int(12345.to_bigint().unwrap()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" false\"),\r\n            Ok((\"\", Expr::Literal(Value::Bool(false))))\r\n        );\r\n        // Using if let to handle the result and avoid unreachable pattern warning\r\n        let parse_result = parse_expr(\" -inf \");\r\n        assert!(parse_result.is_ok(), \"Parsing '-inf' failed\");\r\n        if let Ok((_, parsed_expr)) = parse_result {\r\n            let expected_value = Value::Float(f64::NEG_INFINITY);\r\n            match parsed_expr {\r\n                Expr::Literal(ref actual_value) => assert_float_eq(actual_value, &expected_value),\r\n                // This branch might be unreachable if parse_expr only returns Expr::Literal\r\n                #[allow(unreachable_patterns)]\r\n                _ => panic!(\"Expected Expr::Literal, got {:?}\", parsed_expr),\r\n            }\r\n        }\r\n        assert_eq!(\r\n            parse_expr(r#\" \"string\" \"#),\r\n            Ok((\"\", Expr::Literal(Value::String(\"string\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" some_symbol \"),\r\n            Ok((\"\", Expr::Literal(Value::Symbol(\"some_symbol\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" :keyword123 \"),\r\n            Ok((\"\", Expr::Literal(Value::Keyword(\"keyword123\".to_string()))))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" (1 2) \"),\r\n            Ok((\r\n                \"\",\r\n                Expr::Literal(Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap())\r\n                ]))\r\n            ))\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" [ :a ] \"),\r\n            Ok((\r\n                \"\",\r\n                Expr::Literal(Value::Vector(vec![Value::Keyword(\"a\".to_string())]))\r\n            ))\r\n        );\r\n        let mut expected_map = HashMap::new();\r\n        expected_map.insert(\r\n            MapKey::String(\"key\".to_string()),\r\n            Value::Int(100.to_bigint().unwrap()),\r\n        );\r\n        assert_eq!(\r\n            parse_expr(\" { \\\"key\\\" 100 } \"),\r\n            Ok((\"\", Expr::Literal(Value::Map(expected_map))))\r\n        );\r\n    }\r\n\r\n    // New tests for parsing comments\r\n    #[test]\r\n    fn test_parse_with_comments() {\r\n        // Comments before value\r\n        assert_eq!(\r\n            parse_value(\"; this is a comment\\n 123\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        // Comments after value\r\n        assert_eq!(\r\n            parse_value(\"true ; another comment\"),\r\n            Ok((\"\", Value::Bool(true)))\r\n        );\r\n        // Comments surrounding value\r\n        assert_eq!(\r\n            parse_value(\"; comment before\\n nil ; comment after\"),\r\n            Ok((\"\", Value::Nil))\r\n        );\r\n        // Comments inside list\r\n        assert_eq!(\r\n            parse_value(\"(1 ; item 1\\n 2 ; item 2\\n )\"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap()),\r\n                ])\r\n            ))\r\n        );\r\n        // Comments inside vector\r\n        assert_eq!(\r\n            parse_value(\"[ :a ; keyword a \\n :b ; keyword b ]\"),\r\n            Ok((\r\n                \"\",\r\n                Value::Vector(vec![\r\n                    Value::Keyword(\"a\".to_string()),\r\n                    Value::Keyword(\"b\".to_string()),\r\n                ])\r\n            ))\r\n        );\r\n        // Comments inside map\r\n        let mut expected_map = HashMap::new();\r\n        expected_map.insert(\r\n            MapKey::String(\"key\".to_string()),\r\n            Value::Int(1.to_bigint().unwrap()),\r\n        );\r\n        expected_map.insert(MapKey::Keyword(\"another\".to_string()), Value::Bool(false));\r\n        assert_eq!(\r\n            parse_value(\"{ \\\"key\\\" ; map key \\n 1 ; map value \\n :another false ; next pair \\n }\"),\r\n            Ok((\"\", Value::Map(expected_map)))\r\n        );\r\n        // Comment within a string (should be part of the string)\r\n        assert_eq!(\r\n            parse_value(r#\"\"a string ; with a comment inside\"\"#),\r\n            Ok((\r\n                \"\",\r\n                Value::String(\"a string ; with a comment inside\".to_string())\r\n            ))\r\n        );\r\n        // Multiple comments and whitespace\r\n        assert_eq!(\r\n            parse_value(\"  ; comment 1 \\n   ( ; comment 2 \\n 1 \\n ; comment 3 \\n ) ; comment 4 \"),\r\n            Ok((\"\", Value::List(vec![Value::Int(1.to_bigint().unwrap())])))\r\n        );\r\n        // Empty input with comments\r\n        assert!(parse_value(\"; only comment\").is_err()); // Expecting a value, not just comment\r\n        assert!(parse_value(\" ; ; ; \").is_err()); // Expecting a value\r\n\r\n        // Test with parse_expr\r\n        assert_eq!(\r\n            parse_expr(\"; comment before expr\\n 42\"),\r\n            Ok((\"\", Expr::Literal(Value::Int(42.to_bigint().unwrap()))))\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_parse_comment_only_input() {\r\n        // Test cases where the input contains only comments or whitespace and comments\r\n        let result = parse_value(\"; just a comment\");\r\n        assert!(\r\n            result.is_err(),\r\n            \"Parsing only a comment should fail when expecting a value\"\r\n        );\r\n\r\n        let result = parse_value(\"  ; comment with leading space \\n ; another comment \");\r\n        assert!(\r\n            result.is_err(),\r\n            \"Parsing only comments and whitespace should fail\"\r\n        );\r\n\r\n        // Ensure parse_expr also handles this correctly\r\n        let result_expr = parse_expr(\"; comment for expr\");\r\n        assert!(\r\n            result_expr.is_err(),\r\n            \"parse_expr should fail on comment-only input\"\r\n        );\r\n    }\r\n\r\n    #[test]\r\n    fn test_comment_at_eof() {\r\n        // Test parsing a value followed immediately by EOF after a comment\r\n        assert_eq!(\r\n            parse_value(\"123 ; comment at end\"),\r\n            Ok((\"\", Value::Int(123.to_bigint().unwrap())))\r\n        );\r\n        assert_eq!(\r\n            parse_value(\"(1 2) ; list comment\"),\r\n            Ok((\r\n                \"\",\r\n                Value::List(vec![\r\n                    Value::Int(1.to_bigint().unwrap()),\r\n                    Value::Int(2.to_bigint().unwrap())\r\n                ])\r\n            ))\r\n        );\r\n    }\r\n}\r\n\r\n// Helper method added to Value for testing convenience (optional)\r\nimpl Value {\r\n    fn get_vector(&self) -> Option<&Vec<Value>> {\r\n        match self {\r\n            Value::Vector(v) => Some(v),\r\n            _ => None,\r\n        }\r\n    }\r\n}\n```",
                                          "references": [],
                                          "lineBreakBefore": true
                                        }
                                      ],
                                      "references": []
                                    }
                                  ],
                                  "references": []
                                },
                                {
                                  "type": 2,
                                  "priority": 1,
                                  "text": "\n",
                                  "lineBreakBefore": false
                                }
                              ],
                              "priority": 1,
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "</file_after_edit>",
                                  "lineBreakBefore": false
                                }
                              ],
                              "references": []
                            },
                            {
                              "type": 2,
                              "priority": 9007199254740991,
                              "text": "\n",
                              "lineBreakBefore": false
                            }
                          ],
                          "references": []
                        }
                      ],
                      "references": []
                    }
                  }
                }
              ]
            }
          },
          "modelMessageId": "45c99819-e47a-482f-bb23-9ec0d841083b",
          "responseId": "e79fdfe9-77a8-4cba-84eb-dac2ed10f582",
          "sessionId": "ac71aae9-8aee-46b8-be3b-a00a6bc25bf3",
          "agentId": "github.copilot.editsAgent"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editsAgent",
        "description": "Edit files in your workspace in agent mode",
        "when": "config.chat.agent.enabled && !chatAgentModeDisallowed",
        "metadata": {
          "themeIcon": {
            "id": "tools"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "welcomeMessageContent": {
            "icon": {
              "id": "copilot-large"
            },
            "title": "Edit with Copilot",
            "message": {
              "value": "Ask Copilot to edit your files in [agent mode](https://aka.ms/vscode-copilot-agent). Copilot will automatically use multiple requests to pick files to edit, run terminal commands, and iterate on errors.\n\nCopilot is powered by AI, so mistakes are possible. Review output carefully before use.",
              "supportThemeIcons": false,
              "supportHtml": false,
              "uris": {
                "https://aka.ms/vscode-copilot-agent": {
                  "$mid": 1,
                  "external": "https://aka.ms/vscode-copilot-agent",
                  "path": "/vscode-copilot-agent",
                  "scheme": "https",
                  "authority": "aka.ms"
                }
              }
            }
          }
        },
        "name": "agent",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "isToolsAgent": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "h:\\workspaces\\mandubian\\lang_ai\\.github\\copilot-instructions.md",
            "_sep": 1,
            "external": "file:///h%3A/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "path": "/h:/workspaces/mandubian/lang_ai/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1745098528755
    }
  ]
}