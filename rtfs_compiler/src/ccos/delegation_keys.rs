//! Delegation Metadata Key Constants
//! 
//! This module centralizes all delegation metadata key constants used throughout
//! the CCOS delegation system. This ensures consistency and makes it easier to
//! maintain and validate metadata keys.

/// Intent-related metadata keys
pub mod intent {
    /// The type of intent (e.g., "mathematical", "natural_language_processing")
    pub const INTENT_TYPE: &str = "intent_type";
    
    /// Complexity level of the intent (e.g., "low", "medium", "high")
    pub const COMPLEXITY: &str = "complexity";
}

/// Generation method metadata keys
pub mod generation {
    /// Method used to generate the plan/intent
    pub const GENERATION_METHOD: &str = "generation_method";
    
    /// Values for generation_method
    pub mod methods {
        /// Generated by LLM directly
        pub const LLM: &str = "llm";
        /// Generated by template system
        pub const TEMPLATE: &str = "template";
        /// Generated by delegation to another agent
        pub const DELEGATION: &str = "delegation";
        /// Generated by delegating LLM
        pub const DELEGATING_LLM: &str = "delegating_llm";
        /// Generated directly (no delegation)
        pub const DIRECT: &str = "direct";
    }
}

/// Agent-related metadata keys
pub mod agent {
    /// ID of the delegated agent
    pub const DELEGATED_AGENT: &str = "delegated_agent";
    
    /// Trust score of the delegated agent (0.0-1.0)
    pub const AGENT_TRUST_SCORE: &str = "agent_trust_score";
    
    /// Cost of the delegated agent (per request)
    pub const AGENT_COST: &str = "agent_cost";
}

/// Validation functions for metadata keys
pub mod validation {
    use super::*;
    
    /// Validates that a metadata key is a known constant
    pub fn is_valid_key(key: &str) -> bool {
        matches!(key, 
            intent::INTENT_TYPE |
            intent::COMPLEXITY |
            generation::GENERATION_METHOD |
            agent::DELEGATED_AGENT |
            agent::AGENT_TRUST_SCORE |
            agent::AGENT_COST
        )
    }
    
    /// Returns all valid metadata keys
    pub fn all_valid_keys() -> &'static [&'static str] {
        &[
            intent::INTENT_TYPE,
            intent::COMPLEXITY,
            generation::GENERATION_METHOD,
            agent::DELEGATED_AGENT,
            agent::AGENT_TRUST_SCORE,
            agent::AGENT_COST,
        ]
    }
    
    /// Validates generation method values
    pub fn is_valid_generation_method(value: &str) -> bool {
        matches!(value,
            generation::methods::LLM |
            generation::methods::TEMPLATE |
            generation::methods::DELEGATION |
            generation::methods::DELEGATING_LLM |
            generation::methods::DIRECT
        )
    }
    
    /// Validates complexity values
    pub fn is_valid_complexity(value: &str) -> bool {
        matches!(value, "low" | "medium" | "high")
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_valid_keys() {
        assert!(validation::is_valid_key(intent::INTENT_TYPE));
        assert!(validation::is_valid_key(intent::COMPLEXITY));
        assert!(validation::is_valid_key(generation::GENERATION_METHOD));
        assert!(validation::is_valid_key(agent::DELEGATED_AGENT));
        assert!(validation::is_valid_key(agent::AGENT_TRUST_SCORE));
        assert!(validation::is_valid_key(agent::AGENT_COST));
        
        assert!(!validation::is_valid_key("unknown_key"));
        assert!(!validation::is_valid_key(""));
    }
    
    #[test]
    fn test_valid_generation_methods() {
        assert!(validation::is_valid_generation_method(generation::methods::LLM));
        assert!(validation::is_valid_generation_method(generation::methods::TEMPLATE));
        assert!(validation::is_valid_generation_method(generation::methods::DELEGATION));
        assert!(validation::is_valid_generation_method(generation::methods::DELEGATING_LLM));
        assert!(validation::is_valid_generation_method(generation::methods::DIRECT));
        
        assert!(!validation::is_valid_generation_method("unknown_method"));
        assert!(!validation::is_valid_generation_method(""));
    }
    
    #[test]
    fn test_valid_complexity() {
        assert!(validation::is_valid_complexity("low"));
        assert!(validation::is_valid_complexity("medium"));
        assert!(validation::is_valid_complexity("high"));
        
        assert!(!validation::is_valid_complexity("unknown"));
        assert!(!validation::is_valid_complexity(""));
    }
    
    #[test]
    fn test_all_valid_keys() {
        let keys = validation::all_valid_keys();
        assert_eq!(keys.len(), 6);
        assert!(keys.contains(&intent::INTENT_TYPE));
        assert!(keys.contains(&intent::COMPLEXITY));
        assert!(keys.contains(&generation::GENERATION_METHOD));
        assert!(keys.contains(&agent::DELEGATED_AGENT));
        assert!(keys.contains(&agent::AGENT_TRUST_SCORE));
        assert!(keys.contains(&agent::AGENT_COST));
    }
}
