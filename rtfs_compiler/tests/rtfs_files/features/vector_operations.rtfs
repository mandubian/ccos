;; RTFS Language Feature Test: vector operations
;; Tests vector creation, access, and manipulation

;; Basic vector creation
[1 2 3 4 5]
;; Expected: [1 2 3 4 5]

;; Empty vector
[]
;; Expected: []

;; Vector with different types
[1 "hello" :keyword true nil]
;; Expected: [1 "hello" :keyword true nil]

;; Nested vectors
[[1 2] [3 4] [5 6]]
;; Expected: [[1 2] [3 4] [5 6]]

;; Vector element access
(get [10 20 30] 1)
;; Expected: 20

(nth [10 20 30] 0)
;; Expected: 10

;; Vector element access with bounds
(get [1 2 3] 5)
;; Expected: nil

(get [1 2 3] 5 :default)
;; Expected: :default

;; Vector length
(count [1 2 3 4])
;; Expected: 4

(count [])
;; Expected: 0

;; Vector concatenation
(concat [1 2] [3 4] [5 6])
;; Expected: [1 2 3 4 5 6]

;; Vector construction with cons/conj
(conj [1 2 3] 4)
;; Expected: [1 2 3 4]

(cons 0 [1 2 3])
;; Expected: [0 1 2 3]

;; Vector slicing
(subvec [1 2 3 4 5] 1 4)
;; Expected: [2 3 4]

(take 3 [1 2 3 4 5])
;; Expected: [1 2 3]

(drop 2 [1 2 3 4 5])
;; Expected: [3 4 5]

;; Vector manipulation with assoc
(assoc [1 2 3] 1 "changed")
;; Expected: [1 "changed" 3]

;; Vector update
(update [1 2 3] 0 inc)
;; Expected: [2 2 3]

;; Vector reversal
(reverse [1 2 3 4])
;; Expected: [4 3 2 1]

;; Vector sorting
(sort [3 1 4 1 5 9])
;; Expected: [1 1 3 4 5 9]

(sort > [3 1 4 1 5 9])
;; Expected: [9 5 4 3 1 1]

;; Vector filtering
(filter even? [1 2 3 4 5 6])
;; Expected: [2 4 6]

(remove odd? [1 2 3 4 5 6])
;; Expected: [2 4 6]

;; Vector mapping
(map inc [1 2 3 4])
;; Expected: [2 3 4 5]

(map str [1 2 3])
;; Expected: ["1" "2" "3"]

;; Vector reduction
(reduce + [1 2 3 4 5])
;; Expected: 15

(reduce * [1 2 3 4])
;; Expected: 24

;; Vector with index operations
(map-indexed (fn [i x] [i x]) [:a :b :c])
;; Expected: [[0 :a] [1 :b] [2 :c]]

;; Vector comprehension (if supported)
(for [x [1 2 3] y [10 20]] (+ x y))
;; Expected: [11 21 12 22 13 23]

;; Vector destructuring in let
(let [[a b c] [1 2 3]]
  [c b a])
;; Expected: [3 2 1]

;; Vector destructuring with rest
(let [[first & rest] [1 2 3 4 5]]
  [first rest])
;; Expected: [1 [2 3 4 5]]

;; Vector find operations
(some even? [1 3 5 7 8 9])
;; Expected: true

(every? number? [1 2 3 4])
;; Expected: true

;; Vector distinct elements
(distinct [1 2 2 3 3 3 4])
;; Expected: [1 2 3 4]

;; Vector grouping
(group-by even? [1 2 3 4 5 6])
;; Expected: {true [2 4 6] false [1 3 5]}

;; Vector partitioning
(partition 2 [1 2 3 4 5 6])
;; Expected: [[1 2] [3 4] [5 6]]

(partition-by odd? [1 3 2 4 5 7 6])
;; Expected: [[1 3] [2 4] [5 7] [6]]

;; Vector frequency counting
(frequencies [1 2 1 3 2 1])
;; Expected: {1 3 2 2 3 1}

;; Vector min/max
(apply min [5 2 8 1 9])
;; Expected: 1

(apply max [5 2 8 1 9])
;; Expected: 9

;; Vector membership testing
(contains? [1 2 3] 2)
;; Expected: true

(some #{:b} [:a :b :c])
;; Expected: :b

;; Vector to other collections
(set [1 2 3 2 1])
;; Expected: #{1 2 3}

(into {} (map-indexed vector [:a :b :c]))
;; Expected: {0 :a 1 :b 2 :c}

;; Nested vector operations
(get-in [[1 2] [3 4] [5 6]] [1 0])
;; Expected: 3

(assoc-in [[1 2] [3 4]] [0 1] :changed)
;; Expected: [[1 :changed] [3 4]]

;; Vector comparison
(= [1 2 3] [1 2 3])
;; Expected: true

(= [1 2 3] [3 2 1])
;; Expected: false

;; Large vector operations
(count (range 1000))
;; Expected: 1000

(last (range 100))
;; Expected: 99

;; Edge cases: Vector with nil elements
[nil nil nil]
;; Expected: [nil nil nil]

;; Edge cases: Single element vector
[42]
;; Expected: [42]

;; Edge cases: Deeply nested vectors
[[[[[1]]]]]
;; Expected: [[[[[1]]]]]
