;; RTFS Language Feature Test: map operations
;; Tests map creation, access, and manipulation

;; Basic map creation
{:a 1 :b 2 :c 3}
;; ;; Expected: {:a 1 :b 2 :c 3}

;; Empty map
{}
;; ;; Expected: {}

;; Map with different key types
{:keyword 1 "string" 2 42 "number-key"}
;; ;; Expected: {:keyword 1 "string" 2 42 "number-key"}

;; Map with different value types
{:name "Alice" :age 30 :active true :data [1 2 3]}
;; ;; Expected: {:name "Alice" :age 30 :active true :data [1 2 3]}

;; Nested maps
{:user {:name "Bob" :address {:city "NYC" :zip 10001}}}
;; ;; Expected: {:user {:name "Bob" :address {:city "NYC" :zip 10001}}}

;; Map element access
(get {:a 1 :b 2} :a)
;; ;; Expected: 1

(get {:a 1 :b 2} :c)
;; ;; Expected: nil

(get {:a 1 :b 2} :c :default)
;; ;; Expected: :default

;; Map keyword access
(:a {:a 1 :b 2})
;; ;; Expected: 1

(:c {:a 1 :b 2} :default)
;; ;; Expected: :default

;; Map size
(count {:a 1 :b 2 :c 3})
;; ;; Expected: 3

(count {})
;; ;; Expected: 0

;; Map key/value operations
(keys {:a 1 :b 2 :c 3})
;; ;; Expected: [:a :b :c] (order may vary)

(vals {:a 1 :b 2 :c 3})
;; ;; Expected: [1 2 3] (order may vary)

;; Map association
(assoc {:a 1} :b 2 :c 3)
;; ;; Expected: {:a 1 :b 2 :c 3}

(assoc {} :first "value")
;; ;; Expected: {:first "value"}

;; Map dissociation  
(dissoc {:a 1 :b 2 :c 3} :b)
;; ;; Expected: {:a 1 :c 3}

(dissoc {:a 1 :b 2} :a :b)
;; ;; Expected: {}

;; Map update
(update {:count 5} :count inc)
;; ;; Expected: {:count 6}

(update {:items []} :items conj "new-item")
;; ;; Expected: {:items ["new-item"]}

;; Map merging
(merge {:a 1 :b 2} {:b 3 :c 4})
;; ;; Expected: {:a 1 :b 3 :c 4}

(merge {:a 1} {:b 2} {:c 3})
;; ;; Expected: {:a 1 :b 2 :c 3}

;; Map contains operations
(contains? {:a 1 :b 2} :a)
;; ;; Expected: true

(contains? {:a 1 :b 2} :c)
;; ;; Expected: false

;; Map find operation
;; (find {:a 1 :b 2} :a)
;; ;; Expected: [:a 1]

;; (find {:a 1 :b 2} :c)
;; ;; Expected: nil

;; Map filtering - destructuring in lambda params not fully implemented
;; (filter (fn [[k v]] (> v 5)) {:a 3 :b 7 :c 10 :d 2})
;; ;; Expected: [[:b 7] [:c 10]]

;; Map mapping over keys/values
(map (fn [[k v]] [k (* v 2)]) {:a 1 :b 2 :c 3})
;; ;; Expected: [[:a 2] [:b 4] [:c 6]]

;; Map reduction
(reduce (fn [acc [k v]] (+ acc v)) 0 {:a 1 :b 2 :c 3})
;; ;; Expected: 6

;; Map destructuring in let
(let [{:keys [name age]} {:name "Alice" :age 30}]
  [name age])
;; ;; Expected: ["Alice" 30]

(let [{name :name age :age} {:name "Bob" :age 25}]
  {:person name :years age})
;; ;; Expected: {:person "Bob" :years 25}

;; Map destructuring with default values
(let [{:keys [name age] :or {age 0}} {:name "Charlie"}]
  [name age])
;; ;; Expected: ["Charlie" 0]

;; Nested map access
(get-in {:user {:profile {:name "Dave"}}} [:user :profile :name])
;; ;; Expected: "Dave"

(get-in {:a {:b {:c 42}}} [:a :b :c])
;; ;; Expected: 42

;; Nested map update
(assoc-in {:user {:profile {}}} [:user :profile :name] "Eve")
;; ;; Expected: {:user {:profile {:name "Eve"}}}

(update-in {:counters {:a 1 :b 2}} [:counters :a] inc)
;; ;; Expected: {:counters {:a 2 :b 2}}

;; Map conversion from vector pairs
(into {} [[:a 1] [:b 2] [:c 3]])
;; ;; Expected: {:a 1 :b 2 :c 3}

;; Map conversion to vector
(into [] {:a 1 :b 2})
;; ;; Expected: [[:a 1] [:b 2]] (order may vary)

;; Map select operations
(select-keys {:a 1 :b 2 :c 3 :d 4} [:a :c])
;; ;; Expected: {:a 1 :c 3}

;; Map rename operations
(rename-keys {:a 1 :b 2} {:a :alpha :b :beta})
;; ;; Expected: {:alpha 1 :beta 2}

;; Map grouping
(group-by :type [{:type :a :val 1} {:type :b :val 2} {:type :a :val 3}])
;; ;; Expected: {:a [{:type :a :val 1} {:type :a :val 3}] :b [{:type :b :val 2}]}

;; Map frequency operations on values
(frequencies (vals {:a 1 :b 2 :c 1 :d 2 :e 3}))
;; ;; Expected: {1 2 2 2 3 1}

;; Map sorting by keys
(sort-by key {:c 3 :a 1 :b 2})
;; ;; Expected: [[:a 1] [:b 2] [:c 3]]

;; Map sorting by values
(sort-by val {:c 3 :a 1 :b 2})
;; ;; Expected: [[:a 1] [:b 2] [:c 3]]

;; Map with function values
{:add + :subtract - :multiply *}
;; ;; Expected: Map with function values

((:add {:add + :subtract -}) 5 3)
;; ;; Expected: 8

;; Map as configuration
(let [config {:db-host "localhost" :db-port 5432 :debug true}]
  (if (:debug config)
    (str "Connecting to " (:db-host config) ":" (:db-port config))
    "Production mode"))
;; ;; Expected: "Connecting to localhost:5432"

;; Map comparison
(= {:a 1 :b 2} {:a 1 :b 2})
;; ;; Expected: true

(= {:a 1 :b 2} {:b 2 :a 1})
;; ;; Expected: true (order shouldn't matter)

;; Map with complex keys
{{:nested :key} "value" [1 2 3] "vector-key"}
;; ;; Expected: Map with complex keys

;; Variadic map creation
(hash-map :a 1 :b 2 :c 3)
;; ;; Expected: {:a 1 :b 2 :c 3}

;; Map with metadata (if supported)
(with-meta {:a 1} {:source "test"})
;; ;; Expected: Map with metadata

;; Edge cases: Map with nil keys/values
{nil "nil-key" :nil-value nil}
;; ;; Expected: {nil "nil-key" :nil-value nil}

;; Edge cases: Single entry map
{:single "value"}
;; ;; Expected: {:single "value"}

;; Edge cases: Large map
(into {} (map #(vector % (* % %)) (range 100)))
;; ;; Expected: Large map {0 0, 1 1, 2 4, ...}
