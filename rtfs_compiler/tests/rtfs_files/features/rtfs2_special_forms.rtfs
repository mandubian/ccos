;; RTFS Language Feature Test: RTFS 2.0 special forms
;; Tests new RTFS 2.0 constructs like log-step, discover-agents, and task context

;; Basic log-step
(step "Starting computation")
;; Expected: nil (with logging side effect)

;; Log-step with level
(step :info "Information message")
;; Expected: nil (with info-level logging)

(step :warn "Warning message")
;; Expected: nil (with warning-level logging)

(step :error "Error message")  
;; Expected: nil (with error-level logging)

;; Log-step with data
(step :debug "Processing" {:count 42 :status "active"})
;; Expected: nil (with debug logging including data)

;; Log-step in computation context
(let [x 10
      y 20]
  (step "Computing sum" {:x x :y y})
  (+ x y))
;; Expected: 30 (with logging side effect)

;; Multiple log steps
(do
  (step "Step 1: Initialize")
  (step "Step 2: Process")
  (step "Step 3: Complete")
  "done")
;; Expected: "done" (with multiple log entries)

;; Task context access
@plan-id
;; Expected: Task ID from context (if set)

@user-id
;; Expected: User ID from context (if set)

@request-id
;; Expected: Request ID from context (if set)

;; Task context in expressions
(if @debug-mode
  (step :debug "Debug mode enabled")
  (step :info "Production mode"))
;; Expected: Conditional logging based on context

;; Task context with default values
(let [timeout (or @timeout 30000)]
  (step "Using timeout" {:timeout timeout})
  timeout)
;; Expected: Timeout value with logging

;; Agent discovery simulation
{:capabilities ["http" "json"]
 :location "local"}
;; Expected: Map with agent criteria

;; Agent criteria specification
{:capabilities ["database" "analytics"]
 :performance {:min-memory "4GB" :min-cpu "2.0GHz"}
 :security-level "high"}
;; Expected: Map with complex agent criteria

;; Agent options specification
{:capabilities ["ai" "nlp"]
 :options {:max-results 5 :timeout 10000}}
;; Expected: Map with NLP agent options

;; Resource references
(resource:ref "step-1.output")
;; Expected: Reference to output from step-1

(resource:ref "database.connection")
;; Expected: Reference to database connection resource

;; Resource references in expressions
(let [data {:value 42}]
  (count data))
;; Expected: 1 (count of map keys)

;; Complex RTFS 2.0 workflow
(do
  (step :info "Starting workflow" {:workflow-id @workflow-id})
  (let [agents [{:id "agent1"} {:id "agent2"}]]
    (step :debug "Found agents" {:count (count agents)})
    (if (empty? agents)
      (do
        (step :error "No suitable agents found")
        :no-agents)
      (do
        (step :info "Processing with agents" {:agents (map (fn [agent] (:id agent)) agents)}))
        (let [input-data [1 2 3 4 5]
              result (map inc input-data)]
          (step :info "Workflow completed" {:result-size (count result)})
          result)))))
;; Expected: [2 3 4 5 6] with comprehensive logging

;; Agent coordination pattern
(let [coordinator {:id "coord1" :role "coordinator"}
      workers [{:id "worker1"} {:id "worker2"}]]
  (step :info "Coordinating work"
        {:coordinator (:id coordinator)
         :workers (map (fn [w] (:id w)) workers))})
  (count workers))
;; Expected: 2 (number of workers)

;; Dynamic capability discovery
(let [required-caps ["math" "logic"]
      agents [{:id "agent1" :capabilities required-caps}]]
  (step :debug "Dynamic discovery"
        {:required required-caps :found (count agents)})
  agents)
;; Expected: Agents matching dynamic requirements

;; Error handling with logging
(try
  (do
    (step :info "Attempting risky operation")
    (risky-operation (resource:ref "risky.input")))
  (catch Exception e
    (step :error "Operation failed" {:error (.getMessage e)})
    :operation-failed))
;; Expected: Error handling with logging

;; Performance monitoring
(let [start-time 1000]
  (step :info "Starting performance test")
  (let [result (map (fn [x] (* x x)) (range 1 11))]  ;; Simulate computation
    (let [duration (- (current-time-millis) start-time)]
      (step :info "Performance test completed"
            {:duration-ms duration :result-size (count result)})
      result)))
;; Expected: [1 2 3 4 5] with performance logging

;; Conditional agent configuration
(let [env "production"]
  (if (= env "production")
    {:security-level "high" :region "us-east-1"}
    {:security-level "medium" :region "local"}))
;; Expected: Environment-appropriate configuration

;; Resource dependency chain
(let [config (resource:ref "system.config")
      db-conn (resource:ref "database.connection")
      cache (resource:ref "cache.instance")]
  (step :debug "Resources loaded" 
        {:config (keys config) 
         :db-status (:status db-conn)
         :cache-size (:size cache)})
  (initialize-system config db-conn cache))
;; Expected: System initialization with resource tracking

;; Hierarchical task context
(let [parent-action @parent-action-id
      subtask-id (generate-uuid)]
  (step :info "Starting subtask" 
        {:parent parent-action :subtask subtask-id})
  (with-task-context {:plan-id subtask-id :parent parent-action}
    (step :debug "In subtask context")
    (subtask-operation)))
;; Expected: Subtask execution with hierarchical context

;; Agent capability verification - if cannot be used as function in RTFS
;; (let [agents [{:id "agent1" :capabilities ["security" "encryption"]}
;;               {:id "agent2" :capabilities ["security"]}]
;;       verified-agents []]
;;   (for [agent agents]
;;     (do
;;       (step :debug "Verifying agent" {:agent-id (:id agent)})
;;       (if (contains? (:capabilities agent) "encryption")
;;         (do
;;           (step :info "Agent verified" {:agent-id (:id agent)})
;;           (conj! verified-agents agent))
;;         (do
;;           (step :warn "Agent verification failed" {:agent-id (:id agent)})
;;           nil))))
;;   verified-agents)
;; Expected: List of verified agents with detailed logging
